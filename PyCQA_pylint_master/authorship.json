[
  {
    "path": ".pre-commit-hooks.yaml",
    "fileType": "yaml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "-   id: pylint"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    name: pylint"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    entry: pylint"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    language: python"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony Sottile"
        },
        "content": "    types: [python]"
      }
    ],
    "authorContributionMap": {
      "Anthony Sottile": 1,
      "-": 4
    }
  },
  {
    "path": "CONTRIBUTORS.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Contributors"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "------------"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Current team:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Ashley Whetter: maintainer, contributor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Bryce Guinta: maintainer, contributor"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* Claudiu Popa: maintainer, contributor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Cara Vinson: astroid committer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Guillaume Peillex: committer"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Łukasz Rogalski: committer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Roy Williams (Lyft): committer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  added check for implementing __eq__ without implementing __hash__,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  Added Python 3 check for accessing Exception.message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  Added Python 3 check for calling encode/decode with invalid codecs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  Added Python 3 check for accessing sys.maxint."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  Added Python 3 check for bad import statements."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  Added Python 3 check for accessing deprecated methods on the \u0027string\u0027 module,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  various patches."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Dmitry Pribysh: committer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  multiple-imports, not-iterable, not-a-mapping, various patches."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Jim Robertson: committer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Ex-maintainers:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Sylvain Thenault (Logilab): main author / maintainer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Torsten Marek (Google): committer / contributor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "We would not be here without folks that contributed patches, pull requests,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "issues and their time to pylint. We\u0027re incredibly grateful to all of these"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "contributors:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Daniel Balparda (Google): GPyLint maintainer (Google\u0027s pylint variant),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  various patches"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Martin Pool (Google): warnings for anomalous backslashes, symbolic names for"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  messages (like \u0027unused\u0027), etc"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Alexandre Fayolle (Logilab): TkInter gui, documentation, debian support"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Julien Cristau, Emile Anclin (Logilab): python 3 support"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Sandro Tosi: Debian packaging"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Mads Kiilerich, Boris Feld, Bill Wendling, Sebastian Ulrich:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  various patches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Brian van den Broek: windows installation documentation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Amaury Forgeot d\u0027Arc: check names imported from a module exists in the module"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Benjamin Niemann: allow block level enabling/disabling of messages"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Nathaniel Manista: suspicious lambda checking"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* David Shea: invalid sequence and slice index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Carl Crowder: don\u0027t evaluate the value of arguments for \u0027dangerous-default-value\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Michal Nowikowski: wrong-spelling-in-comment, wrong-spelling-in-docstring,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  parallel execution on multiple CPUs and other patches."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* David Lindquist: logging-format-interpolation warning."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Brett Cannon: Port source code to be Python 2/3 compatible, Python 3"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  checker."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Vlad Temian: redundant-unittest-assert and the JSON reporter."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Cosmin Poieană: unichr-builtin and improvements to bad-open-mode."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Viorel Știrbu: intern-builtin warning."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* Dan Goldsmith: support for msg-template in HTML reporter."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Chris Rebert: unidiomatic-typecheck."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Steven Myint: duplicate-except."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Radu Ciorba: not-context-manager and confusing-with-statement warnings."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Bruno Daniel: check_docs extension."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* James Morgensen: ignored-modules option applies to import errors."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Cezar Elnazli: deprecated-method"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Stéphane Wirtel: nonlocal-without-binding"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Laura Medioni (Logilab, on behalf of the CNES): misplaced-comparison-constant,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  no-classmethod-decorator, no-staticmethod-decorator, too-many-nested-blocks,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "  too-many-boolean-expressions, unneeded-not, wrong-import-order, ungrouped-imports,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "  wrong-import-position, redefined-variable-type"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Aru Sahni: Git ignoring, regex-based ignores"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Mike Frysinger: contributor."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Moisés López (Vauxoo): Support for deprecated-modules in modules not installed,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  Refactor wrong-import-order to integrate it with `isort` library"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  Add check too-complex with mccabe for cyclomatic complexity"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "  Refactor wrong-import-position to skip try-import and nested cases"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  Add consider-merging-isinstance, superfluous-else-return"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  Fix consider-using-ternary for \u0027True and True and True or True\u0027 case"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* Luis Escobar (Vauxoo), Moisés López (Vauxoo): Add bad-docstring-quotes and docstring-first-line-empty"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* Yannick Brehon: contributor."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Glenn Matthews: autogenerated documentation for optional extensions,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "  bug fixes and enhancements for docparams (née check_docs) extension"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Elias Dorneles: minor adjust to config defaults and docs"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Yuri Bochkarev: Added epytext support to docparams extension."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Alexander Todorov: added new error conditions to \u0027bad-super-call\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new check for incorrect len(SEQUENCE) usage,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new extension for comparison against empty string constants,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new extension which detects comparing integers to zero,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new useless-return checker,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new try-except-raise checker"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Erik Eriksson - Added overlapping-except error check."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Anthony Foglia (Google): Added simple string slots check."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Derek Gustafson: contributor"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Petr Pulc: require whitespace around annotations"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* John Paraskevopoulos: add \u0027differing-param-doc\u0027 and \u0027differing-type-doc\u0027"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* Martin von Gagern (Google): Added \u0027raising-format-tuple\u0027 warning."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Ahirnish Pareek, \u0027keyword-arg-before-var-arg\u0027 check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* Daniel Miller: contributor."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* Bryce Guinta: contributor"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* Martin Bašti: contributor"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new check for shallow copy of os.environ"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Jacques Kvam: contributor"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* Brian Shaginaw: prevent error on exception check for functions"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Ioana Tagirta: fix bad thread instantiation check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* Reverb Chu: contributor"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Tobias Hernstig: contributor"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Konstantin Manna: contributor"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Andreas Freimuth: fix indentation checking with tabs"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Renat Galimov: contributor"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* Thomas Snowden: fix missing-docstring for inner functions"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Mitchell Young: minor adjustment to docparams"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Marianna Polatoglou: minor contribution for wildcard import check"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* Ben Green: contributor"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Benjamin Freeman: contributor"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Fureigh: contributor"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Jace Browning: updated default report format with clickable paths"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Sushobhit (sushobhit27): contributor"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new check \u0027comparison-with-itself\u0027."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new check \u0027useless-import-alias\u0027."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "  Added support of annotations in missing-type-doc and missing-return-type-doc."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new check \u0027comparison-with-callable\u0027."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "  Removed six package dependency."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new check \u0027chained-comparison\u0027."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new check \u0027useless-object-inheritance\u0027."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* Mariatta Wijaya: contributor"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "  Added new check `logging-fstring-interpolation`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "  Documentation typo fixes"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Jason Owen: contributor"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Mark Roman Miller: fix inline defs in too-many-statements"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Adam Dangoor: contributor"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* Gary Tyler McLeod: contributor"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* Wolfgang Grafen, Axel Muller, Fabio Zadrozny, Pierre Rouleau,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  Maarten ter Huurne, Mirko Friedenhagen and all the Logilab\u0027s team (among others)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* Matej Marusak: contributor"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* Nick Drozd: contributor, performance improvements to astroid"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Kosarchuk Sergey: contributor"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* Carey Metcalfe: demoted `try-except-raise` from error to warning"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* Marcus Näslund (naslundx): contributor"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* Natalie Serebryakova: contributor"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* Caio Carrara: contributor"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* Roberto Leinardi: PyCharm plugin maintainer"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* Aivar Annamaa: contributor"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* Hornwitser: fix import graph"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* Yuri Gribov: contributor"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* Drew Risinger: committer (docs)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Ben James"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* Tomer Chachamu, Richard Goodman: simplifiable-if-expression"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Alan Chan: contributor"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* Benjamin Drung: contributing Debian Developer"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* Scott Worley: contributor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* Michael Hudson-Doyle"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* Lucas Cimon: contributor"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* Mike Miller: contributor"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* Sergei Lebedev: contributor"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Sasha Bagan"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* Pablo Galindo Salgado: contributor"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "  Fix false positive \u0027Non-iterable value\u0027 with async comprehensions."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* Matus Valo"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Sardorbek Imomaliev: contributor"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* Justin Li (justinnhli)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* Nicolas Dickreuter"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* Pascal Corpet"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* Svetoslav Neykov: contributor"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* Federico Bond: contributor"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* Fantix King (UChicago): contributor"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* Yory (yory8): contributor"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* Thomas Hisch: contributor"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* Clément Pit-Claudel : contributor"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* Goudcode: contributor"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* Paul Renvoise : contributor"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* Bluesheeptoken: contributor"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* Michael Scott Cuthbert: contributor"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* Pierre Sassoulas : contributor"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    - Made C0412 (ungrouped import) compatible with isort"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    - Made multiple message with the same old name possible"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    - Made Pylint a little faster by refactoring the message store"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    - Broke down \"missing-docstrings\" between \"module\", \"class\" and \"function\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* Nathan Marrow"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* Taewon Kim : contributor"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* Daniil Kharkov: contributor"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* Tyler N. Thieding: contributor"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* Zeb Nicholls: contributor"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    - Made W9011 compatible with \u0027of\u0027 syntax in return types"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* Martin Vielsmaier: contributor"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* Agustin Toledo: contributor"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* Nicholas Smith: contributor"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* Peter Kolbus (Garmin): contributor"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* Oisin Moran: contributor"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* Andrzej Klajnert: contributor"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* Andrés Pérez Hortal: contributor"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* Niko Wenselowski: contributor"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* Danny Hermes: contributor"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* Eric Froemling: contributor"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* Robert Schweizer: contributor"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* Hugo van Kemenade: contributor"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* Mikhail Fesenko: contributor"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* Trevor Bekolay: contributor"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    - Added --list-msgs-enabled command"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* Rémi Cardona: contributor"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* Daniel Draper: contributor"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* Gabriel R. Sezefredo: contributor"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    - Fixed \"exception-escape\" false positive with generators"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* laike9m: contributor"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* Janne Rönkkö: contributor"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* Hugues Bruant: contributor"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* Tim Gates: contributor"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* Enji Cooper: contributor"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* Bastien Vallet: contributor"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* Pek Chhan: contributor"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* Craig Henriques: contributor"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* Matthijs Blom: contributor"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "* Andy Palmer: contributor"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "* Wes Turner (Google): added new check \u0027inconsistent-quotes\u0027"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Athos Ribeiro"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Athos Ribeiro"
        },
        "content": "* Athos Ribeiro"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Athos Ribeiro"
        },
        "content": "    Fixed dict-keys-not-iterating false positive for inverse containment checks"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Anubhav"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "* Anubhav: contributor"
      }
    ],
    "authorContributionMap": {
      "Andy Palmer": 2,
      "Anubhav": 2,
      "Athos Ribeiro": 3,
      "-": 358,
      "Wes Turner": 2
    }
  },
  {
    "path": "ChangeLog",
    "fileType": "ChangeLog",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "Pylint\u0027s ChangeLog"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.5.0?"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: TBA"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "* Add a check for asserts on string literals."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anubhav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "  Close #3284"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anubhav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Enji Cooper"
        },
        "content": "* Clean up plugin HOWTO documentation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Enji Cooper"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Athos Ribeiro"
        },
        "content": "* `not in` is considered iterating context for some of the Python 3 porting checkers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Athos Ribeiro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "* A new check `inconsistent-quotes` was added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "* Add a check for non string assignment to __name__ attribute."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "  Close #583"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* `__pow__`, `__imatmul__`, `__trunc__`, `__floor__`, and `__ceil__` are recognized as special method names."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3281"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Added errors for protocol functions when invalid return types are detected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  E0304 (invalid-bool-returned): __bool__ did not return a bool"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  E0305 (invalid-index-returned): __index__ did not return an integer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  E0306 (invalid-repr-returned): __repr__ did not return a string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  E0307 (invalid-str-returned): __str__ did not return a string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  E0308 (invalid-bytes-returned): __bytes__ did not return a string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  E0309 (invalid-hash-returned): __hash__ did not return an integer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  E0310 (invalid-length-hint-returned): __length_hint__ did not return a non-negative integer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  E0311 (invalid-format-returned): __format__ did not return a string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  E0312 (invalid-getnewargs-returned): __getnewargs__ did not return a tuple"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  E0313 (invalid-getnewargs-ex-returned): __getnewargs_ex__ did not return a tuple of the form (tuple, dict)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #560"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "* ``missing-*-docstring`` can look for ``__doc__`` assignments."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "   Close #3301"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "* ``undefined-variable`` can now find undefined loop iterables"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "   Close #498"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* ``safe_infer`` can infer a value as long as all the paths share the same type."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2503"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a --fail-under \u003cscore\u003e flag, also configurable in a .pylintrc file. If the final score is more than the specified score, it\u0027s considered a success and pylint exits with exitcode 0. Otherwise, it\u0027s considered a failure and pylint exits with its current exitcode based on the messages issued."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2242"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Don\u0027t emit ``line-too-long`` for multilines when `disable\u003dline-too-long` comment stands at their end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2957"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed an ``AttributeError`` caused by improper handling of ``dataclasses`` inference in ``pyreverse``"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3256"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Do not exempt bare except from ``undefined-variable`` and similar checks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  If a node was wrapped in a ``TryExcept``, ``pylint`` was taking a hint"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  from the except handler when deciding to emit or not a message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  We were treating bare except as a fully fledged ignore but only"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  the corresponding exceptions should be handled that way (e.g. ``NameError`` or ``ImportError``)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3235"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* No longer emit ``assignment-from-no-return`` when a function only raises an exception"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3218"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow import aliases to exempt ``import-error`` when used in type annotations."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3178"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* ``Ellipsis` is exempted from ``multiple-statements`` for function overloads."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3224"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* No longer emit ``invalid-name`` for non-constants found at module level."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  Pylint was taking the following statement from PEP-8 too far, considering"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  all module level variables as constants, which is not what the statement is saying:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "  `Constants are usually defined on a module level and written in"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  all capital letters with underscores separating words.`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3111"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3132"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow ``implicit-str-concat-in-sequence`` to be emitted for string juxtaposition"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3030"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* ``implicit-str-concat-in-sequence`` was renamed ``implicit-str-concat``"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* The ``json`` reporter no longer bypasses ``redirect_stdout``. Close #3227"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Move ``NoFileError``, ``OutputLine``, ``FunctionalTestReporter``,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "  ``FunctionalTestFile``, ``LintModuleTest`` and related methods from"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  ``test_functional.py`` to ``pylint.testutils`` to help testing for 3rd"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  party pylint plugins."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* Can read config from a setup.cfg or pyproject.toml file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #617"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix exception-escape false positive with generators"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3128"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* ``inspect.getargvalues`` is no longer marked as deprecated."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* A new check ``f-string-without-interpolation`` was added"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3190"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Flag mutable ``collections.*`` utilities as dangerous defaults"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3183"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* ``docparams`` extension supports multiple types in raises sections."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  Multiple types can also be separated by commas in all valid sections."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  Closes #2729"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow parallel linting when run under Prospector"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed false positives of ``method-hidden`` when a subclass defines"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "  the method that is being hidden."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "  Closes #414"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Python 3 porting mode is 30-50% faster on most codebases"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Python 3 porting mode no longer swallows syntax errors"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "  Closes #2956"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixes a typo in tests/functional/t/ternary.py"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "  Closes #3237"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* Pass the actual PyLinter object to sub processes to allow using custom"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "  PyLinter classes."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "  PyLinter object (and all its members except reporter) needs to support"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "  pickling so the PyLinter object can be passed to worker processes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Clean up setup.py"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "  Make pytest-runner a requirement only if running tests, similar to McCabe."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "  Clean up the setup.py file, resolving a number of warnings around it."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* Handle SyntaxError in files passed via ``--from-stdin`` option"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "  Pylint no longer outputs a traceback, if a file, read from stdin,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "  contains a syntaxerror."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Clean up .travis.yml"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "  Use up to date version of python interpreters"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Use new release of black 19.10b0 for formating"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix uppercase style to disallow 3+ uppercase followed by lowercase."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "* Fixed ``undefined-variable`` and ``unused-import`` false positives"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "  when using a metaclass via an attribute."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "  Close #1603"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.4.4?"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2019-11-13"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Exempt all the names found in type annotations from ``unused-import``"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "  The previous code was assuming that only ``typing`` names need to be"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "  exempted, but we need to do that for the rest of the type comment"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "  names as well."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3112"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Relax type import detection for names that do not come from the ``typing`` module"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3191"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.4.3?"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2019-10-18"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix an issue with ``unnecessary-comprehension`` in comprehensions with additional repacking of elements."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3148"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* ``import-outside-toplevel`` is emitted for ``ImportFrom`` nodes as well."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3175"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* Do not emit ``no-method-argument`` for functions using positional only args."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3161"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* ``consider-using-sys-exit`` is no longer emitted when `exit` is imported in the local scope."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3147"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* `invalid-overridden-method` takes `abc.abstractproperty` in account"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3150"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed ``missing-yield-type-doc`` getting incorrectly raised when"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "  a generator does not document a yield type but has a type annotation."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  Closes #3185"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* ``typing.overload`` functions are exempted from ``too-many-function-args``"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3170"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.4.2?"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2019-09-30"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* ``ignored-modules`` can skip submodules. Close #3135"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* ``self-assigning-variable`` skips class level assignments."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "   Close #2930"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* ``consider-using-sys-exit`` is exempted when `exit()` is imported from `sys`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "   Close #3145"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* Exempt annotated assignments without variable from ``class-variable-slots-conflict``"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3141"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix ``utils.is_error`` to account for functions returning early."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "  This fixes a false negative with ``unused-variable`` which was no longer triggered"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "  when a function raised an exception as the last instruction, but the body of the function"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  still had unused variables."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3028"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.4.1?"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2019-09-25"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* Exempt type checking definitions defined in both clauses of a type checking guard"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3127"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* Exempt type checking definitions inside the type check guard"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "  In a7f236528bb3758886b97285a56f3f9ce5b13a99 we added basic support"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "  for emitting `used-before-assignment` if a variable was only defined"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "  inside a type checking guard (using `TYPE_CHECKING` variable from `typing`)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "  Unfortunately that missed the case of using those type checking imports"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "  inside the guard itself, which triggered spurious used-before-assignment errors."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3119"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* Require astroid \u003e\u003d 2.3 to avoid any compatibility issues."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.4.0?"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2019-09-24"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* New check: ``import-outside-toplevel``"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "  This check warns when modules are imported from places other than a"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "  module toplevel, e.g. inside a function or a class."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* Handle inference ambiguity for ``invalid-format-index``"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2752"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* Removed Python 2 specific checks such as ``relative-import``,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "  ``invalid-encoded-data``, ``missing-super-argument``."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* Support forward references for ``function-redefined`` check."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2540"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* Handle redefinitions in case of type checking imports."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2834"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new check, ``consider-using-sys-exit``"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted when we detect that a quit() or exit() is invoked"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "  instead of sys.exit(), which is the preferred way of exiting in program."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2925"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* ``useless-suppression`` check now ignores ``cyclic-import`` suppressions,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "  which could lead to false postiives due to incomplete context at the time"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "  of the check."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3064"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* Added new checks, ``no-else-break`` and ``no-else-continue``"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "  These checks highlight unnecessary ``else`` and ``elif`` blocks after"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "  ``break`` and ``continue`` statements."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2327"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* Don\u0027t emit ``protected-access`` when a single underscore prefixed attribute"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "  is used inside a special method"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #1802"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix the \"statement\" values in the PyLinter\u0027s stats reports by module."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new check, ``invalid-overridden-method``"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted when we detect that a method is overridden"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "  as a property or a property is overridden as a method. This can indicate"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "  a bug in the application code that will trigger a runtime error."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2670"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new check, ``arguments-out-of-order``"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "  This check warns if you have arguments with names that match those in"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "  a function\u0027s signature but you are passing them in to the function"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "  in a different order."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2975"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new check, ``redeclared-assigned-name``"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted when ``pylint`` detects that a name"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "  was assigned one or multiple times in the same assignment,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "  which indicate a potential bug."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2898"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* Ignore lambda calls with variadic arguments without a context."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "  Inferring variadic positional arguments and keyword arguments"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "  will result into empty Tuples and Dicts, which can lead in"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "  some cases to false positives with regard to no-value-for-parameter."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "  In order to avoid this, until we\u0027ll have support for call context"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "  propagation, we\u0027re ignoring such cases if detected."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "  We already did that for function calls, but the previous fix"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "  was not taking in consideration ``lambdas``"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2918"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new check, ``self-assigning-variable``"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted when we detect that a variable is assigned"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "  to itself, which might indicate a potential bug in the code application."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2930"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new check, ``property-with-parameters``."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted when we detect that a defined property also"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "  has parameters, which are useless."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #3006"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* Excluded protocol classes from a couple of checks. Close #3002."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a check `unnecessary-comprehension` that detects unnecessary comprehensions."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted when ``pylint`` finds list-, set- or dict-comprehensions,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "  that are unnecessary and can be rewritten with the list-, set- or dict-constructors."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2905"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* Excluded PEP 526 instance and class variables from ``no-member``. Close #2945"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* Excluded `attrs` from `too-few-public-methods` check. Close #2988."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* ``unused-import`` emitted for the right import names in function scopes."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2928"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* Dropped support for Python 3.4."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* ``assignment-from-no-return`` not triggered for async methods."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2902"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* Don\u0027t emit ``attribute-defined-outside-init`` for variables defined in setters."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #409"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* Syntax errors report the column number."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2914"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "* Support fully qualified typing imports for type annotations."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2915"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* Exclude ``__dict__`` from ``attribute-defined-outside-init``"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix pointer on spelling check when the error are more than one time in the same line."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2895"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix crash happening when parent of called object cannot be determined"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow of in `GoogleDocstring.re_multiple_type`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* Added `subprocess-run-check` to handle subrocess.run without explicitly set `check` keyword."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2848"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* When we can\u0027t infer bare except handlers, skip ``try-except-raise``"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2853"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* Handle more `unnecessary-lambda` cases when dealing with additional kwargs in wrapped calls"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2845"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* Better postponed evaluation of annotations handling"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2847"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* Support postponed evaluation of annotations for variable annotations."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2838"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* ``epylint.py_run`` defaults to ``python`` in case the current executable is not a Python one."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2837"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* Ignore raw docstrings when running Similarities checker with `ignore-docstrings\u003dyes` option"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix crash when calling ``inherit_from_std_ex`` on a class which is its own ancestor"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2680"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new check that warns the user if a function call is used inside a test but parentheses are missing."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2658"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* ``len-as-condition`` now only fires when a ``len(x)`` call is made without an explicit comparison"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "  The message and description accompanying this checker has been changed"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "  reflect this new behavior, by explicitly asking to either rely on the"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "  fact that empty sequence are false or to compare the length with a scalar."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2684"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* Add ``preferred-module`` checker that notify if an import has a replacement module that should be used."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted when ``pylint`` finds an imported module that has a"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "  preferred replacement listed in ``preferred-modules``."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* ``assigning-non-slot`` not emitted for classes with unknown base classes."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2807"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* ``old-division`` is not emitted for non-Const nodes."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2808"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* Added method arguments to the dot writer for pyreverse."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2139"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "* Support for linting file from stdin."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "  IDEs may benefit from the support for linting from an in-memory file."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #1187"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new check `class-variable-slots-conflict`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted when ``pylint`` finds a class variable that conflicts with a slot"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "  name, which would raise a ``ValueError`` at runtime."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* Added new check: dict-iter-missing-items (E1141)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2761"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix issue with pylint name in output of python -m pylint --version"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2764"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* Relicense logo material under the CC BY-SA 4.0 license."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* Skip `if` expressions from f-strings for the `check_elif` checker"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2816"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "* C0412 (ungrouped-import) is now compatible with isort."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2806"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* Added new extension to detect too much code in a try clause"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2877"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* ``signature-mutators`` option was added"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "   With this option, users can choose to ignore `too-many-function-args`, `unexpected-keyword-arg`,"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "   and `no-value-for-parameter` for functions decorated with decorators that change"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "   the signature of a decorated function."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "   Close #259"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed a pragma comment on its own physical line being ignored when part"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "  of a logical line with the previous physical line."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #199"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed false `undefined-loop-variable` for a function defined in the loop,"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "  that uses the variable defined in that loop."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #202"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed `unused-argument` and `function-redefined` getting raised for"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "  functions decorated with `typing.overload`."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #1581"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed a false positive with ``consider-using-dict-comprehension`` for constructions that can\u0027t be converted to a comprehension"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2963"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* Added ``__post_init__`` to ``defining-attr-methods`` in order to avoid ``attribute-defined-outside-init`` in dataclasses."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2581"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* Changed description of W0199 to use the term 2-item-tuple instead of 2-uple."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow a `.` as a prefix for Sphinx name resolution."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* Checkers must now keep a 1 to 1 relationship between \"msgid\" (ie: C1234) and \"symbol\" (ie : human-readable-symbol)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* In checkers, an old_names can now be used for multiple new messages and pylint is now a little faster"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "Caused by #1164. It means if you do a partial old_names for a message definition an exception will tell you that you"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "must rename the associated identification."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow the choice of f-strings as a valid way of formatting logging strings."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "  Closes #2395"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* Added ``--list-msgs-enabled`` command to list all enabled and disabled messages given the current RC file and command line arguments."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.3.0?"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2019-02-27"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "* Protect against `NonDeducibleTypeHierarchy` when calling semi-private `is_subtype`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "  `astroid.helpers.is_subtype` raises `NonDeducibleTypeHierarchy` when it cannot infer"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "  the base classes of the given types, but that makes sense in its context given that"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "  the method is mostly used to inform the inference process about the hierarchy of classes."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "  Doesn\u0027t make that much sense for ``pylint`` itself, which is why we\u0027re handling the"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "  exception here, rather than in ``astroid``"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "  Close PyCQA/astroid#644"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* Added a new command line option ``list-groups`` for listing all the check groups ``pylint`` knows about."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow ``BaseException`` for emitting ``broad-except``, just like ``Exception``."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2741"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed a crash that occurred for ``bad-str-strip-call`` when ``strip()`` received ``None``"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2743"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* Don\u0027t emit ``*-not-iterating`` checks for builtins consumed by ``itertools``"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2731"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix a crash caused by iterating over ``Uninferable`` in a string formatting check."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2727"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed false positives for ``no-self-argument`` and ``unsubscriptable-object`` when using ``__class_getitem__`` (new in Python 3.7)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2416"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* Support ``Ellipsis`` as a synonym for ``pass`` statements."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2718"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "* ``fixme`` gets triggered only on comments."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2321"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixed a false positive for ``unused-variable`` and ``nonlocal`` assignments"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2671"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* Added ``load_configuration()`` hook for plugins"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "  New optional hook for plugins is added: ``load_configuration()``."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "  This hook is executed after configuration is loaded to prevent"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "  overwriting plugin specific configuration via user-based"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "  configuration."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2635"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix missing-raises-doc false positive (W9006)"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #1502"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* Exempt starred unpacking from ``*-not-iterating`` Python 3 checks"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2651"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "* Make ``compare-to-zero`` less zealous by checking against equality and identity"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2645"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* Add ``no-else-raise`` warning (R1720)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2558"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* Exempt ``yield from`` from ``*-not-iterating`` Python 3 checks."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2643"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix incorrect generation of ``no-else-return`` warnings (R1705)"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "  Fixed issue where ``if`` statements with nested ``if`` statements"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "  were incorrectly being flagged as ``no-else-return`` in some cases and"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "  not being flagged as ``no-else-return`` in other cases.  Added tests"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "  for verification and updated pylint source files to eliminate newly"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "  exposed warnings."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix false positive with `not-async-context-manager` caused by not understanding `contextlib.asynccontextmanager`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2440"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* Refactor ``bad-reversed-sequence`` to account for more objects that can define ``__reversed__``"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "  One such object would be an enum class, for which ``__reversed__`` yields each individual enum."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "  As such, the check for ``bad-reversed-sequence`` needs to not differentiate between classes"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "  and instances when it comes for checking of ``__reversed__`` presence."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2598"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* Added ``wrong-exception-operation``"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "  Used when an operation is done against an exception, but the operation"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "  is not valid for the exception in question. Usually emitted when having"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "  binary operations between exceptions in except handlers."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2494"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* ``no-member`` is emitted for enums when they lack a member"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "  Previously we weren\u0027t doing this because we detected a"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "  ``__getattr__`` implementation on the ``Enum`` class"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "  (and this check is skipped for classes with ``__getattr__``),"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "  but that is fine for Enums, given that they are inferred in a customised"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "  way in astroid."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2565"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "* Generalize ``chained-comparison``"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "  Previous version incorrectly detects `a \u003c b \u003c c and b \u003c d` and fails to"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "  detect `a \u003c b \u003c c and c \u003c d`."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "* Avoid popping __main__ when using multiple jobs"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "  Close #2689"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a new option \u0027check-str-concat-over-line-jumps\u0027 to check \u0027implicit-str-concat-in-sequence\u0027"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "* Fixes for the new style logging format linter."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "  The number of arguments was not handled properly, leading to an always"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "  successful check."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix false positive ``not-callable`` for uninferable properties."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix false positive ``useless-else-on-loop`` if the break is deep in the else"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "  of an inner loop."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* Minor improvements to the help text for a few options."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.2.2?"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2018-11-28"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "* Change the ``logging-format-style`` to use name identifier instead of their"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "  corresponding Python identifiers"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "  This is to prevent users having to think about escaping the default value for"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "  ``logging-format-style`` in the generated config file. Also our config parsing"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "  utilities don\u0027t quite support escaped values when it comes to ``choices`` detection,"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "  so this would have needed various hacks around that."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "  Closes #2614"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.2.1?"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2018-11-27"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "* Fix a crash caused by `implicit-str-concat-in-sequence` and multi-bytes characters."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "  Closes #2610"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.2?"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2018-11-25"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "   * Consider ``range()`` objects for ``undefined-loop-variable`` leaking from iteration."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2533"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``deprecated-method`` can use the attribute name for identifying a deprecated method"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "     Previously we were using the fully qualified name, which we still do, but the fully"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "     qualified name for some ``unittest`` deprecated aliases leads to a generic"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "     deprecation function. Instead on relying on that, we now also rely on the attribute"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "     name, which should solve some false positives."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #1653"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #1946"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "   * Fix compatibility with changes to stdlib tokenizer."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``pylint`` is less eager to consume the whole line for pragmas"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2485"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "   * Obtain the correct number of CPUs for virtualized or containerized environments."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2519"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "   * Change ``unbalanced-tuple-unpacking`` back to a warning."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "     It used to be a warning until a couple of years ago, after it was promoted to"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "     an error. But the check might be suggesting the wrong thing in some cases,"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "     for instance when checking against ``sys.argv`` which cannot be known at static"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "     analysis time. Given it might rely on potential unknown data, it\u0027s best to"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "     have it as a warning."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2522"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "   * Remove ``enumerate`` usage suggestion when defining ``__iter__`` (C0200)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2477"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "   * Emit ``too-many-starred-assignment`` only when the number of Starred nodes is per assignment elements"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2513"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "   * `try-except-raise` checker now handles multilevel inheritance hirerachy for exceptions correctly."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2484"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add a new check, ``simplifiable-if-expression`` for expressions like ``True if cond else False``."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2487"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``too-few-public-methods`` is not reported for ``typing.NamedTuple``"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2459"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "   * ```too-few-public-methods`` is not reported for dataclasses created with options."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2488"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "   * Remove wrong modules from \u0027bad-python3-import\u0027."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2453"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "   * The ``json`` reporter prints an empty list when no messages are emitted"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2446"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add a new check, ``duplicate-string-formatting-argument``"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "     This new check is emitted whenever a duplicate string formatting argument"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "     is found."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #497"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``assignment-from-no-return`` is not emitted for coroutines."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #1715"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "   * Report format string type mismatches."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``consider-using-ternary`` and ``simplified-boolean-expression`` no longer emit for sequence based checks"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2473"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "   * Handle ``AstroidSyntaxError`` when trying to import a module."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2313"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "   * Allow ``__module__`` to be redefined at a class level. Close #2451"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``pylint`` used to emit a ``unused-variable`` error if unused import was found in the function. Now instead of"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "     ``unused-variable``, ``unused-import`` is emitted."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2421"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "   * Handle asyncio.coroutine when looking for ``not-an-iterable`` check."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #996"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "   * The ``locally-enabled`` check is gone."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2442"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "   * Infer decorated methods when looking for method-hidden"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2369"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "   * Pick the latest value from the inferred values when looking for ``raising-non-exception``"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2431"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "   * Extend the TYPE_CHECKING guard to TYPE_CHECKING name as well, not just the attribute"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2411"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "   * Ignore import x.y.z as z cases for checker `useless-import-alias`."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2309"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "   * Fix false positive ``undefined-variable`` and ``used-before-assignment`` with nonlocal keyword usage."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2049"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "   * Stop ``protected-access`` exception for missing class attributes"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "   * Don\u0027t emit `assignment-from-no-return` for decorated function nodes"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2385"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "   * `unnecessary-pass` is now also emitted when a function or class contains only docstring and pass statement."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "      In Python, stubbed functions often have a body that contains just a single `pass` statement,"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "      indicating that the function doesn\u0027t do anything. However, a stubbed function can also have just a"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "      docstring, and function with a docstring and no body also does nothing."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2208"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``duplicate-argument-name`` is emitted for more than one duplicate argument per function"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1712"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "   * Allow double indentation levels for more distinguishable indentations"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #741"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "   * Consider tuples in exception handler for ``try-except-raise``."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2389"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "   * Fix astroid.ClassDef check in checkers.utils.is_subclass_of"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "   * Fix wildcard imports being ignored by the import checker"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "   * Fix external/internal distinction being broken in the import graph"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "   * Fix wildcard import check not skipping `__init__.py`"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2430"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add new option to logging checker, ``logging_format_style``"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "   * Fix --ignore-imports to understand multi-line imports"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #1422"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2019"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add a new check \u0027implicit-str-concat-in-sequence\u0027 to spot string concatenation inside lists, sets \u0026 tuples."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``literal-comparison`` is now emitted for 0 and 1 literals."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.1.1?"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2018-08-07"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "   * fix pylint crash due to ``misplaced-format-function`` not correctly handling class attribute."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2384"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "   * Do not emit \\*-builtin for Python 3 builtin checks when the builtin is used inside a try-except"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "     Close PyCQA/pylint#2228"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``simplifiable-if-statement`` not emitted when dealing with subscripts"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.1?"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2018-08-01"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "   * `trailing-comma-tuple` gets emitted for ``yield`` statements as well."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2363"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "   * Get only the arguments of the scope function for `redefined-argument-from-local`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2364"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add a check `misplaced-format-function` which is emitted if format function is used on"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "     non str object."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "     Close #2200"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "   * `chain.from_iterable` no longer emits `dict-{}-not-iterating` when dealing with dict values and keys"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "   * Demote the `try-except-raise` message from an error to a warning (E0705 -\u003e W0706)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2323"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "   * Correctly handle the new name of the Python implementation of the `abc` module."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "     Close PyCQA/astroid#2288"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "    * Modules with `__getattr__` are exempted by default from `no-member`"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "      There\u0027s no easy way to figure out if a module has a particular member when"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "      the said module uses `__getattr__`, which is a new addition to Python 3.7."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "      Instead we assume the safe thing to do, in the same way we do for classes,"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "      and skip those modules from checking."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2331"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive `invalid name` message when method or attribute name is longer then 30 characters."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2047"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "    * Include the type of the next branch in `no-else-return`"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2295"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix inconsistent behaviour for bad-continuation on first line of file"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2281"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fix not being able to disable certain messages on the last line through"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "       the global disable option"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "       Close #2278"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit `useless-return` when we have a single statement that is the return itself"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "      We still want to be explicit when a function is supposed to return"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "      an optional value; even though `pass` could still work, it\u0027s not explicit"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "      enough and the function might look like it\u0027s missing an implementation."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2300"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "   * Fix false-positive undefined-variable for self referential class name in lamdbas"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #704"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t crash when `pylint` is unable to infer the value of an argument to `next()`"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2316"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit `not-an-iterable` when dealing with async iterators."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "      But do emit it when using the usual iteration protocol against"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "      async iterators."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2311"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "   * Can specify a default docstring type for when the check cannot guess the type"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1169"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 2.0?"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2018-07-15"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "    * `try-except-raise` should not be emitted if there are any parent exception class handlers."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "       Close #2284"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "    * `trailing-comma-tuple` can be emitted for `return` statements as well."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "       Close #2269"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive ``inconsistent-return-statements`` message when exception is raised"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "      inside an else statement."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1782"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "    * `ImportFrom` nodes correctly use the full name for the import sorting checks."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2181"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "    * [].extend and similar builtin operations don\u0027t emit `dict-*-not-iterating` with the Python 3 porting checker"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2187"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a check `consider-using-dict-comprehension` which is emitted if for dict initialization"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "      the old style with list comprehensions is used."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a check `consider-using-set-comprehension` which is emitted if for set initialization"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "      the old style with list comprehensions is used."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "    * `logging-not-lazy` is emitted whenever pylint infers that a string is built with addition"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2193"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a check `chained-comparison` which is emitted if a boolean operation can be simplified"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "      by chaining some of its operations."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "      e.g \"a \u003c b and b \u003c c\", can be simplified as \"a \u003c b \u003c c\"."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2032"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a check `consider-using-in` for comparisons of a variable against"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "      multiple values with \"\u003d\u003d\" and \"or\"s instead of checking if the variable"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "      is contained \"in\" a tuple of those values."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "    * `in` is considered iterating context for some of the Python 3 porting checkers"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2186"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add `--ignore-none` flag to control if pylint should warn about `no-member` where the owner is None"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive related to `too-many-arguments` and bounded `__get__` methods"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2172"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "    * `mcs` as the first parameter of metaclass\u0027s `__new__` method was replaced by `cls`"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2028"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "    * `assignment-from-no-return` considers methods as well."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "       Close #2081"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "    * Support typing.TYPE_CHECKING for *unused-import* errors"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1948"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "    * Inferred classes at a function level no longer emit `invalid-name`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "      when they don\u0027t respect the variable regular expression"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1049"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added basic support for postponed evaluation of function annotations."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2069"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a bug with `missing-kwoa` and variadics parameters"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1111"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "    * `simplifiable-if-statement` takes in account only when assigning to same targets"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "       Close #1984"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "    * Make ``len-as-condition`` test more cases, such as ``len() \u003c 1`` or ``len \u003c\u003d 0``"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false-positive ``line-too-long`` message emission for"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "      commented line at the end of a module"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1950"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false-positive ``bad-continuation`` for with statements"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #461"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t warn about `stop-iteration-return` when using `next()` over `itertools.count`"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2158"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a check `consider-using-get` for unidiomatic usage of value/default-retrieval"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "      for a key from a dictionary"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2076"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "    * invalid-slice-index is not emitted when the slice is used as index for a complex object."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "      We only use a handful of known objects (list, set and friends) to figure out if"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "      we should emit invalid-slice-index when the slice is used to subscript an object."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit `unused-import` anymore for typing imports used in type comments."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new check \u0027useless-import-alias\u0027."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2052"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add `comparison-with-callable` to warn for comparison with bare callable, without calling it."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2082"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t warn for ``missing-type-doc`` and/or ``missing-return-type-doc``, if type"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "      annotations exist on the function signature for a parameter and/or return type."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2083"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add `--exit-zero` option for continuous integration scripts to more"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "      easily call Pylint in environments that abort when a program returns a"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "      non-zero (error) status code."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2042"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn if the first argument of an instance/ class method gets assigned"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #977"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "    * New check `comparison-with-itself` to check comparison between same value."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2051"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027logging-fstring-interpolation\u0027, emitted when f-string"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "      is used within logging function calls."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1998"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t show \u0027useless-super-delegation\u0027 if the subclass method has different type annotations."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1923"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add `unhashable-dict-key` check."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #586"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t warn that a global variable is unused if it is defined by an import"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1453"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "    * Skip wildcard import check for `__init__.py`."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2026"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "    * The Python 3 porting mode can now run with Python 3 as well."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "    * `too-few-public-methods` is not emitted for dataclasses."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "       Close #1793"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "    * New verbose mode option, enabled with `--verbose` command line flag, to"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "      display of extra non-checker-related output. It is disabled by default."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1863"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "    * `undefined-loop-variable` takes in consideration non-empty iterred objects before emitting"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2039"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add support for numpydoc optional return value names."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2030"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "    * `singleton-comparison` accounts for negative checks"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2037"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a check `consider-using-in` for comparisons of a variable against"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "      multiple values with \"\u003d\u003d\" and \"or\"s instead of checking if the variable"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "      is contained \"in\" a tuple of those values."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1977"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "    * defaultdict and subclasses of dict are now handled for dict-iter-* checks"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2005"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "    * `logging-format-interpolation` also emits when f-strings are used instead of % syntax."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1788"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t trigger misplaced-bare-raise when the raise is in a finally clause"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1924"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new check, `possibly-unused-variable`."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "      This is similar to `unused-variable`, the only difference is that it is"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted when we detect a locals() call in the scope of the unused variable."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "      The `locals()` call could potentially use the said variable, by consuming"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "      all values that are present up to the point of the call. This new check"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "      allows to disable this error when the user intentionally uses `locals()`"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "      to consume everything."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1909."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "    * `no-else-return` accounts for multiple cases"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "       The check was a bit overrestrictive because we were checking for"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "       return nodes in the .orelse node. At that point though the if statement"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "       can be refactored to not have the orelse. This improves the detection of"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "       other cases, for instance it now detects TryExcept nodes that are part of"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "       the .else branch."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "       Close #1852"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added two new checks, `invalid-envvar-value` and `invalid-envvar-default`."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "      The former is trigger whenever pylint detects that environment variable manipulation"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "      functions uses a different type than strings, while the latter is emitted whenever"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "      the said functions are using a default variable of different type than expected."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a check `consider-using-join` for concatenation of strings using str.join(sequence)"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1952"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a check `consider-swap-variables` for swapping variables with tuple unpacking"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1922"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new checker `try-except-raise` that warns the user if an except handler block"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "      has a ``raise`` statement as its first operator. The warning is shown when there is"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "      a bare raise statement, effectively re-raising the exception that was caught or the"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "      type of the exception being raised is the same as the one being handled."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t crash on invalid strings when checking for `logging-format-interpolation`"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1944"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "    * Exempt `__doc__` from triggering a `redefined-builtin`"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "      `__doc__` can be used to specify a docstring for a module without"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "      passing it as a first-statement string."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false positive bad-whitespace from function arguments with default"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "      values and annotations"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1831"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix stop-iteration-return false positive when next builtin has a"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "      default value in a generator"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1830"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix emission of false positive ``no-member`` message for class with  \"private\" attributes whose name is mangled."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1643"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fixed a crash which occurred when `Uninferable` wasn\u0027t properly handled in `stop-iteration-return`"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1779"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "    * Use the proper node to get the name for redefined functions (#1792)"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1774"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t crash when encountering bare raises while checking inconsistent returns"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1773"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive ``inconsistent-return-statements`` message when if statement is inside try/except."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1770"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive ``inconsistent-return-statements`` message when while loop are used."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1772"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "    * Correct column number for whitespace conventions."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "      Previously the column was stuck at 0"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1649"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix ``unused-argument`` false positives with overshadowed variable in"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "      dictionary comprehension."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1731"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false positive ``inconsistent-return-statements`` message when never"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "      returning functions are used (i.e sys.exit for example)."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1771"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix error when checking if function is exception, as in ``bad-exception-context``."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false positive ``inconsistent-return-statements`` message when a"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "      function is defined under an if statement."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1794"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "    * New ``useless-return`` message when function or method ends with a \"return\" or"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "      \"return None\" statement and this is the only return statement in the body."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false positive ``inconsistent-return-statements`` message by"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "      avoiding useless exception inference if the exception is not handled."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1794 (second part)"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix bad thread instantiation check when target function is provided in args."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1840"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fixed false positive when a numpy Attributes section follows a Parameters"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "      section"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1867"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix incorrect file path when file absolute path contains multiple ``path_strip_prefix`` strings."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1120"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false positive undefined-variable for lambda argument in class definitions"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1824"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add of a new checker that warns the user if some messages are enabled or disabled"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "      by id instead of symbol."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1599"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "    * Suppress false-positive ``not-callable`` messages from certain"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "      staticmethod descriptors"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1699"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix indentation handling with tabs"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1148"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false-positive ``bad-continuation`` error"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #638"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false positive unused-variable in lambda default arguments"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1921"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1552"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1099"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #210"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "    * Updated the default report format to include paths that can be clicked on in some terminals (e.g. iTerm)."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix inline def behavior with ``too-many-statements`` checker"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1978"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix `KeyError` raised when using docparams and NotImplementedError is documented."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2102"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix \u0027method-hidden\u0027 raised when assigning to a property or data descriptor."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix emitting ``useless-super-delegation`` when changing the default value of keyword arguments."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2022"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "    * Expand ignored-argument-names include starred arguments and keyword arguments"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #2214"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false-positive undefined-variable in nested lambda"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #760"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false-positive ``bad-whitespace`` message for typing annoatations"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "      with ellipses in them"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "      Close 1992"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "    * Broke down \"missing-docstrings\" between \"module\", \"class\" and \"function\""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "      For this to work we had to make multiple messages with the same old name"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "      possible."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1164"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.9?"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2018-05-15"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added two new Python 3 porting checks, `exception-escape` and `comprehension-escape`"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "      These two are emitted whenever pylint detects that a variable defined in the"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "      said blocks is used outside of the given block. On Python 3 these values are deleted."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new `deprecated-sys-function`, emitted when accessing removed sys members."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added `xreadlines-attribute`, emitted when the `xreadlines()` attribute is accessed."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "    * The Python 3 porting mode can now run with Python 3 as well."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "    * docparams extension allows abstract methods to document what overriding"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "      implementations should return, and to raise NotImplementedError without"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "      documenting it."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #2044"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "    * Special methods do not count towards `too-few-methods`,"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "      and are considered part of the public API."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "    * Enum classes do not trigger `too-few-methods`"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #605"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 2/3 check for accessing `operator.div`, which is removed in Python 3"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1936"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 2/3 check for accessing removed urllib functions"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1997"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.8.1?"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2017-12-15"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "    * Wrong version number in __pkginfo__."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.8?"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2017-12-15"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "    * Respect disable\u003d... in config file when running with --py3k."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "    * New warning `shallow-copy-environ` added"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "      Shallow copy of os.environ doesn\u0027t work as people may expect. os.environ"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "      is not a dict object but rather a proxy object, so any changes made"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "      on copy may have unexpected effects on os.environ"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "      Instead of copy.copy(os.environ) method os.environ.copy() should be"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "      used."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "      See https://bugs.python.org/issue15373 for details."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1301"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not display no-absolute-import warning multiple times per file."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "    * `trailing-comma-tuple` refactor check now extends to assignment with"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "       more than one element (such as lists)"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1713"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fixing u\u0027\u0027 string in superfluous-parens message"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1420"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "    * `abstract-class-instantiated` is now emitted for all inference paths."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "       Close #1673"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add set of predefined naming style to ease configuration of checking"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "      naming conventions."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1013"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new check, ``keyword-arg-before-vararg``"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "      This is emitted for function definitions"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "      in which keyword arguments are placed before variable"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "      positional arguments (\\*args)."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "      This may lead to args list getting modified if keyword argument\u0027s value"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "      is not provided in the function call assuming it will take default value"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "      provided in the definition."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "    * The `invalid-name` check contains the name of the template that caused the failure"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1176"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "    * Using the -j flag won\u0027t start more child linters than needed."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "      Contributed by Roman Ivanov in #1614"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with bad-python3-import on relative imports"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1608"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 check, ``non-ascii-bytes-literals``"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1545"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a couple of new Python 3 checks for accessing dict methods in non-iterable context"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "    * Protocol checks (not-a-mapping, not-an-iterable and co.) aren\u0027t emitted on classes with dynamic getattr"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning, \u0027bad-thread-instantiation\u0027"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "      This message is emitted when the threading.Thread class does not"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "      receive the target argument, but receives just one argument, which"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "      is by default the group parameter."
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1327"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "    * In non-quiet mode, absolute path of used config file is logged to"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "      standard error."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1519"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "    * Raise meaningful exception for invalid reporter class being selected"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "      When unknown reporter class will be selected as Pylint reporter,"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "      meaningful error message would be raised instead of bare ``ImportError``"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "      or ``AttribueError`` related to module or reporter class being not found."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1388"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 check for accessing removed functions from itertools"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "      like ``izip`` or ``ifilterfalse``"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 check for accessing removed fields from the types"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "      module like ``UnicodeType`` or ``XRangeType``"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 check for declaring a method ``next`` that would have"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "      been treated as an iterator in Python 2 but a normal function in Python 3."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new key-value pair in json output. The key is ``message-id``"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "      and the value is the message id."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1512"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3.0 check for raising a StopIteration inside a generator."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "      The check about raising a StopIteration inside a generator is also valid if the exception"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "      raised inherit from StopIteration."
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1385"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning, ``raising-format-tuple``, to detect multi-argument"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "      exception construction instead of message string formatting."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new check for method of logging module that concatenate string via + operator"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1479"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added parameter for limiting number of suggestions in spellchecking checkers"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a corner-case in ``consider-using-ternary`` checker."
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "      When object ``A`` used in  ``X and A or B`` was falsy in boolean context,"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "      Pylint incorrectly emitted non-equivalent ternary-based suggestion."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "      After a change message is correctly not emitted for this case."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1559"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added ``suggestion-mode`` configuration flag. When flag is enabled, informational"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "      message is emitted instead of cryptic error message for attributes accessed on"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "      c-extensions."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1466"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive ``useless-super-delegation`` message when"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "      parameters default values are different from those used in the base class."
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1085"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "    * Disabling \u0027wrong-import-order\u0027, \u0027wrong-import-position\u0027, or"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027ungrouped-imports\u0027 for a single line now prevents that line from"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "      triggering violations on subsequent lines."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1336"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python check for inconsistent return statements inside method or function."
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1267"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix ``superfluous-parens`` false positive related to handling logical statements"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "      involving ``in`` operator."
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #574"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "    * ``function-redefined`` message is no longer emitted for functions and"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "      methods which names matches dummy variable name regular expression."
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1369"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix ``missing-param-doc`` and ``missing-type-doc`` false positives when"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "      mixing ``Args`` and ``Keyword Args`` in Google docstring."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1409"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fix ``missing-docstring`` false negatives when modules, classes, or methods"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "       consist of compound statements that exceed the ``docstring-min-length``"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix ``useless-else-on-loop`` false positives when break statements are"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "      deeply nested inside loop."
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1661"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix no ``wrong-import-order`` message emitted on ordering of first and third party"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "      libraries. With this fix, pylint distinguishes third and first party"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "      modules when checking import order."
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1702"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix ``pylint disable\u003dfixme`` directives ignored for comments following the"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "      last statement in a file."
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1681"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix ``line-too-long`` message deactivated by wrong disable directive."
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "      The directive ``disable\u003dfixme`` doesn\u0027t deactivate anymore the emission"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "      of ``line-too-long`` message for long commented lines."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1741"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "    * If the rcfile specified on the command line doesn\u0027t exist, then an"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "      IOError exception is raised."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1747"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix the wrong scope of the ``disable\u003d`` directive after a commented line."
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "      For example when a ``disable\u003dline-too-long`` directive is at the end of"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "      a long commented line, it no longer disables the emission of ``line-too-long``"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "      message for lines that follow."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1742"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.7.1?"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2017-04-17"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive which occurred when an exception was reraised"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1419"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive of ``disallow-trailing-tuple``"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "      The check was improved by verifying for non-terminating newlines, which"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "      should exempt function calls and function definitions from the check"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1424"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.7?"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2017-04-13"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit missing-final-newline or trailing-whitespace for formfeeds (page breaks)."
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1218 and #1219"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit by default no-member if we have opaque inference objects in the inference results"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "      This is controlled through the new flag ignore-on-opaque-inference, which is by"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "      default True. The inference can return  multiple potential results while"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "      evaluating a Python object, but some branches might not be evaluated, which"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "      results in partial inference. In that case, it might be useful to still emit"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "      no-member and other checks for the rest of the inferred objects."
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new message `assign-to-new-keyword` to warn about assigning to names which"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "      will become a keyword in future Python releases."
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1351"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "    * Split the \u0027missing or differing\u0027 in parameter documentation in different error."
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027differing-param-doc\u0027 covers the differing part of the old \u0027missing-param-doc\u0027,"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "      and \u0027differing-type-doc\u0027 covers the differing part of the old \u0027missing-type-doc\u0027"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1342"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new error, \u0027used-prior-global-declaration\u0027, which is emitted when a name"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "      is used prior a global declaration in a function. This causes a SyntaxError in"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "      Python 3.6"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1257"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "    * The protocol checks are emitting their messages when a special method is set to None."
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1263"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "    * Properly detect if imported name is assigned to same name in different"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "      scope."
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #636, #848, #851, and #900"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "    * Require one space for annotations with type hints, as per PEP 8."
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "    * \u0027trailing-comma-tuple\u0027 check was added"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "      This message is emitted when pylint finds an one-element tuple,"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "      created by a stray comma. This can suggest a potential problem in the"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "      code and it is recommended to use parantheses in order to emphasise the"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "      creation of a tuple, rather than relying on the comma itself."
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit not-callable for instances with unknown bases."
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1213"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "    * Treat keyword only arguments the same as positional arguments with regard to unused-argument check"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t try to access variables defined in a separate scope when checking for ``protected-access``"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new check to detect incorrect usage of len(SEQUENCE) inside"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "      test conditions."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new extension to detect comparisons against empty string constants"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new extension to detect comparisons of integers against zero"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new error conditions for \u0027bad-super-call\u0027"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "      Now detects ``super(type(self), self)`` and ``super(self.__class__, self)``"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "      which can lead to recursion loop in derived classes."
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "    * PyLinter.should_analyze_file has a new optional parameter, called `is_argument`"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #1079"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add attribute hints for missing members"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1035"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027redefined-argument-from-local\u0027"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #649"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "    * Support inline comments for comma separated values in the config file"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1024"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "    * epylint.py_run\u0027s *script* parameter was removed."
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "    * epylint.py_run now uses ``shell\u003dFalse`` for running the underlying process."
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #441"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning, \u0027useless-super-delegation\u0027"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "      Close 839."
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new error, \u0027invalid-metaclass\u0027, raised when"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "      we can detect that a class is using an improper metaclass."
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #579"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new refactoring message, \u0027literal-comparison\u0027."
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #786"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "    * arguments-differ takes in consideration kwonlyargs and variadics"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #983"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "    * Removed --optimized-ast. Part of #975."
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "    * Removed --files-output option. Part of #975."
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "    * Removed pylint-gui from the package."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "    * Removed the HTML reporter. Part of #975."
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "    * ignored-argument-names is now used for ignoring arguments for unused-variable check."
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "      This option was used for ignoring arguments when computing the correct number of arguments"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "      a function should have, but for handling the arguments with regard"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "      to unused-variable check, dummy-variables-rgx was used instead. Now, ignored-argument-names"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "      is used for its original purpose and also for ignoring the matched arguments for"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "      the unused-variable check. This offers a better control of what should be ignored"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "      and how."
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "      Also, the same option was moved from the design checker to the variables checker,"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "      which means that the option now appears under the ``[VARIABLES]`` section inside"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "      the configuration file."
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #862."
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive for keyword variadics with regard to keyword only arguments."
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "      If a keyword only argument was necessary for a function, but that function was called"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "      with keyword variadics (\\**kwargs), then we were emitting a missing-kwoa false positive,"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "      which is now fixed."
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #934."
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix some false positives with unknown sized variadics."
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #878"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new extension, check_docstring, for checking PEP 257 conventions."
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #868."
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "    * config files with BOM markers can now be read."
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #864."
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "    * epylint.py_run does not crash on big files, using .communicate() instead of .wait()"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #599"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "    * Disable reports by default and show the evaluation score by default"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "      As per discussion from issue #746, the reports were disabled by"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "      default in order to simplify the interaction between the tool"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "      and the users. The score is still shown by default, as a way of"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "      closely measuring when it increases or decreases due to changes"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "      brought to the code."
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "    * Disable the information category messages by default."
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "      This is a step towards making pylint more sane, as"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "      per the discussion from issue #746."
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "    * Catch more cases as not proper iterables for __slots__ with"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "      regard to invalid-slots pattern. Closes issue #775."
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "    * empty indent strings are rejected."
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new error, \u0027relative-beyond-top-level\u0027, which is emitted"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "      when a relative import was attempted beyond the top level package."
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #588."
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning, \u0027unsupported-assignment-operation\u0027, which is"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted when item assignment is tried on an object which doesn\u0027t"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "      have this ability. Closes issue #591."
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning, \u0027unsupported-delete-operation\u0027, which is"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted when item deletion is tried on an object which doesn\u0027t"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "      have this ability. Closes issue #592."
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive of \u0027redundant-returns-doc\u0027, occurred when the documented"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "      function was using *yield* instead of *return*."
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #984."
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix false positives of \u0027missing-[raises|params|type]-doc\u0027 due to not"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": "      recognizing keyword synonyms supported by Sphinx."
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new refactoring message, \u0027consider-merging-isinstance\u0027, which is"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted whenever we can detect that consecutive isinstance calls can be"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "      merged together."
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #968"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive of \u0027missing-param-doc\u0027 and \u0027missing-type-doc\u0027,"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "      occurred when a class docstring uses the \u0027For the parameters, see\u0027"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": "      magic string but the class __init__ docstring does not, or vice versa."
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "    * `redefined-outer-name` is now also emitted when a nested loop\u0027s target"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "      variable is the same as a target variable in an outer loop."
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #911."
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added proper exception type inference for \u0027missing-raises-doc\u0027."
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added InvalidMessageError exception class to replace asserts in"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "      pylint.utils."
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": "    * More thorough validation in MessagesStore.register_messages() to avoid"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": "      one message accidentally overwriting another."
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "    * InvalidMessageError, UnknownMessage, and EmptyReport exceptions are"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": "      moved to the new pylint.exceptions submodule."
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "-"
        },
        "content": "    * UnknownMessage and EmptyReport are renamed to UnknownMessageError and"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "-"
        },
        "content": "      EmptyReportError."
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warnings \u0027missing-returns-type-doc\u0027 and \u0027missing-yields-type-doc\u0027"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "-"
        },
        "content": "      have each been split into two warnings - \u0027missing-[return|yield]-doc\u0027"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "-"
        },
        "content": "      and \u0027missing-[return|yield]-type-doc\u0027."
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added epytext support to docparams extension."
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1029."
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "-"
        },
        "content": "    * Support having plugins with the same name and with options defined"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1018"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "-"
        },
        "content": "    * Sort configuration options in a section"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1087"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 warning around implementing \u0027__div__\u0027, \u0027__idiv__\u0027, or"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027__rdiv__\u0027 as those methods are phased out in Python 3."
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning, \u0027overlapping-except\u0027, which is"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted when two exceptions in the same except-clause are aliases"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": "      for each other or one exceptions is an ancestor of another."
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": "    * Avoid crashing on ill-formatted strings when checking for string formatting errors."
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 warning for calling \u0027str.encode\u0027 or \u0027str.decode\u0027 with a non-text"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "-"
        },
        "content": "      encoding."
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new coding convention message, \u0027single-string-used-for-slots\u0027."
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1166"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 check for accessing \u0027sys.maxint\u0027 which was removed in Python 3 in favor"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "-"
        },
        "content": "      of \u0027sys.maxsize\u0027"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 check for bad imports."
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new Python 3 check for accessing deprecated string functions."
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not warn about unused arguments or function being redefined in singledispatch"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": "      registered implementations."
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1032 and #1034"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added refactoring message \u0027no-else-return\u0027."
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improve unused-variable checker to warn about unused variables in module scope."
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #919"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": "    * Ignore modules import as _ when checking for unused imports."
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1190"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improve handing of Python 3 classes with metaclasses declared in nested scopes."
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1177"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added refactoring message \u0027consider-using-ternary\u0027."
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #1204"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": "    * Bug-fix for false-positive logging-format-interpolation` when format specifications"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": "      are used in formatted string."
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes #572"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new switch ``single-line-class-stmt`` to allow single-line declaration"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": "      of empty class bodies."
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #738"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": "    * Protected access in form `type(self)._attribute` are now allowed."
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes #1031"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "-"
        },
        "content": "    * Let the user modify msg-template when Pylint is called from a Python script"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes #1269"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "    * Imports checker supports new switch ``allow-wildcard-with-all`` which disables"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": "      warning on wildcard import when imported module defines `__all__` variable."
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes #831"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": "    * `too-many-format-args` and `too-few-format-args` are emitted correctly when"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": "      starred expression are used in RHS tuple."
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes #957"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "    * `cyclic-import` checker supports local disable clauses. When one"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": "      of cycle imports was done in scope where disable clause was active,"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": "      cycle is not reported as violation."
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes #59"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s new in Pylint 1.6.3?"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2016-07-18"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not crash when inferring uninferable exception types for docparams extension"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #998"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s new in Pylint 1.6.2?"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: TBA"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not crash when printing the help of options with default regular expressions"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #990"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": "    * More granular versions for deprecated modules."
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #991"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s new in Pylint 1.6.1?"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2016-07-07"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "-"
        },
        "content": "    * Use environment markers for supporting conditional dependencies."
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.6.0?"
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2016-07-03"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new extension, `pylint.extensions.mccabe`, for warning"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "-"
        },
        "content": "      about complexity in code."
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "-"
        },
        "content": "    * Deprecate support for --optimize-ast. Part of #975."
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "-"
        },
        "content": "    * Deprecate support for the HTML output. Part of #975."
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "-"
        },
        "content": "    * Deprecate support for --output-files. Part of #975."
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fixed a documentation error for the check_docs extension. Fixes #735."
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "-"
        },
        "content": "    * Made the list of property-defining decorators configurable."
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a bug where the top name of a qualified import was detected as unused variable."
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #923."
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "-"
        },
        "content": "    * bad-builtin is now an extension check."
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "-"
        },
        "content": "    * generated-members support qualified name through regular expressions."
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "-"
        },
        "content": "      For instance, one can specify a regular expression as --generated-members\u003dastroid.node_classes.*"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "-"
        },
        "content": "      for ignoring every no-member error that is accessed as in `astroid.node_classes.missing.object`."
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add the ability to ignore files based on regex matching, with the new ``--ignore-patterns``"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "-"
        },
        "content": "      option."
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "-"
        },
        "content": "      This addresses issue #156 by allowing for multiple ignore patterns"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "-"
        },
        "content": "      to be specified. Rather than clobber the existing ignore option, we"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "-"
        },
        "content": "      introduced a new one called ignore-patterns."
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new error, \u0027trailing-newlines\u0027, which is emitted when a file"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "-"
        },
        "content": "      has trailing new lines."
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #682."
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new option, \u0027redefining-builtins-modules\u0027, for controlling the modules"
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "-"
        },
        "content": "      which can redefine builtins, such as six.moves and future.builtins."
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #464."
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "-"
        },
        "content": "    * \u0027reimported\u0027 is emitted when the same name is imported from different module."
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #162."
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new recommendation checker, \u0027consider-iterating-dictionary\u0027, which is emitted"
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "-"
        },
        "content": "      which is emitted when a dictionary is iterated through .keys()."
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #699"
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "-"
        },
        "content": "    * Use the configparser backport for Python 2"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "-"
        },
        "content": "      This fixes a problem we were having with comments inside values, which is fixed"
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "-"
        },
        "content": "      in Python 3\u0027s configparser."
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #828"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "-"
        },
        "content": "    * A new error was added, \u0027invalid-length-returned\u0027, when the `__len__`"
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "-"
        },
        "content": "      special method returned something else than a non-negative number."
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "-"
        },
        "content": "      Close issue #557"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "-"
        },
        "content": "    * Switch to using isort internally for wrong-import-order."
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #879."
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "-"
        },
        "content": "    * check_docs extension can find constructor parameters in __init__."
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #887."
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t warn about invalid-sequence-index if the indexed object has unknown base"
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "-"
        },
        "content": "      classes."
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes #867"
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t crash when checking, for super-init-not-called, a method defined in an if block."
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not emit import-error or no-name-in-module for fallback import blocks by default."
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "-"
        },
        "content": "      Until now, we warned with these errors when a fallback import block (a TryExcept block"
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "-"
        },
        "content": "      that contained imports for Python 2 and 3) was found, but this gets cumbersome when"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "-"
        },
        "content": "      trying to write compatible code. As such, we don\u0027t check these blocks by default,"
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "-"
        },
        "content": "      but the analysis can be enforced by using the new ``--analyse-fallback-block`` flag."
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #769."
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.5.5?"
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2016-03-21"
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "-"
        },
        "content": "    * Let visit_importfrom from Python 3 porting checker be called when everything is disabled"
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "-"
        },
        "content": "      Because the visit method was filtering the patterns it was expecting to be activated,"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "-"
        },
        "content": "      it didn\u0027t run when everything but one pattern was disabled, leading to spurious false"
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "-"
        },
        "content": "      positives"
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #852"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit unsubscriptable-value for classes with unknown"
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "-"
        },
        "content": "      base classes."
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #776."
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "-"
        },
        "content": "    * Use an OrderedDict for storing the configuration elements"
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "-"
        },
        "content": "      This fixes an issue related to impredictible order of the disable / enable"
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "-"
        },
        "content": "      elements from a config file. In certain cases, the disable was coming before"
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "-"
        },
        "content": "      the enable which resulted in classes of errors to be enabled, even though the intention"
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "-"
        },
        "content": "      was to disable them. The best example for this was in the context of running multiple"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "-"
        },
        "content": "      processes, each one of it having different enables / disables that affected the output."
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "-"
        },
        "content": "      Close #815"
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t consider bare and broad except handlers as ignoring NameError,"
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "-"
        },
        "content": "      AttributeError and similar exceptions, in the context of checkers for"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "-"
        },
        "content": "      these issues."
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #826"
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.5.4?"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2016-01-15"
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "-"
        },
        "content": "    * Merge StringMethodChecker with StringFormatChecker. This fixes a"
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "-"
        },
        "content": "      bug where disabling all the messages and enabling only a handful of"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "-"
        },
        "content": "      messages from the StringFormatChecker would have resulted in no"
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "-"
        },
        "content": "      messages at all."
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t apply unneeded-not over sets."
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.5.3?"
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2016-01-11"
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "-"
        },
        "content": "    * Handle the import fallback idiom with regard to wrong-import-order."
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #750."
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "-"
        },
        "content": "    * Decouple the displaying of reports from the displaying of messages"
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "-"
        },
        "content": "      Some reporters are aggregating the messages instead of displaying"
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "-"
        },
        "content": "      them when they are available. The actual displaying was conflatted"
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "-"
        },
        "content": "      in the generate_reports. Unfortunately this behaviour was flaky"
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "-"
        },
        "content": "      and in the case of the JSON reporter, the messages weren\u0027t shown"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "-"
        },
        "content": "      at all if a file had syntax errors or if it was missing."
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "-"
        },
        "content": "      In order to fix this, the aggregated messages can now be"
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "-"
        },
        "content": "      displayed with Reporter.display_message, while the reports are"
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "-"
        },
        "content": "      displayed with display_reports."
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issues #766 and #765."
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "-"
        },
        "content": "    * Ignore function calls with variadic arguments without a context."
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "-"
        },
        "content": "      Inferring variadic positional arguments and keyword arguments"
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "-"
        },
        "content": "      will result into empty Tuples and Dicts, which can lead in"
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "-"
        },
        "content": "      some cases to false positives with regard to no-value-for-parameter."
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "-"
        },
        "content": "      In order to avoid this, until we\u0027ll have support for call context"
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "-"
        },
        "content": "      propagation, we\u0027re ignoring such cases if detected."
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #722."
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "-"
        },
        "content": "    * Treat AsyncFunctionDef just like FunctionDef nodes,"
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "-"
        },
        "content": "      by implementing visit_asyncfunctiondef in terms of"
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "-"
        },
        "content": "      visit_functiondef."
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #767."
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "-"
        },
        "content": "    * Take in account kwonlyargs when verifying that arguments"
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "-"
        },
        "content": "      are defined with the check_docs extension."
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #745."
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "-"
        },
        "content": "    * Suppress reporting \u0027unneeded-not\u0027 inside `__ne__` methods"
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #749."
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.5.2?"
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2015-12-21"
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t crash if graphviz is not installed, instead emit a"
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "-"
        },
        "content": "      warning letting the user to know."
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #168."
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "-"
        },
        "content": "    * Accept only functions and methods for the deprecated-method checker."
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "-"
        },
        "content": "      This prevents a crash which can occur when an object doesn\u0027t have"
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "-"
        },
        "content": "      .qname() method after the inference."
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit super-on-old-class on classes with unknown bases."
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #721."
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "-"
        },
        "content": "    * Allow statements in `if` or `try` blocks containing imports."
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #714."
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.5.1?"
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2015-12-02"
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a crash which occurred when old visit methods are encountered"
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "-"
        },
        "content": "      in plugin modules. Closes issue #711."
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2212,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add wrong-import-position to check_messages\u0027s decorator arguments"
      },
      {
        "lineNumber": 2213,
        "author": {
          "gitId": "-"
        },
        "content": "      for ImportChecker.leave_module"
      },
      {
        "lineNumber": 2214,
        "author": {
          "gitId": "-"
        },
        "content": "      This fixes an esoteric bug which occurs when ungrouped-imports and"
      },
      {
        "lineNumber": 2215,
        "author": {
          "gitId": "-"
        },
        "content": "      wrong-import-order are disabled and pylint is executed on multiple files."
      },
      {
        "lineNumber": 2216,
        "author": {
          "gitId": "-"
        },
        "content": "      What happens is that without wrong-import-position in check_messages,"
      },
      {
        "lineNumber": 2217,
        "author": {
          "gitId": "-"
        },
        "content": "      leave_module will never be called, which means that the first non-import node"
      },
      {
        "lineNumber": 2218,
        "author": {
          "gitId": "-"
        },
        "content": "      from other files might leak into the current file,"
      },
      {
        "lineNumber": 2219,
        "author": {
          "gitId": "-"
        },
        "content": "      leading to wrong-import-position being emitted by pylint."
      },
      {
        "lineNumber": 2220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2221,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a crash which occurred when old visit methods are encountered"
      },
      {
        "lineNumber": 2222,
        "author": {
          "gitId": "-"
        },
        "content": "      in plugin modules. Closes issue #711."
      },
      {
        "lineNumber": 2223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2224,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit import-self and cyclic-import for relative imports"
      },
      {
        "lineNumber": 2225,
        "author": {
          "gitId": "-"
        },
        "content": "      of modules with the same name as the package itself."
      },
      {
        "lineNumber": 2226,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issues #708 and #706."
      },
      {
        "lineNumber": 2227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2229,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.5.0?"
      },
      {
        "lineNumber": 2230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2232,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2015-11-29"
      },
      {
        "lineNumber": 2233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2235,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added multiple warnings related to imports. \u0027wrong-import-order\u0027"
      },
      {
        "lineNumber": 2236,
        "author": {
          "gitId": "-"
        },
        "content": "      is emitted when PEP 8 recommendations regarding imports are not"
      },
      {
        "lineNumber": 2237,
        "author": {
          "gitId": "-"
        },
        "content": "      respected (that is, standard imports should be followed by third-party"
      },
      {
        "lineNumber": 2238,
        "author": {
          "gitId": "-"
        },
        "content": "      imports and then by local imports). \u0027ungrouped-imports\u0027 is emitted"
      },
      {
        "lineNumber": 2239,
        "author": {
          "gitId": "-"
        },
        "content": "      when imports from the same package or module are not placed"
      },
      {
        "lineNumber": 2240,
        "author": {
          "gitId": "-"
        },
        "content": "      together, but scattered around in the code. \u0027wrong-import-position\u0027"
      },
      {
        "lineNumber": 2241,
        "author": {
          "gitId": "-"
        },
        "content": "      is emitted when code is mixed with imports, being recommended for the"
      },
      {
        "lineNumber": 2242,
        "author": {
          "gitId": "-"
        },
        "content": "      latter to be at the top of the file, in order to figure out easier by"
      },
      {
        "lineNumber": 2243,
        "author": {
          "gitId": "-"
        },
        "content": "      a human reader what dependencies a module has."
      },
      {
        "lineNumber": 2244,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #692."
      },
      {
        "lineNumber": 2245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2246,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new refactoring warning, \u0027unneeded-not\u0027, emitted"
      },
      {
        "lineNumber": 2247,
        "author": {
          "gitId": "-"
        },
        "content": "      when an expression with the not operator could be simplified."
      },
      {
        "lineNumber": 2248,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #670."
      },
      {
        "lineNumber": 2249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2250,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new refactoring warning, \u0027simplifiable-if-statement\u0027,"
      },
      {
        "lineNumber": 2251,
        "author": {
          "gitId": "-"
        },
        "content": "      used when an if statement could be reduced to a boolean evaluation"
      },
      {
        "lineNumber": 2252,
        "author": {
          "gitId": "-"
        },
        "content": "      of its test. Closes issue #698."
      },
      {
        "lineNumber": 2253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2254,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new refactoring warning, \u0027too-many-boolean-expressions\u0027,"
      },
      {
        "lineNumber": 2255,
        "author": {
          "gitId": "-"
        },
        "content": "      used when an if statement contains too many boolean expressions,"
      },
      {
        "lineNumber": 2256,
        "author": {
          "gitId": "-"
        },
        "content": "      which makes the code less maintainable and harder to understand."
      },
      {
        "lineNumber": 2257,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #677."
      },
      {
        "lineNumber": 2258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2259,
        "author": {
          "gitId": "-"
        },
        "content": "    * Property methods are shown as attributes instead of functions in"
      },
      {
        "lineNumber": 2260,
        "author": {
          "gitId": "-"
        },
        "content": "      pyreverse class diagrams. Closes Issue #284"
      },
      {
        "lineNumber": 2261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2262,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new refactoring error, \u0027too-many-nested-blocks\u0027, which is emitted"
      },
      {
        "lineNumber": 2263,
        "author": {
          "gitId": "-"
        },
        "content": "      when a function or a method has too many nested blocks, which makes the"
      },
      {
        "lineNumber": 2264,
        "author": {
          "gitId": "-"
        },
        "content": "      code less readable and harder to understand. Closes issue #668."
      },
      {
        "lineNumber": 2265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2266,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027unsubscriptable-object\u0027, that is emitted when"
      },
      {
        "lineNumber": 2267,
        "author": {
          "gitId": "-"
        },
        "content": "      value used in subscription expression doesn\u0027t support subscription"
      },
      {
        "lineNumber": 2268,
        "author": {
          "gitId": "-"
        },
        "content": "      (i.e. doesn\u0027t define __getitem__ method)."
      },
      {
        "lineNumber": 2269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2270,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t warn about abstract classes instantiated in their own"
      },
      {
        "lineNumber": 2271,
        "author": {
          "gitId": "-"
        },
        "content": "      body. Closes issue #627."
      },
      {
        "lineNumber": 2272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2273,
        "author": {
          "gitId": "-"
        },
        "content": "    * Obsolete options are not present by default in the generated"
      },
      {
        "lineNumber": 2274,
        "author": {
          "gitId": "-"
        },
        "content": "      configuration file. Closes issue #632."
      },
      {
        "lineNumber": 2275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2276,
        "author": {
          "gitId": "-"
        },
        "content": "    * non-iterator-returned can detect classes with iterator-metaclasses."
      },
      {
        "lineNumber": 2277,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #679."
      },
      {
        "lineNumber": 2278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2279,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027unsupported-membership-test\u0027, emitted when value"
      },
      {
        "lineNumber": 2280,
        "author": {
          "gitId": "-"
        },
        "content": "      to the right of the \u0027in\u0027 operator doesn\u0027t support membership test"
      },
      {
        "lineNumber": 2281,
        "author": {
          "gitId": "-"
        },
        "content": "      protocol (i.e. doesn\u0027t define __contains__/__iter__/__getitem__)"
      },
      {
        "lineNumber": 2282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2283,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new errors, \u0027not-an-iterable\u0027, emitted when non-iterable value"
      },
      {
        "lineNumber": 2284,
        "author": {
          "gitId": "-"
        },
        "content": "      is used in an iterating context (starargs, for-statement,"
      },
      {
        "lineNumber": 2285,
        "author": {
          "gitId": "-"
        },
        "content": "      comprehensions, etc), and \u0027not-a-mapping\u0027, emitted when non-mapping"
      },
      {
        "lineNumber": 2286,
        "author": {
          "gitId": "-"
        },
        "content": "      value is used in a mapping context. Closes issue #563."
      },
      {
        "lineNumber": 2287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2288,
        "author": {
          "gitId": "-"
        },
        "content": "    * Make \u0027no-self-use\u0027 checker not emit a warning if there is a \u0027super()\u0027"
      },
      {
        "lineNumber": 2289,
        "author": {
          "gitId": "-"
        },
        "content": "      call inside the method."
      },
      {
        "lineNumber": 2290,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #667."
      },
      {
        "lineNumber": 2291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2292,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add checker to identify multiple imports on one line."
      },
      {
        "lineNumber": 2293,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #598."
      },
      {
        "lineNumber": 2294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2295,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix unused-argument false positive when the \"+\u003d\" operator is used."
      },
      {
        "lineNumber": 2296,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #518."
      },
      {
        "lineNumber": 2297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2298,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit import-error for ignored modules. PyLint will not emit import"
      },
      {
        "lineNumber": 2299,
        "author": {
          "gitId": "-"
        },
        "content": "      errors for any import which is, or is a subpackage of, a module in"
      },
      {
        "lineNumber": 2300,
        "author": {
          "gitId": "-"
        },
        "content": "      the ignored-modules list. Closes issue #223."
      },
      {
        "lineNumber": 2301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2302,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix unused-import false positive when the import is used in a"
      },
      {
        "lineNumber": 2303,
        "author": {
          "gitId": "-"
        },
        "content": "      class assignment. Closes issue #475"
      },
      {
        "lineNumber": 2304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2305,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027not-context-manager\u0027, emitted when something"
      },
      {
        "lineNumber": 2306,
        "author": {
          "gitId": "-"
        },
        "content": "      that doesn\u0027t implement __enter__ and __exit__ is used in a with"
      },
      {
        "lineNumber": 2307,
        "author": {
          "gitId": "-"
        },
        "content": "      statement."
      },
      {
        "lineNumber": 2308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2309,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027confusing-with-statement\u0027, emitted by the"
      },
      {
        "lineNumber": 2310,
        "author": {
          "gitId": "-"
        },
        "content": "      base checker, when an ambiguous looking with statement is used."
      },
      {
        "lineNumber": 2311,
        "author": {
          "gitId": "-"
        },
        "content": "      For example `with open() as first, second` which looks like a"
      },
      {
        "lineNumber": 2312,
        "author": {
          "gitId": "-"
        },
        "content": "      tuple assignment but is actually 2 context managers."
      },
      {
        "lineNumber": 2313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2314,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027duplicate-except\u0027, emitted when there is an"
      },
      {
        "lineNumber": 2315,
        "author": {
          "gitId": "-"
        },
        "content": "      exception handler which handles an exception type that was handled"
      },
      {
        "lineNumber": 2316,
        "author": {
          "gitId": "-"
        },
        "content": "      before. Closes issue #485."
      },
      {
        "lineNumber": 2317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2318,
        "author": {
          "gitId": "-"
        },
        "content": "    * A couple of warnings got promoted to errors, since they could uncover"
      },
      {
        "lineNumber": 2319,
        "author": {
          "gitId": "-"
        },
        "content": "      potential bugs in the code. These warnings are: assignment-from-none,"
      },
      {
        "lineNumber": 2320,
        "author": {
          "gitId": "-"
        },
        "content": "      unbalanced-tuple-unpacking, unpacking-non-sequence, non-iterator-returned."
      },
      {
        "lineNumber": 2321,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #388."
      },
      {
        "lineNumber": 2322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2323,
        "author": {
          "gitId": "-"
        },
        "content": "    * Allow ending a pragma control with a semicolon. In this way, users"
      },
      {
        "lineNumber": 2324,
        "author": {
          "gitId": "-"
        },
        "content": "      can continue a pragma control with a reason for why it is used,"
      },
      {
        "lineNumber": 2325,
        "author": {
          "gitId": "-"
        },
        "content": "      as in `# pylint: disable\u003dold-style-class;reason\u003d...`."
      },
      {
        "lineNumber": 2326,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #449."
      },
      {
        "lineNumber": 2327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2328,
        "author": {
          "gitId": "-"
        },
        "content": "    * --jobs can be used with --load-plugins now. Closes issue #456."
      },
      {
        "lineNumber": 2329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2330,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improve the performance of --jobs when dealing only with a package"
      },
      {
        "lineNumber": 2331,
        "author": {
          "gitId": "-"
        },
        "content": "      name. Closes issue #479."
      },
      {
        "lineNumber": 2332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2333,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit an unused-wildcard-import when the imported name comes"
      },
      {
        "lineNumber": 2334,
        "author": {
          "gitId": "-"
        },
        "content": "      from another module and it is in fact a __future__ name."
      },
      {
        "lineNumber": 2335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2336,
        "author": {
          "gitId": "-"
        },
        "content": "    * The colorized reporter now works on Windows. Closes issue #96."
      },
      {
        "lineNumber": 2337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2338,
        "author": {
          "gitId": "-"
        },
        "content": "    * Remove pointless-except warning. It was previously disabled by"
      },
      {
        "lineNumber": 2339,
        "author": {
          "gitId": "-"
        },
        "content": "      default and it wasn\u0027t very useful. Closes issue #506."
      },
      {
        "lineNumber": 2340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2341,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a crash on Python 3 related to the string checker, which"
      },
      {
        "lineNumber": 2342,
        "author": {
          "gitId": "-"
        },
        "content": "      crashed when it encountered a bytes string with a .format"
      },
      {
        "lineNumber": 2343,
        "author": {
          "gitId": "-"
        },
        "content": "      method called."
      },
      {
        "lineNumber": 2344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2345,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t warn about no-self-use for builtin properties."
      },
      {
        "lineNumber": 2346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2347,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive for bad-reversed-sequence, when a subclass"
      },
      {
        "lineNumber": 2348,
        "author": {
          "gitId": "-"
        },
        "content": "      of a `dict` provides a __reversed__ method."
      },
      {
        "lineNumber": 2349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2350,
        "author": {
          "gitId": "-"
        },
        "content": "    * Change the default no-docstring-rgx so missing-docstring isn\u0027t"
      },
      {
        "lineNumber": 2351,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted for private functions."
      },
      {
        "lineNumber": 2352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2353,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit redefined-outer-name for __future__ directives."
      },
      {
        "lineNumber": 2354,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #520."
      },
      {
        "lineNumber": 2355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2356,
        "author": {
          "gitId": "-"
        },
        "content": "    * Provide some hints for the bad-builtin message. Closes issue #522."
      },
      {
        "lineNumber": 2357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2358,
        "author": {
          "gitId": "-"
        },
        "content": "    * When checking for invalid arguments to a callable, in typecheck.py,"
      },
      {
        "lineNumber": 2359,
        "author": {
          "gitId": "-"
        },
        "content": "      look up for the __init__ in case the found __new__ comes from builtins."
      },
      {
        "lineNumber": 2360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2361,
        "author": {
          "gitId": "-"
        },
        "content": "      Since the __new__ comes from builtins, it will not have attached any"
      },
      {
        "lineNumber": 2362,
        "author": {
          "gitId": "-"
        },
        "content": "      information regarding what parameters it expects, so the check"
      },
      {
        "lineNumber": 2363,
        "author": {
          "gitId": "-"
        },
        "content": "      will be useless. Retrieving __init__ in that case will at least"
      },
      {
        "lineNumber": 2364,
        "author": {
          "gitId": "-"
        },
        "content": "      detect a couple of false negatives. Closes issue #429."
      },
      {
        "lineNumber": 2365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2366,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit no-member for classes with unknown bases."
      },
      {
        "lineNumber": 2367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2368,
        "author": {
          "gitId": "-"
        },
        "content": "      Since we don\u0027t know what those bases might add, we simply ignore"
      },
      {
        "lineNumber": 2369,
        "author": {
          "gitId": "-"
        },
        "content": "      the error in this case."
      },
      {
        "lineNumber": 2370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2371,
        "author": {
          "gitId": "-"
        },
        "content": "    * Lookup in the implicit metaclass when checking for no-member,"
      },
      {
        "lineNumber": 2372,
        "author": {
          "gitId": "-"
        },
        "content": "      if the class in question has an implicit metaclass, which is"
      },
      {
        "lineNumber": 2373,
        "author": {
          "gitId": "-"
        },
        "content": "      True for new style classes. Closes issue #438."
      },
      {
        "lineNumber": 2374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2375,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add two new warnings, duplicate-bases and inconsistent-mro."
      },
      {
        "lineNumber": 2376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2377,
        "author": {
          "gitId": "-"
        },
        "content": "      duplicate-bases is emitted when a class has the same bases"
      },
      {
        "lineNumber": 2378,
        "author": {
          "gitId": "-"
        },
        "content": "      listed more than once in its bases definition, while inconsistent-mro"
      },
      {
        "lineNumber": 2379,
        "author": {
          "gitId": "-"
        },
        "content": "      is emitted when no sane mro hierarchy can be determined. Closes issue #526."
      },
      {
        "lineNumber": 2380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2381,
        "author": {
          "gitId": "-"
        },
        "content": "    * Remove interface-not-implemented warning. Closes issue #532."
      },
      {
        "lineNumber": 2382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2383,
        "author": {
          "gitId": "-"
        },
        "content": "    * Remove the rest of interface checks: interface-is-not-class,"
      },
      {
        "lineNumber": 2384,
        "author": {
          "gitId": "-"
        },
        "content": "      missing-interface-method, unresolved-interface. The reason is that"
      },
      {
        "lineNumber": 2385,
        "author": {
          "gitId": "-"
        },
        "content": "      its better to start recommending ABCs instead of the old Zope era"
      },
      {
        "lineNumber": 2386,
        "author": {
          "gitId": "-"
        },
        "content": "      of interfaces. One side effect of this change is that ignore-iface-methods"
      },
      {
        "lineNumber": 2387,
        "author": {
          "gitId": "-"
        },
        "content": "      becomes a noop, it\u0027s deprecated and it will be removed at some time."
      },
      {
        "lineNumber": 2388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2389,
        "author": {
          "gitId": "-"
        },
        "content": "    * Emit a proper deprecation warning for reporters.BaseReporter.add_message."
      },
      {
        "lineNumber": 2390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2391,
        "author": {
          "gitId": "-"
        },
        "content": "      The alternative way is to use handle_message. add_message will be removed in"
      },
      {
        "lineNumber": 2392,
        "author": {
          "gitId": "-"
        },
        "content": "      Pylint 1.6."
      },
      {
        "lineNumber": 2393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2394,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new module \u0027extensions\u0027 for optional checkers with the test"
      },
      {
        "lineNumber": 2395,
        "author": {
          "gitId": "-"
        },
        "content": "      directory \u0027test/extensions\u0027 and documentation file \u0027doc/extensions.rst\u0027."
      },
      {
        "lineNumber": 2396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2397,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new checker \u0027extensions.check_docs\u0027 that verifies parameter"
      },
      {
        "lineNumber": 2398,
        "author": {
          "gitId": "-"
        },
        "content": "      documention in Sphinx, Google, and Numpy style."
      },
      {
        "lineNumber": 2399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2400,
        "author": {
          "gitId": "-"
        },
        "content": "    * Detect undefined variable cases, where the \"definition\" of an undefined"
      },
      {
        "lineNumber": 2401,
        "author": {
          "gitId": "-"
        },
        "content": "      variable was in del statement. Instead of emitting used-before-assignment,"
      },
      {
        "lineNumber": 2402,
        "author": {
          "gitId": "-"
        },
        "content": "      which is totally misleading, it now emits undefined-variable."
      },
      {
        "lineNumber": 2403,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #528."
      },
      {
        "lineNumber": 2404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2405,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit attribute-defined-outside-init and access-member-before-definition"
      },
      {
        "lineNumber": 2406,
        "author": {
          "gitId": "-"
        },
        "content": "      for mixin classes. Actual errors can occur in mixin classes, but this is"
      },
      {
        "lineNumber": 2407,
        "author": {
          "gitId": "-"
        },
        "content": "      controlled by the ignore-mixin-members option. Closes issue #412."
      },
      {
        "lineNumber": 2408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2409,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improve the detection of undefined variables and variables used before"
      },
      {
        "lineNumber": 2410,
        "author": {
          "gitId": "-"
        },
        "content": "      assignment for variables used as default arguments to function,"
      },
      {
        "lineNumber": 2411,
        "author": {
          "gitId": "-"
        },
        "content": "      where the variable was first defined in the class scope."
      },
      {
        "lineNumber": 2412,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #342 and issue #404."
      },
      {
        "lineNumber": 2413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2414,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027unexpected-special-method-signature\u0027, which is emitted"
      },
      {
        "lineNumber": 2415,
        "author": {
          "gitId": "-"
        },
        "content": "      when a special method (dunder method) doesn\u0027t have the expected signature,"
      },
      {
        "lineNumber": 2416,
        "author": {
          "gitId": "-"
        },
        "content": "      which can lead to actual errors in the application code."
      },
      {
        "lineNumber": 2417,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #253."
      },
      {
        "lineNumber": 2418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2419,
        "author": {
          "gitId": "-"
        },
        "content": "    * Remove \u0027bad-context-manager\u0027 due to the inclusion of \u0027unexpected-special-method-signature\u0027."
      },
      {
        "lineNumber": 2420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2421,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit no-name-in-module if the import is guarded by an ImportError, Exception or"
      },
      {
        "lineNumber": 2422,
        "author": {
          "gitId": "-"
        },
        "content": "      a bare except clause."
      },
      {
        "lineNumber": 2423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2424,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit no-member if the attribute access node is protected by an"
      },
      {
        "lineNumber": 2425,
        "author": {
          "gitId": "-"
        },
        "content": "      except handler, which handles AttributeError, Exception or it is a"
      },
      {
        "lineNumber": 2426,
        "author": {
          "gitId": "-"
        },
        "content": "      bare except."
      },
      {
        "lineNumber": 2427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2428,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit import-error if the import is guarded by an ImportError, Exception or a"
      },
      {
        "lineNumber": 2429,
        "author": {
          "gitId": "-"
        },
        "content": "      bare except clause."
      },
      {
        "lineNumber": 2430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2431,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit undefined-variable if the node is guarded by a NameError, Exception"
      },
      {
        "lineNumber": 2432,
        "author": {
          "gitId": "-"
        },
        "content": "      or bare except clause."
      },
      {
        "lineNumber": 2433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2434,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027using-constant-test\u0027, which is emitted when a conditional"
      },
      {
        "lineNumber": 2435,
        "author": {
          "gitId": "-"
        },
        "content": "      statement (If, IfExp) uses a test which is always constant, such as numbers,"
      },
      {
        "lineNumber": 2436,
        "author": {
          "gitId": "-"
        },
        "content": "      classes, functions etc. This is most likely an error from the user\u0027s part."
      },
      {
        "lineNumber": 2437,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #524."
      },
      {
        "lineNumber": 2438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2439,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027raising-non-exception\u0027 when the exception has unknown"
      },
      {
        "lineNumber": 2440,
        "author": {
          "gitId": "-"
        },
        "content": "      bases. We don\u0027t know what those bases actually are and it\u0027s better"
      },
      {
        "lineNumber": 2441,
        "author": {
          "gitId": "-"
        },
        "content": "      to assume that the user knows what he is doing rather than emitting"
      },
      {
        "lineNumber": 2442,
        "author": {
          "gitId": "-"
        },
        "content": "      a message which can be considered a false positive."
      },
      {
        "lineNumber": 2443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2444,
        "author": {
          "gitId": "-"
        },
        "content": "    * Look for a .pylintrc configuration file in the current folder,"
      },
      {
        "lineNumber": 2445,
        "author": {
          "gitId": "-"
        },
        "content": "      if pylintrc is not found. Dotted pylintrc files will not be searched"
      },
      {
        "lineNumber": 2446,
        "author": {
          "gitId": "-"
        },
        "content": "      in the parents of the current folder, as it is done for pylintrc."
      },
      {
        "lineNumber": 2447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2448,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027invalid-unary-type-operand\u0027, emitted when"
      },
      {
        "lineNumber": 2449,
        "author": {
          "gitId": "-"
        },
        "content": "      an unary operand is used on something which doesn\u0027t support that"
      },
      {
        "lineNumber": 2450,
        "author": {
          "gitId": "-"
        },
        "content": "      operation (for instance, using the unary bitwise inversion operator"
      },
      {
        "lineNumber": 2451,
        "author": {
          "gitId": "-"
        },
        "content": "      on an instance which doesn\u0027t implement __invert__)."
      },
      {
        "lineNumber": 2452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2453,
        "author": {
          "gitId": "-"
        },
        "content": "    * Take in consideration differences between arguments of various"
      },
      {
        "lineNumber": 2454,
        "author": {
          "gitId": "-"
        },
        "content": "      type of functions (classmethods, staticmethods, properties)"
      },
      {
        "lineNumber": 2455,
        "author": {
          "gitId": "-"
        },
        "content": "      when checking for `arguments-differ`. Closes issue #548."
      },
      {
        "lineNumber": 2456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2457,
        "author": {
          "gitId": "-"
        },
        "content": "    * astroid.inspector was moved to pylint.pyreverse, since it belongs"
      },
      {
        "lineNumber": 2458,
        "author": {
          "gitId": "-"
        },
        "content": "      there and it doesn\u0027t need to be in astroid."
      },
      {
        "lineNumber": 2459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2460,
        "author": {
          "gitId": "-"
        },
        "content": "    * astroid.utils.LocalsVisitor was moved to pylint.pyreverse.LocalsVisitor."
      },
      {
        "lineNumber": 2461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2462,
        "author": {
          "gitId": "-"
        },
        "content": "    * pylint.checkers.utils.excepts_import_error was removed."
      },
      {
        "lineNumber": 2463,
        "author": {
          "gitId": "-"
        },
        "content": "      Use pylint.chekcers.utils.error_of_type instead."
      },
      {
        "lineNumber": 2464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2465,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit undefined-all-variables for nodes which can\u0027t be"
      },
      {
        "lineNumber": 2466,
        "author": {
          "gitId": "-"
        },
        "content": "      inferred (YES nodes)."
      },
      {
        "lineNumber": 2467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2468,
        "author": {
          "gitId": "-"
        },
        "content": "    * yield-outside-func is also emitted for `yield from`."
      },
      {
        "lineNumber": 2469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2470,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027too-many-star-expressions\u0027, emitted when"
      },
      {
        "lineNumber": 2471,
        "author": {
          "gitId": "-"
        },
        "content": "      there are more than one starred expression (`*x`) in an assignment."
      },
      {
        "lineNumber": 2472,
        "author": {
          "gitId": "-"
        },
        "content": "      The warning is emitted only on Python 3."
      },
      {
        "lineNumber": 2473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2474,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027invalid-star-assignment-target\u0027, emitted when"
      },
      {
        "lineNumber": 2475,
        "author": {
          "gitId": "-"
        },
        "content": "      a starred expression (`*x`) is used as the lhs side of an assignment,"
      },
      {
        "lineNumber": 2476,
        "author": {
          "gitId": "-"
        },
        "content": "      as in `*x \u003d [1, 2]`. This is not a SyntaxError on Python 3 though."
      },
      {
        "lineNumber": 2477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2478,
        "author": {
          "gitId": "-"
        },
        "content": "    * Detect a couple of objects which can\u0027t be base classes (bool,"
      },
      {
        "lineNumber": 2479,
        "author": {
          "gitId": "-"
        },
        "content": "      slice, range and memoryview, which weren\u0027t detected until now)."
      },
      {
        "lineNumber": 2480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2481,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error for the Python 3 porting checker, `import-star-module-level`,"
      },
      {
        "lineNumber": 2482,
        "author": {
          "gitId": "-"
        },
        "content": "      which is used when a star import is detected in another scope than the"
      },
      {
        "lineNumber": 2483,
        "author": {
          "gitId": "-"
        },
        "content": "      module level, which is an error on Python 3. Using this will emit a"
      },
      {
        "lineNumber": 2484,
        "author": {
          "gitId": "-"
        },
        "content": "      SyntaxWarning on Python 2."
      },
      {
        "lineNumber": 2485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2486,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027star-needs-assignment-target\u0027, emitted on Python 3 when"
      },
      {
        "lineNumber": 2487,
        "author": {
          "gitId": "-"
        },
        "content": "      a Starred expression (`*x`) is not used in an assignment target. This is not"
      },
      {
        "lineNumber": 2488,
        "author": {
          "gitId": "-"
        },
        "content": "      caught when parsing the AST on Python 3, so it needs to be a separate check."
      },
      {
        "lineNumber": 2489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2490,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027unsupported-binary-operation\u0027, emitted when"
      },
      {
        "lineNumber": 2491,
        "author": {
          "gitId": "-"
        },
        "content": "      two a binary arithmetic operation is executed between two objects"
      },
      {
        "lineNumber": 2492,
        "author": {
          "gitId": "-"
        },
        "content": "      which don\u0027t support it (a number plus a string for instance)."
      },
      {
        "lineNumber": 2493,
        "author": {
          "gitId": "-"
        },
        "content": "      This is currently disabled, since the it exhibits way too many false"
      },
      {
        "lineNumber": 2494,
        "author": {
          "gitId": "-"
        },
        "content": "      positives, but it will be reenabled as soon as possible."
      },
      {
        "lineNumber": 2495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2496,
        "author": {
          "gitId": "-"
        },
        "content": "    * New imported features from astroid into pyreverse: pyreverse.inspector.Project,"
      },
      {
        "lineNumber": 2497,
        "author": {
          "gitId": "-"
        },
        "content": "      pyreverse.inspector.project_from_files and pyreverse.inspector.interfaces."
      },
      {
        "lineNumber": 2498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2499,
        "author": {
          "gitId": "-"
        },
        "content": "      These were moved since they didn\u0027t belong in astroid."
      },
      {
        "lineNumber": 2500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2501,
        "author": {
          "gitId": "-"
        },
        "content": "    * Enable misplaced-future for Python 3. Closes issue #580."
      },
      {
        "lineNumber": 2502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2503,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027nonlocal-and-global\u0027, which is emitted when a"
      },
      {
        "lineNumber": 2504,
        "author": {
          "gitId": "-"
        },
        "content": "      name is found to be both nonlocal and global in the same scope."
      },
      {
        "lineNumber": 2505,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #581."
      },
      {
        "lineNumber": 2506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2507,
        "author": {
          "gitId": "-"
        },
        "content": "    * ignored-classes option can work with qualified names (ignored-classes\u003doptparse.Values)"
      },
      {
        "lineNumber": 2508,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #297."
      },
      {
        "lineNumber": 2509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2510,
        "author": {
          "gitId": "-"
        },
        "content": "    * ignored-modules can work with qualified names as well as with Unix pattern"
      },
      {
        "lineNumber": 2511,
        "author": {
          "gitId": "-"
        },
        "content": "      matching for recursive ignoring. Closes issues #244."
      },
      {
        "lineNumber": 2512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2513,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improve detection of relative imports in non-packages, as well as importing"
      },
      {
        "lineNumber": 2514,
        "author": {
          "gitId": "-"
        },
        "content": "      missing modules with a relative import from a package."
      },
      {
        "lineNumber": 2515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2516,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit no-init if not all the bases from a class are known."
      },
      {
        "lineNumber": 2517,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #604."
      },
      {
        "lineNumber": 2518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2519,
        "author": {
          "gitId": "-"
        },
        "content": "    * --no-space-check option accepts `empty-line` as a possible option."
      },
      {
        "lineNumber": 2520,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #541."
      },
      {
        "lineNumber": 2521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2522,
        "author": {
          "gitId": "-"
        },
        "content": "    * --generate-rcfile generates by default human readable symbols"
      },
      {
        "lineNumber": 2523,
        "author": {
          "gitId": "-"
        },
        "content": "      for the --disable option. Closes issue #608."
      },
      {
        "lineNumber": 2524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2525,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improved the not-in-loop checker to properly detect more cases."
      },
      {
        "lineNumber": 2526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2527,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027continue-in-finally\u0027, which is emitted when"
      },
      {
        "lineNumber": 2528,
        "author": {
          "gitId": "-"
        },
        "content": "      the `continue` keyword is found inside a `finally` clause, which"
      },
      {
        "lineNumber": 2529,
        "author": {
          "gitId": "-"
        },
        "content": "      is a SyntaxError."
      },
      {
        "lineNumber": 2530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2531,
        "author": {
          "gitId": "-"
        },
        "content": "    * The --zope flag is deprecated and it is slated for removal"
      },
      {
        "lineNumber": 2532,
        "author": {
          "gitId": "-"
        },
        "content": "      in Pylint 1.6."
      },
      {
        "lineNumber": 2533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2534,
        "author": {
          "gitId": "-"
        },
        "content": "      The reason behind this removal is the fact that it\u0027s a specialized"
      },
      {
        "lineNumber": 2535,
        "author": {
          "gitId": "-"
        },
        "content": "      flag and there are solutions for the original problem:"
      },
      {
        "lineNumber": 2536,
        "author": {
          "gitId": "-"
        },
        "content": "      use --generated-members with the members that causes problems"
      },
      {
        "lineNumber": 2537,
        "author": {
          "gitId": "-"
        },
        "content": "      when using Zope or add AST transforms tailored to the zope"
      },
      {
        "lineNumber": 2538,
        "author": {
          "gitId": "-"
        },
        "content": "      project."
      },
      {
        "lineNumber": 2539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2540,
        "author": {
          "gitId": "-"
        },
        "content": "      At the same time, --include-ids and --symbols will also be removed"
      },
      {
        "lineNumber": 2541,
        "author": {
          "gitId": "-"
        },
        "content": "      in Pylint 1.6. Closes issue #570."
      },
      {
        "lineNumber": 2542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2543,
        "author": {
          "gitId": "-"
        },
        "content": "    * missing-module-attribute was removed and the corresponding"
      },
      {
        "lineNumber": 2544,
        "author": {
          "gitId": "-"
        },
        "content": "      CLI option, required-attributes, which is slated for removal"
      },
      {
        "lineNumber": 2545,
        "author": {
          "gitId": "-"
        },
        "content": "      in Pylint 1.6."
      },
      {
        "lineNumber": 2546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2547,
        "author": {
          "gitId": "-"
        },
        "content": "    * missing-reversed-argument was removed."
      },
      {
        "lineNumber": 2548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2549,
        "author": {
          "gitId": "-"
        },
        "content": "      The reason behind this is that this kind of errors should be"
      },
      {
        "lineNumber": 2550,
        "author": {
          "gitId": "-"
        },
        "content": "      detected by the type checker for *all* the builtins and not"
      },
      {
        "lineNumber": 2551,
        "author": {
          "gitId": "-"
        },
        "content": "      as a special case for the reversed builtin. This will happen"
      },
      {
        "lineNumber": 2552,
        "author": {
          "gitId": "-"
        },
        "content": "      shortly in the future."
      },
      {
        "lineNumber": 2553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2554,
        "author": {
          "gitId": "-"
        },
        "content": "    * --comment flag is obsolete and it will be removed in Pylint 1.6."
      },
      {
        "lineNumber": 2555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2556,
        "author": {
          "gitId": "-"
        },
        "content": "    * --profile flag is obsolete and it will be removed in Pylint 1.6."
      },
      {
        "lineNumber": 2557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2558,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027misplaced-bare-raise\u0027."
      },
      {
        "lineNumber": 2559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2560,
        "author": {
          "gitId": "-"
        },
        "content": "      The error is used when a bare raise is not used inside an except clause."
      },
      {
        "lineNumber": 2561,
        "author": {
          "gitId": "-"
        },
        "content": "      This can generate a RuntimeError in Python, if there are no active exceptions"
      },
      {
        "lineNumber": 2562,
        "author": {
          "gitId": "-"
        },
        "content": "      to be reraised. While it works in Python 2 due to the fact that the exception"
      },
      {
        "lineNumber": 2563,
        "author": {
          "gitId": "-"
        },
        "content": "      leaks outside of the except block, it\u0027s nevertheless a behaviour that"
      },
      {
        "lineNumber": 2564,
        "author": {
          "gitId": "-"
        },
        "content": "      a user shouldn\u0027t depend upon, since it\u0027s not obvious to the reader of the code"
      },
      {
        "lineNumber": 2565,
        "author": {
          "gitId": "-"
        },
        "content": "      what exception will be raised and it will not be compatible with Python 3 anyhow."
      },
      {
        "lineNumber": 2566,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #633."
      },
      {
        "lineNumber": 2567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2568,
        "author": {
          "gitId": "-"
        },
        "content": "    * Bring logilab-common\u0027s ureports into pylint.reporters."
      },
      {
        "lineNumber": 2569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2570,
        "author": {
          "gitId": "-"
        },
        "content": "      With this change, we moved away from depending on logilab-common,"
      },
      {
        "lineNumber": 2571,
        "author": {
          "gitId": "-"
        },
        "content": "      having in Pylint all the components that were used from logilab-common."
      },
      {
        "lineNumber": 2572,
        "author": {
          "gitId": "-"
        },
        "content": "      The API should be considered an implementation detail and can change at"
      },
      {
        "lineNumber": 2573,
        "author": {
          "gitId": "-"
        },
        "content": "      some point in the future."
      },
      {
        "lineNumber": 2574,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #621."
      },
      {
        "lineNumber": 2575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2576,
        "author": {
          "gitId": "-"
        },
        "content": "    * `reimported` is emitted for reimported objects on the same line."
      },
      {
        "lineNumber": 2577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2578,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #639."
      },
      {
        "lineNumber": 2579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2580,
        "author": {
          "gitId": "-"
        },
        "content": "    * Abbreviations of command line options are not supported anymore."
      },
      {
        "lineNumber": 2581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2582,
        "author": {
          "gitId": "-"
        },
        "content": "      Using abbreviations for CLI options was never considered to be"
      },
      {
        "lineNumber": 2583,
        "author": {
          "gitId": "-"
        },
        "content": "      a feature of pylint, this fact being only a side effect of using optparse."
      },
      {
        "lineNumber": 2584,
        "author": {
          "gitId": "-"
        },
        "content": "      As this was the case, using --load-plugin or other abbreviation"
      },
      {
        "lineNumber": 2585,
        "author": {
          "gitId": "-"
        },
        "content": "      for --load-plugins never actually worked, while it also didn\u0027t raise"
      },
      {
        "lineNumber": 2586,
        "author": {
          "gitId": "-"
        },
        "content": "      an error. Closes issue #424."
      },
      {
        "lineNumber": 2587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2588,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027nonlocal-without-binding\u0027"
      },
      {
        "lineNumber": 2589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2590,
        "author": {
          "gitId": "-"
        },
        "content": "      The error is emitted on Python 3 when a nonlocal name is not bound"
      },
      {
        "lineNumber": 2591,
        "author": {
          "gitId": "-"
        },
        "content": "      to any variable in the parents scopes. Closes issue #582."
      },
      {
        "lineNumber": 2592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2593,
        "author": {
          "gitId": "-"
        },
        "content": "    * \u0027deprecated-module\u0027 can be shown for modules which aren\u0027t"
      },
      {
        "lineNumber": 2594,
        "author": {
          "gitId": "-"
        },
        "content": "       available. Closes issue #362."
      },
      {
        "lineNumber": 2595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2596,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t consider a class abstract if its members can\u0027t"
      },
      {
        "lineNumber": 2597,
        "author": {
          "gitId": "-"
        },
        "content": "      be properly inferred."
      },
      {
        "lineNumber": 2598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2599,
        "author": {
          "gitId": "-"
        },
        "content": "      This fixes a false positive related to abstract-class-instantiated."
      },
      {
        "lineNumber": 2600,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #648."
      },
      {
        "lineNumber": 2601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2602,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new checker for the async features added by PEP 492."
      },
      {
        "lineNumber": 2603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2604,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027yield-inside-async-function\u0027, emitted on"
      },
      {
        "lineNumber": 2605,
        "author": {
          "gitId": "-"
        },
        "content": "      Python 3.5 and upwards when the `yield` statement is found inside"
      },
      {
        "lineNumber": 2606,
        "author": {
          "gitId": "-"
        },
        "content": "      a new coroutine function (PEP 492)."
      },
      {
        "lineNumber": 2607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2608,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027not-async-context-manager\u0027, emitted when"
      },
      {
        "lineNumber": 2609,
        "author": {
          "gitId": "-"
        },
        "content": "      an async context manager block is used with an object which doesn\u0027t"
      },
      {
        "lineNumber": 2610,
        "author": {
          "gitId": "-"
        },
        "content": "      support this protocol (PEP 492)."
      },
      {
        "lineNumber": 2611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2612,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new convention warning, \u0027singleton-comparison\u0027, emitted when"
      },
      {
        "lineNumber": 2613,
        "author": {
          "gitId": "-"
        },
        "content": "      comparison to True, False or None is found."
      },
      {
        "lineNumber": 2614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2615,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027assigning-non-slot\u0027 for descriptors. Closes issue #652."
      },
      {
        "lineNumber": 2616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2617,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new error, \u0027repeated-keyword\u0027, when a keyword argument is passed"
      },
      {
        "lineNumber": 2618,
        "author": {
          "gitId": "-"
        },
        "content": "      multiple times into a function call."
      },
      {
        "lineNumber": 2619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2620,
        "author": {
          "gitId": "-"
        },
        "content": "      This is similar with redundant-keyword-arg, but it\u0027s mildly different"
      },
      {
        "lineNumber": 2621,
        "author": {
          "gitId": "-"
        },
        "content": "      that it needs to be a separate error."
      },
      {
        "lineNumber": 2622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2623,
        "author": {
          "gitId": "-"
        },
        "content": "    * --enable\u003dall can now be used. Closes issue #142."
      },
      {
        "lineNumber": 2624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2625,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new convention message, \u0027misplaced-comparison-constant\u0027,"
      },
      {
        "lineNumber": 2626,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted when a constant is placed in the left hand side of a comparison,"
      },
      {
        "lineNumber": 2627,
        "author": {
          "gitId": "-"
        },
        "content": "      as in \u00275 \u003d\u003d func()\u0027. This is also called Yoda condition, since the"
      },
      {
        "lineNumber": 2628,
        "author": {
          "gitId": "-"
        },
        "content": "      flow of code reminds of the Star Wars green character, conditions usually"
      },
      {
        "lineNumber": 2629,
        "author": {
          "gitId": "-"
        },
        "content": "      encountered in languages with variabile assignments in conditional"
      },
      {
        "lineNumber": 2630,
        "author": {
          "gitId": "-"
        },
        "content": "      statements."
      },
      {
        "lineNumber": 2631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2632,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new convention message, \u0027consider-using-enumerate\u0027, which is"
      },
      {
        "lineNumber": 2633,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted when code that uses `range` and `len` for iterating is encountered."
      },
      {
        "lineNumber": 2634,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #684."
      },
      {
        "lineNumber": 2635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2636,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added two new refactoring messages, \u0027no-classmethod-decorator\u0027 and"
      },
      {
        "lineNumber": 2637,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027no-staticmethod-decorator\u0027, which are emitted when a static method or a class"
      },
      {
        "lineNumber": 2638,
        "author": {
          "gitId": "-"
        },
        "content": "      method is declared without using decorators syntax."
      },
      {
        "lineNumber": 2639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2640,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #675."
      },
      {
        "lineNumber": 2641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2644,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.4.3?"
      },
      {
        "lineNumber": 2645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2647,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2015-03-14"
      },
      {
        "lineNumber": 2648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2650,
        "author": {
          "gitId": "-"
        },
        "content": "    * Remove three warnings: star-args, abstract-class-little-used,"
      },
      {
        "lineNumber": 2651,
        "author": {
          "gitId": "-"
        },
        "content": "      abstract-class-not-used. These warnings don\u0027t add any real value"
      },
      {
        "lineNumber": 2652,
        "author": {
          "gitId": "-"
        },
        "content": "      and they don\u0027t imply errors or problems in the code."
      },
      {
        "lineNumber": 2653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2654,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new option for controlling the peephole optimizer in astroid."
      },
      {
        "lineNumber": 2655,
        "author": {
          "gitId": "-"
        },
        "content": "      The option ``--optimize-ast`` will control the peephole optimizer,"
      },
      {
        "lineNumber": 2656,
        "author": {
          "gitId": "-"
        },
        "content": "      which is used to optimize a couple of AST subtrees. The current problem"
      },
      {
        "lineNumber": 2657,
        "author": {
          "gitId": "-"
        },
        "content": "      solved by the peephole optimizer is when multiple joined strings,"
      },
      {
        "lineNumber": 2658,
        "author": {
          "gitId": "-"
        },
        "content": "      with the addition operator, are encountered. If the numbers of such"
      },
      {
        "lineNumber": 2659,
        "author": {
          "gitId": "-"
        },
        "content": "      strings is high enough, Pylint will then fail with a maximum recursion"
      },
      {
        "lineNumber": 2660,
        "author": {
          "gitId": "-"
        },
        "content": "      depth exceeded error, due to its visitor architecture. The peephole"
      },
      {
        "lineNumber": 2661,
        "author": {
          "gitId": "-"
        },
        "content": "      just transforms such calls, if it can, into the final resulting string"
      },
      {
        "lineNumber": 2662,
        "author": {
          "gitId": "-"
        },
        "content": "      and this exhibit a problem, because the visit_binop method stops being"
      },
      {
        "lineNumber": 2663,
        "author": {
          "gitId": "-"
        },
        "content": "      called (in the optimized AST it will be a Const node)."
      },
      {
        "lineNumber": 2664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2666,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.4.2?"
      },
      {
        "lineNumber": 2667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2669,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2015-03-11"
      },
      {
        "lineNumber": 2670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2671,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t require a docstring for empty modules. Closes issue #261."
      },
      {
        "lineNumber": 2672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2673,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with `too-few-format-args` string warning,"
      },
      {
        "lineNumber": 2674,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted when the string format contained a normal positional"
      },
      {
        "lineNumber": 2675,
        "author": {
          "gitId": "-"
        },
        "content": "      argument (\u0027{0}\u0027), mixed with a positional argument which did"
      },
      {
        "lineNumber": 2676,
        "author": {
          "gitId": "-"
        },
        "content": "      an attribute access (\u0027{0.__class__}\u0027)."
      },
      {
        "lineNumber": 2677,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #463."
      },
      {
        "lineNumber": 2678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2679,
        "author": {
          "gitId": "-"
        },
        "content": "    * Take in account all the methods from the ancestors"
      },
      {
        "lineNumber": 2680,
        "author": {
          "gitId": "-"
        },
        "content": "      when checking for too-few-public-methods. Closes issue #471."
      },
      {
        "lineNumber": 2681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2682,
        "author": {
          "gitId": "-"
        },
        "content": "    * Catch enchant errors and emit \u0027invalid-characters-in-docstring\u0027"
      },
      {
        "lineNumber": 2683,
        "author": {
          "gitId": "-"
        },
        "content": "      when checking for spelling errors. Closes issue #469."
      },
      {
        "lineNumber": 2684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2685,
        "author": {
          "gitId": "-"
        },
        "content": "    * Use all the inferred statements for the super-init-not-called"
      },
      {
        "lineNumber": 2686,
        "author": {
          "gitId": "-"
        },
        "content": "      check. Closes issue #389."
      },
      {
        "lineNumber": 2687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2688,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027unichr-builtin\u0027, emitted by the Python 3"
      },
      {
        "lineNumber": 2689,
        "author": {
          "gitId": "-"
        },
        "content": "      porting checker, when the unichr builtin is found. Closes issue #472."
      },
      {
        "lineNumber": 2690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2691,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027intern-builtin\u0027, emitted by the Python 3"
      },
      {
        "lineNumber": 2692,
        "author": {
          "gitId": "-"
        },
        "content": "      porting checker, when the intern builtin is found. Closes issue #473."
      },
      {
        "lineNumber": 2693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2694,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add support for editable installations."
      },
      {
        "lineNumber": 2695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2696,
        "author": {
          "gitId": "-"
        },
        "content": "    * The HTML output accepts the `--msg-template` option. Patch by"
      },
      {
        "lineNumber": 2697,
        "author": {
          "gitId": "-"
        },
        "content": "      Dan Goldsmith."
      },
      {
        "lineNumber": 2698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2699,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add \u0027map-builtin-not-iterating\u0027 (replacing \u0027implicit-map-evaluation\u0027),"
      },
      {
        "lineNumber": 2700,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027zip-builtin-not-iterating\u0027, \u0027range-builtin-not-iterating\u0027, and"
      },
      {
        "lineNumber": 2701,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027filter-builtin-not-iterating\u0027 which are emitted by `--py3k` when the"
      },
      {
        "lineNumber": 2702,
        "author": {
          "gitId": "-"
        },
        "content": "      appropriate built-in is not used in an iterating context (semantics"
      },
      {
        "lineNumber": 2703,
        "author": {
          "gitId": "-"
        },
        "content": "      taken from 2to3)."
      },
      {
        "lineNumber": 2704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2705,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027unidiomatic-typecheck\u0027, emitted when an explicit"
      },
      {
        "lineNumber": 2706,
        "author": {
          "gitId": "-"
        },
        "content": "      typecheck uses type() instead of isinstance(). For example,"
      },
      {
        "lineNumber": 2707,
        "author": {
          "gitId": "-"
        },
        "content": "      `type(x) \u003d\u003d Y` instead of `isinstance(x, Y)`. Patch by Chris Rebert."
      },
      {
        "lineNumber": 2708,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #299."
      },
      {
        "lineNumber": 2709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2710,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add support for combining the Python 3 checker mode with the --jobs"
      },
      {
        "lineNumber": 2711,
        "author": {
          "gitId": "-"
        },
        "content": "      flag (--py3k and --jobs). Closes issue #467."
      },
      {
        "lineNumber": 2712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2713,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning for the Python 3 porting checker, \u0027using-cmp-argument\u0027,"
      },
      {
        "lineNumber": 2714,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted when the `cmp` argument for the `list.sort` or `sorted builtin`"
      },
      {
        "lineNumber": 2715,
        "author": {
          "gitId": "-"
        },
        "content": "      is encountered."
      },
      {
        "lineNumber": 2716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2717,
        "author": {
          "gitId": "-"
        },
        "content": "    * Make the --py3k flag commutative with the -E flag. Also, this patch"
      },
      {
        "lineNumber": 2718,
        "author": {
          "gitId": "-"
        },
        "content": "      fixes the leaks of error messages from the Python 3 checker when"
      },
      {
        "lineNumber": 2719,
        "author": {
          "gitId": "-"
        },
        "content": "      the errors mode was activated. Closes issue #437."
      },
      {
        "lineNumber": 2720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2722,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.4.1?"
      },
      {
        "lineNumber": 2723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2725,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2015-01-16"
      },
      {
        "lineNumber": 2726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2727,
        "author": {
          "gitId": "-"
        },
        "content": "    * Look only in the current function\u0027s scope for bad-super-call."
      },
      {
        "lineNumber": 2728,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #403."
      },
      {
        "lineNumber": 2729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2730,
        "author": {
          "gitId": "-"
        },
        "content": "    * Check the return of properties when checking for not-callable."
      },
      {
        "lineNumber": 2731,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #406."
      },
      {
        "lineNumber": 2732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2733,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn about using the input() or round() built-ins for Python 3."
      },
      {
        "lineNumber": 2734,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #411."
      },
      {
        "lineNumber": 2735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2736,
        "author": {
          "gitId": "-"
        },
        "content": "    * Proper abstract method lookup while checking for"
      },
      {
        "lineNumber": 2737,
        "author": {
          "gitId": "-"
        },
        "content": "      abstract-class-instantiated. Closes issue #401."
      },
      {
        "lineNumber": 2738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2739,
        "author": {
          "gitId": "-"
        },
        "content": "    * Use a mro traversal for finding abstract methods. Closes issue #415."
      },
      {
        "lineNumber": 2740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2741,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with catching-non-exception and tuples of"
      },
      {
        "lineNumber": 2742,
        "author": {
          "gitId": "-"
        },
        "content": "      exceptions."
      },
      {
        "lineNumber": 2743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2744,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false negative with raising-non-exception, when the raise used"
      },
      {
        "lineNumber": 2745,
        "author": {
          "gitId": "-"
        },
        "content": "      an uninferrable exception context."
      },
      {
        "lineNumber": 2746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2747,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive on Python 2 for raising-bad-type, when"
      },
      {
        "lineNumber": 2748,
        "author": {
          "gitId": "-"
        },
        "content": "      raising tuples in the form \u0027raise (ZeroDivisionError, None)\u0027."
      },
      {
        "lineNumber": 2749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2750,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with invalid-slots-objects, where the slot entry"
      },
      {
        "lineNumber": 2751,
        "author": {
          "gitId": "-"
        },
        "content": "      was a unicode string on Python 2. Closes issue #421."
      },
      {
        "lineNumber": 2752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2753,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027redundant-unittest-assert\u0027, emitted when using"
      },
      {
        "lineNumber": 2754,
        "author": {
          "gitId": "-"
        },
        "content": "      unittest\u0027s methods assertTrue and assertFalse with constant value"
      },
      {
        "lineNumber": 2755,
        "author": {
          "gitId": "-"
        },
        "content": "      as argument. Patch by Vlad Temian."
      },
      {
        "lineNumber": 2756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2757,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new JSON reporter, usable through -f flag."
      },
      {
        "lineNumber": 2758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2759,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add the method names for the \u0027signature-differs\u0027 and \u0027argument-differs\u0027"
      },
      {
        "lineNumber": 2760,
        "author": {
          "gitId": "-"
        },
        "content": "      warnings. Closes issue #433."
      },
      {
        "lineNumber": 2761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2762,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t compile test files when installing."
      },
      {
        "lineNumber": 2763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2764,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a crash which occurred when using multiple jobs and the files"
      },
      {
        "lineNumber": 2765,
        "author": {
          "gitId": "-"
        },
        "content": "      given as argument didn\u0027t exist at all."
      },
      {
        "lineNumber": 2766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2768,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.4.0?"
      },
      {
        "lineNumber": 2769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2771,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2014-11-23"
      },
      {
        "lineNumber": 2772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2774,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new options for controlling the loading of C extensions."
      },
      {
        "lineNumber": 2775,
        "author": {
          "gitId": "-"
        },
        "content": "      By default, only C extensions from the stdlib will be loaded"
      },
      {
        "lineNumber": 2776,
        "author": {
          "gitId": "-"
        },
        "content": "      into the active Python interpreter for inspection, because they"
      },
      {
        "lineNumber": 2777,
        "author": {
          "gitId": "-"
        },
        "content": "      can run arbitrary code on import. The option"
      },
      {
        "lineNumber": 2778,
        "author": {
          "gitId": "-"
        },
        "content": "      `--extension-pkg-whitelist` can be used to specify modules"
      },
      {
        "lineNumber": 2779,
        "author": {
          "gitId": "-"
        },
        "content": "      or packages that are safe to load."
      },
      {
        "lineNumber": 2780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2781,
        "author": {
          "gitId": "-"
        },
        "content": "    * Change default max-line-length to 100 rather than 80"
      },
      {
        "lineNumber": 2782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2783,
        "author": {
          "gitId": "-"
        },
        "content": "    * Drop BaseRawChecker class which were only there for backward"
      },
      {
        "lineNumber": 2784,
        "author": {
          "gitId": "-"
        },
        "content": "      compat for a while now"
      },
      {
        "lineNumber": 2785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2786,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t try to analyze string formatting with objects coming from"
      },
      {
        "lineNumber": 2787,
        "author": {
          "gitId": "-"
        },
        "content": "      function arguments. Closes issue #373."
      },
      {
        "lineNumber": 2788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2789,
        "author": {
          "gitId": "-"
        },
        "content": "    * Port source code to be Python 2/3 compatible. This drops the"
      },
      {
        "lineNumber": 2790,
        "author": {
          "gitId": "-"
        },
        "content": "      need for 2to3, but does drop support for Python 2.5."
      },
      {
        "lineNumber": 2791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2792,
        "author": {
          "gitId": "-"
        },
        "content": "    * Each message now comes with a confidence level attached, and"
      },
      {
        "lineNumber": 2793,
        "author": {
          "gitId": "-"
        },
        "content": "      can be filtered base on this level. This allows to filter out"
      },
      {
        "lineNumber": 2794,
        "author": {
          "gitId": "-"
        },
        "content": "      all messages that were emitted even though an inference failure"
      },
      {
        "lineNumber": 2795,
        "author": {
          "gitId": "-"
        },
        "content": "      happened during checking."
      },
      {
        "lineNumber": 2796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2797,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improved presenting unused-import message. Closes issue #293."
      },
      {
        "lineNumber": 2798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2799,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new checker for finding spelling errors. New messages:"
      },
      {
        "lineNumber": 2800,
        "author": {
          "gitId": "-"
        },
        "content": "      wrong-spelling-in-comment, wrong-spelling-in-docstring."
      },
      {
        "lineNumber": 2801,
        "author": {
          "gitId": "-"
        },
        "content": "      New options: spelling-dict, spelling-ignore-words."
      },
      {
        "lineNumber": 2802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2803,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new \u0027-j\u0027 option for running checks in sub-processes."
      },
      {
        "lineNumber": 2804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2805,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added new checks for line endings if they are mixed (LF vs CRLF)"
      },
      {
        "lineNumber": 2806,
        "author": {
          "gitId": "-"
        },
        "content": "      or if they are not as expected. New messages: mixed-line-endings,"
      },
      {
        "lineNumber": 2807,
        "author": {
          "gitId": "-"
        },
        "content": "      unexpected-line-ending-format. New option: expected-line-ending-format."
      },
      {
        "lineNumber": 2808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2809,
        "author": {
          "gitId": "-"
        },
        "content": "    * \u0027dangerous-default-value\u0027 no longer evaluates the value of the arguments,"
      },
      {
        "lineNumber": 2810,
        "author": {
          "gitId": "-"
        },
        "content": "      which could result in long error messages or sensitive data being leaked."
      },
      {
        "lineNumber": 2811,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #282"
      },
      {
        "lineNumber": 2812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2813,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with string formatting checker, when"
      },
      {
        "lineNumber": 2814,
        "author": {
          "gitId": "-"
        },
        "content": "      encountering a string which uses only position-based arguments."
      },
      {
        "lineNumber": 2815,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #285."
      },
      {
        "lineNumber": 2816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2817,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with string formatting checker, when using"
      },
      {
        "lineNumber": 2818,
        "author": {
          "gitId": "-"
        },
        "content": "      keyword argument packing. Closes issue #288."
      },
      {
        "lineNumber": 2819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2820,
        "author": {
          "gitId": "-"
        },
        "content": "    * Proper handle class level scope for lambdas."
      },
      {
        "lineNumber": 2821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2822,
        "author": {
          "gitId": "-"
        },
        "content": "    * Handle \u0027too-few-format-args\u0027 or \u0027too-many-format-args\u0027 for format"
      },
      {
        "lineNumber": 2823,
        "author": {
          "gitId": "-"
        },
        "content": "      strings with both named and positional fields. Closes issue #286."
      },
      {
        "lineNumber": 2824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2825,
        "author": {
          "gitId": "-"
        },
        "content": "    * Analyze only strings by the string format checker. Closes issue #287."
      },
      {
        "lineNumber": 2826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2827,
        "author": {
          "gitId": "-"
        },
        "content": "    * Properly handle nested format string fields. Closes issue #294."
      },
      {
        "lineNumber": 2828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2829,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027attribute-defined-outside-init\u0027 if the attribute"
      },
      {
        "lineNumber": 2830,
        "author": {
          "gitId": "-"
        },
        "content": "      was set by a function call in a defining method. Closes issue #192."
      },
      {
        "lineNumber": 2831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2832,
        "author": {
          "gitId": "-"
        },
        "content": "    * Properly handle unicode format strings for Python 2."
      },
      {
        "lineNumber": 2833,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #296."
      },
      {
        "lineNumber": 2834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2835,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027import-error\u0027 if an import was protected by a try-except,"
      },
      {
        "lineNumber": 2836,
        "author": {
          "gitId": "-"
        },
        "content": "      which excepted ImportError."
      },
      {
        "lineNumber": 2837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2838,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix an \u0027unused-import\u0027 false positive, when the error was emitted"
      },
      {
        "lineNumber": 2839,
        "author": {
          "gitId": "-"
        },
        "content": "      for all the members imported with \u0027from import\u0027 form."
      },
      {
        "lineNumber": 2840,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #304."
      },
      {
        "lineNumber": 2841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2842,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027invalid-name\u0027 when assigning a name in an"
      },
      {
        "lineNumber": 2843,
        "author": {
          "gitId": "-"
        },
        "content": "      ImportError handler. Closes issue #302."
      },
      {
        "lineNumber": 2844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2845,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t count branches from nested functions."
      },
      {
        "lineNumber": 2846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2847,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with \u0027too-few-format-args\u0027, when the format"
      },
      {
        "lineNumber": 2848,
        "author": {
          "gitId": "-"
        },
        "content": "      strings contains duplicate manual position arguments."
      },
      {
        "lineNumber": 2849,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #310."
      },
      {
        "lineNumber": 2850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2851,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixme regex handles comments without spaces after the hash."
      },
      {
        "lineNumber": 2852,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #311."
      },
      {
        "lineNumber": 2853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2854,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027unused-import\u0027 when a special object is imported"
      },
      {
        "lineNumber": 2855,
        "author": {
          "gitId": "-"
        },
        "content": "      (__all__, __doc__ etc.). Closes issue #309."
      },
      {
        "lineNumber": 2856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2857,
        "author": {
          "gitId": "-"
        },
        "content": "    * Look in the metaclass, if defined, for members not found in the current"
      },
      {
        "lineNumber": 2858,
        "author": {
          "gitId": "-"
        },
        "content": "      class. Closes issue #306."
      },
      {
        "lineNumber": 2859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2860,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027protected-access\u0027 if the attribute is accessed using"
      },
      {
        "lineNumber": 2861,
        "author": {
          "gitId": "-"
        },
        "content": "      a property defined at the class level."
      },
      {
        "lineNumber": 2862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2863,
        "author": {
          "gitId": "-"
        },
        "content": "    * Detect calls of the parent\u0027s __init__, through a binded super() call."
      },
      {
        "lineNumber": 2864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2865,
        "author": {
          "gitId": "-"
        },
        "content": "    * Check that a class has an explicitly defined metaclass before"
      },
      {
        "lineNumber": 2866,
        "author": {
          "gitId": "-"
        },
        "content": "      emitting \u0027old-style-class\u0027 for Python 2."
      },
      {
        "lineNumber": 2867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2868,
        "author": {
          "gitId": "-"
        },
        "content": "    * Emit \u0027catching-non-exception\u0027 for non-class nodes. Closes issue #303."
      },
      {
        "lineNumber": 2869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2870,
        "author": {
          "gitId": "-"
        },
        "content": "    * Order of reporting is consistent."
      },
      {
        "lineNumber": 2871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2872,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027boolean-datetime\u0027, emitted when an instance"
      },
      {
        "lineNumber": 2873,
        "author": {
          "gitId": "-"
        },
        "content": "      of \u0027datetime.time\u0027 is used in a boolean context. Closes issue #239."
      },
      {
        "lineNumber": 2874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2875,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a crash which occurred while checking for \u0027method-hidden\u0027,"
      },
      {
        "lineNumber": 2876,
        "author": {
          "gitId": "-"
        },
        "content": "      when the parent frame was something different than a function."
      },
      {
        "lineNumber": 2877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2878,
        "author": {
          "gitId": "-"
        },
        "content": "    * Generate html output for missing files. Closes issue #320."
      },
      {
        "lineNumber": 2879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2880,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with \u0027too-many-format-args\u0027, when the format"
      },
      {
        "lineNumber": 2881,
        "author": {
          "gitId": "-"
        },
        "content": "      string contains mixed attribute access arguments and manual"
      },
      {
        "lineNumber": 2882,
        "author": {
          "gitId": "-"
        },
        "content": "      fields. Closes issue #322."
      },
      {
        "lineNumber": 2883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2884,
        "author": {
          "gitId": "-"
        },
        "content": "    * Extend the cases where \u0027undefined-variable\u0027 and \u0027used-before-assignment\u0027"
      },
      {
        "lineNumber": 2885,
        "author": {
          "gitId": "-"
        },
        "content": "      can be detected. Closes issue #291."
      },
      {
        "lineNumber": 2886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2887,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add support for customising callback identifiers, by adding a new"
      },
      {
        "lineNumber": 2888,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027--callbacks\u0027 command line option. Closes issue #326."
      },
      {
        "lineNumber": 2889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2890,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027logging-format-interpolation\u0027, emitted when .format()"
      },
      {
        "lineNumber": 2891,
        "author": {
          "gitId": "-"
        },
        "content": "      string interpolation is used within logging function calls."
      },
      {
        "lineNumber": 2892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2893,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027unbalanced-tuple-unpacking\u0027 when the rhs of the assignment"
      },
      {
        "lineNumber": 2894,
        "author": {
          "gitId": "-"
        },
        "content": "      is a variable length argument. Closes issue #329."
      },
      {
        "lineNumber": 2895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2896,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning, \u0027inherit-non-class\u0027, emitted when a class inherits"
      },
      {
        "lineNumber": 2897,
        "author": {
          "gitId": "-"
        },
        "content": "      from something which is not a class. Closes issue #331."
      },
      {
        "lineNumber": 2898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2899,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix another false positives with \u0027undefined-variable\u0027, where the variable"
      },
      {
        "lineNumber": 2900,
        "author": {
          "gitId": "-"
        },
        "content": "      can be found as a class assignment and used in a function annotation."
      },
      {
        "lineNumber": 2901,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #342."
      },
      {
        "lineNumber": 2902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2903,
        "author": {
          "gitId": "-"
        },
        "content": "    * Handle assignment of the string format method to a variable."
      },
      {
        "lineNumber": 2904,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #351."
      },
      {
        "lineNumber": 2905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2906,
        "author": {
          "gitId": "-"
        },
        "content": "    * Support wheel packaging format for PyPi. Closes issue #334."
      },
      {
        "lineNumber": 2907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2908,
        "author": {
          "gitId": "-"
        },
        "content": "    * Check that various built-ins that do not exist in Python 3 are not"
      },
      {
        "lineNumber": 2909,
        "author": {
          "gitId": "-"
        },
        "content": "      used: apply, basestring, buffer, cmp, coerce, execfile, file, long"
      },
      {
        "lineNumber": 2910,
        "author": {
          "gitId": "-"
        },
        "content": "      raw_input, reduce, StandardError, unicode, reload and xrange."
      },
      {
        "lineNumber": 2911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2912,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn for magic methods which are not used in any way in Python 3:"
      },
      {
        "lineNumber": 2913,
        "author": {
          "gitId": "-"
        },
        "content": "      __coerce__, __delslice__, __getslice__, __setslice__, __cmp__,"
      },
      {
        "lineNumber": 2914,
        "author": {
          "gitId": "-"
        },
        "content": "      __oct__, __nonzero__ and __hex__."
      },
      {
        "lineNumber": 2915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2916,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027assigning-non-slot\u0027 when the assignment is for a property."
      },
      {
        "lineNumber": 2917,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #359."
      },
      {
        "lineNumber": 2918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2919,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix for regression: \u0027{path}\u0027 was no longer accepted in \u0027--msg-template\u0027."
      },
      {
        "lineNumber": 2920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2921,
        "author": {
          "gitId": "-"
        },
        "content": "    * Report the percentage of all messages, not just for errors and warnings."
      },
      {
        "lineNumber": 2922,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #319."
      },
      {
        "lineNumber": 2923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2924,
        "author": {
          "gitId": "-"
        },
        "content": "    * \u0027too-many-public-methods\u0027 is reported only for methods defined in a class,"
      },
      {
        "lineNumber": 2925,
        "author": {
          "gitId": "-"
        },
        "content": "      not in its ancestors. Closes issue #248."
      },
      {
        "lineNumber": 2926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2927,
        "author": {
          "gitId": "-"
        },
        "content": "    * \u0027too-many-lines\u0027 disable pragma can be located on any line, not only the"
      },
      {
        "lineNumber": 2928,
        "author": {
          "gitId": "-"
        },
        "content": "      first. Closes issue #321."
      },
      {
        "lineNumber": 2929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2930,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn in Python 2 when an import statement is found without a"
      },
      {
        "lineNumber": 2931,
        "author": {
          "gitId": "-"
        },
        "content": "      corresponding `from __future__ import absolute_import`."
      },
      {
        "lineNumber": 2932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2933,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn in Python 2 when a non-floor division operation is found without"
      },
      {
        "lineNumber": 2934,
        "author": {
          "gitId": "-"
        },
        "content": "      a corresponding `from __future__ import division`."
      },
      {
        "lineNumber": 2935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2936,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new option, \u0027exclude-protected\u0027, for excluding members"
      },
      {
        "lineNumber": 2937,
        "author": {
          "gitId": "-"
        },
        "content": "      from the protected-access warning. Closes issue #48."
      },
      {
        "lineNumber": 2938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2939,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn in Python 2 when using dict.iter*(), dict.view*(); none of these"
      },
      {
        "lineNumber": 2940,
        "author": {
          "gitId": "-"
        },
        "content": "      methods are available in Python 3."
      },
      {
        "lineNumber": 2941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2942,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn in Python 2 when calling an object\u0027s next() method; Python 3 uses"
      },
      {
        "lineNumber": 2943,
        "author": {
          "gitId": "-"
        },
        "content": "      __next__() instead."
      },
      {
        "lineNumber": 2944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2945,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn when assigning to __metaclass__ at a class scope; in Python 3 a"
      },
      {
        "lineNumber": 2946,
        "author": {
          "gitId": "-"
        },
        "content": "      metaclass is specified as an argument to the \u0027class\u0027 statement."
      },
      {
        "lineNumber": 2947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2948,
        "author": {
          "gitId": "-"
        },
        "content": "    * Warn when performing parameter tuple unpacking; it is not supported in"
      },
      {
        "lineNumber": 2949,
        "author": {
          "gitId": "-"
        },
        "content": "      Python 3."
      },
      {
        "lineNumber": 2950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2951,
        "author": {
          "gitId": "-"
        },
        "content": "    * \u0027abstract-class-instantiated\u0027 is also emitted for Python 2."
      },
      {
        "lineNumber": 2952,
        "author": {
          "gitId": "-"
        },
        "content": "      It was previously disabled."
      },
      {
        "lineNumber": 2953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2954,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add \u0027long-suffix\u0027 error, emitted when encountering the long suffix"
      },
      {
        "lineNumber": 2955,
        "author": {
          "gitId": "-"
        },
        "content": "      on numbers."
      },
      {
        "lineNumber": 2956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2957,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add support for disabling a checker, by specifying an \u0027enabled\u0027"
      },
      {
        "lineNumber": 2958,
        "author": {
          "gitId": "-"
        },
        "content": "      attribute on the checker class."
      },
      {
        "lineNumber": 2959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2960,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new CLI option, --py3k, for enabling Python 3 porting mode. This"
      },
      {
        "lineNumber": 2961,
        "author": {
          "gitId": "-"
        },
        "content": "      mode will disable all other checkers and will emit warnings and"
      },
      {
        "lineNumber": 2962,
        "author": {
          "gitId": "-"
        },
        "content": "      errors for constructs which are invalid or removed in Python 3."
      },
      {
        "lineNumber": 2963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2964,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add \u0027old-octal-literal\u0027 to Python 3 porting checker, emitted when"
      },
      {
        "lineNumber": 2965,
        "author": {
          "gitId": "-"
        },
        "content": "      encountering octals with the old syntax."
      },
      {
        "lineNumber": 2966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2967,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add \u0027implicit-map-evaluation\u0027 to Python 3 porting checker, emitted"
      },
      {
        "lineNumber": 2968,
        "author": {
          "gitId": "-"
        },
        "content": "      when encountering the use of map builtin, without explicit evaluation."
      },
      {
        "lineNumber": 2969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2972,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.3.0?"
      },
      {
        "lineNumber": 2973,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2975,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2014-07-26"
      },
      {
        "lineNumber": 2976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2977,
        "author": {
          "gitId": "-"
        },
        "content": "    * Allow hanging continued indentation for implicitly concatenated"
      },
      {
        "lineNumber": 2978,
        "author": {
          "gitId": "-"
        },
        "content": "      strings. Closes issue #232."
      },
      {
        "lineNumber": 2979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2980,
        "author": {
          "gitId": "-"
        },
        "content": "    * Pylint works under Python 2.5 again, and its test suite passes."
      },
      {
        "lineNumber": 2981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2982,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix some false positives for the cellvar-from-loop warnings."
      },
      {
        "lineNumber": 2983,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #233."
      },
      {
        "lineNumber": 2984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2985,
        "author": {
          "gitId": "-"
        },
        "content": "    * Return new astroid class nodes when the inferencer can detect that"
      },
      {
        "lineNumber": 2986,
        "author": {
          "gitId": "-"
        },
        "content": "      that result of a function invocation on a type (like `type` or"
      },
      {
        "lineNumber": 2987,
        "author": {
          "gitId": "-"
        },
        "content": "      `abc.ABCMeta`) is requested. Closes #205."
      },
      {
        "lineNumber": 2988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2989,
        "author": {
          "gitId": "-"
        },
        "content": "    * Emit \u0027undefined-variable\u0027 for undefined names when using the"
      },
      {
        "lineNumber": 2990,
        "author": {
          "gitId": "-"
        },
        "content": "      Python 3 `metaclass\u003d` argument."
      },
      {
        "lineNumber": 2991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2992,
        "author": {
          "gitId": "-"
        },
        "content": "    * Checkers respect priority now. Close issue #229."
      },
      {
        "lineNumber": 2993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2994,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive regarding W0511. Closes issue #149."
      },
      {
        "lineNumber": 2995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2996,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix unused-import false positive with Python 3 metaclasses (#143)."
      },
      {
        "lineNumber": 2997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2998,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t warn with \u0027bad-format-character\u0027 when encountering"
      },
      {
        "lineNumber": 2999,
        "author": {
          "gitId": "-"
        },
        "content": "      the \u0027a\u0027 format on Python 3."
      },
      {
        "lineNumber": 3000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3001,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add multiple checks for PEP 3101 advanced string formatting:"
      },
      {
        "lineNumber": 3002,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027bad-format-string\u0027, \u0027missing-format-argument-key\u0027,"
      },
      {
        "lineNumber": 3003,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027unused-format-string-argument\u0027, \u0027format-combined-specification\u0027,"
      },
      {
        "lineNumber": 3004,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027missing-format-attribute\u0027 and \u0027invalid-format-index\u0027."
      },
      {
        "lineNumber": 3005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3006,
        "author": {
          "gitId": "-"
        },
        "content": "    * Issue broad-except and bare-except even if the number"
      },
      {
        "lineNumber": 3007,
        "author": {
          "gitId": "-"
        },
        "content": "      of except handlers is different than 1. Fixes issue #113."
      },
      {
        "lineNumber": 3008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3009,
        "author": {
          "gitId": "-"
        },
        "content": "    * Issue attribute-defined-outside-init for all cases, not just"
      },
      {
        "lineNumber": 3010,
        "author": {
          "gitId": "-"
        },
        "content": "      for the last assignment. Closes issue #262."
      },
      {
        "lineNumber": 3011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3012,
        "author": {
          "gitId": "-"
        },
        "content": "    * Emit \u0027not-callable\u0027 when calling properties. Closes issue #268."
      },
      {
        "lineNumber": 3013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3014,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a false positive with unbalanced iterable unpacking,"
      },
      {
        "lineNumber": 3015,
        "author": {
          "gitId": "-"
        },
        "content": "      when encountering starred nodes. Closes issue #273."
      },
      {
        "lineNumber": 3016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3017,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new checks, \u0027invalid-slice-index\u0027 and \u0027invalid-sequence-index\u0027"
      },
      {
        "lineNumber": 3018,
        "author": {
          "gitId": "-"
        },
        "content": "      for invalid sequence and slice indices."
      },
      {
        "lineNumber": 3019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3020,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add \u0027assigning-non-slot\u0027 warning, which detects assignments to"
      },
      {
        "lineNumber": 3021,
        "author": {
          "gitId": "-"
        },
        "content": "      attributes not defined in slots."
      },
      {
        "lineNumber": 3022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3023,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027no-name-in-module\u0027 for ignored modules."
      },
      {
        "lineNumber": 3024,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #223."
      },
      {
        "lineNumber": 3025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3026,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix an \u0027unused-variable\u0027 false positive, where the variable is"
      },
      {
        "lineNumber": 3027,
        "author": {
          "gitId": "-"
        },
        "content": "      assigned through an import. Closes issue #196."
      },
      {
        "lineNumber": 3028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3029,
        "author": {
          "gitId": "-"
        },
        "content": "    * Definition order is considered for classes, function arguments"
      },
      {
        "lineNumber": 3030,
        "author": {
          "gitId": "-"
        },
        "content": "      and annotations. Closes issue #257."
      },
      {
        "lineNumber": 3031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3032,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027unused-variable\u0027 when assigning to a nonlocal."
      },
      {
        "lineNumber": 3033,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #275."
      },
      {
        "lineNumber": 3034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3035,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not let ImportError propagate from the import checker, leading to crash"
      },
      {
        "lineNumber": 3036,
        "author": {
          "gitId": "-"
        },
        "content": "      in some namespace package related cases. Closes issue #203."
      },
      {
        "lineNumber": 3037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3038,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027pointless-string-statement\u0027 for attribute docstrings."
      },
      {
        "lineNumber": 3039,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #193."
      },
      {
        "lineNumber": 3040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3041,
        "author": {
          "gitId": "-"
        },
        "content": "    * Use the proper mode for pickle when opening and writing the stats file."
      },
      {
        "lineNumber": 3042,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #148."
      },
      {
        "lineNumber": 3043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3044,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit hidden-method message when the attribute has been"
      },
      {
        "lineNumber": 3045,
        "author": {
          "gitId": "-"
        },
        "content": "      monkey-patched, you\u0027re on your own when you do that."
      },
      {
        "lineNumber": 3046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3047,
        "author": {
          "gitId": "-"
        },
        "content": "    * Only emit attribute-defined-outside-init for definition within the same"
      },
      {
        "lineNumber": 3048,
        "author": {
          "gitId": "-"
        },
        "content": "      module as the offended class, avoiding to mangle the output in some cases."
      },
      {
        "lineNumber": 3049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3050,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027unnecessary-lambda\u0027 if the body of the lambda call contains"
      },
      {
        "lineNumber": 3051,
        "author": {
          "gitId": "-"
        },
        "content": "      call chaining. Closes issue #243."
      },
      {
        "lineNumber": 3052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3053,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t emit \u0027missing-docstring\u0027 when the actual docstring uses `.format`."
      },
      {
        "lineNumber": 3054,
        "author": {
          "gitId": "-"
        },
        "content": "      Closes issue #281."
      },
      {
        "lineNumber": 3055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3057,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.2.1?"
      },
      {
        "lineNumber": 3058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3060,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2014-04-30"
      },
      {
        "lineNumber": 3061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3062,
        "author": {
          "gitId": "-"
        },
        "content": "    * Restore the ability to specify the init-hook option via the"
      },
      {
        "lineNumber": 3063,
        "author": {
          "gitId": "-"
        },
        "content": "      configuration file, which was accidentally broken in 1.2.0."
      },
      {
        "lineNumber": 3064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3065,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning [bad-continuation] for badly indentend continued"
      },
      {
        "lineNumber": 3066,
        "author": {
          "gitId": "-"
        },
        "content": "      lines."
      },
      {
        "lineNumber": 3067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3068,
        "author": {
          "gitId": "-"
        },
        "content": "    * Emit [assignment-from-none] when the function contains bare returns."
      },
      {
        "lineNumber": 3069,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes BitBucket issue #191."
      },
      {
        "lineNumber": 3070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3071,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning for closing over variables that are"
      },
      {
        "lineNumber": 3072,
        "author": {
          "gitId": "-"
        },
        "content": "      defined in loops. Fixes Bitbucket issue #176."
      },
      {
        "lineNumber": 3073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3074,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not warn about \\u escapes in string literals when Unicode literals"
      },
      {
        "lineNumber": 3075,
        "author": {
          "gitId": "-"
        },
        "content": "      are used for Python 2.*. Fixes BitBucket issue #151."
      },
      {
        "lineNumber": 3076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3077,
        "author": {
          "gitId": "-"
        },
        "content": "    * Extend the checking for unbalanced-tuple-unpacking and"
      },
      {
        "lineNumber": 3078,
        "author": {
          "gitId": "-"
        },
        "content": "      unpacking-non-sequence to instance attribute unpacking as well."
      },
      {
        "lineNumber": 3079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3080,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix explicit checking of python script (1.2 regression, #219)"
      },
      {
        "lineNumber": 3081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3082,
        "author": {
          "gitId": "-"
        },
        "content": "    * Restore --init-hook, renamed accidentally into --init-hooks in 1.2.0"
      },
      {
        "lineNumber": 3083,
        "author": {
          "gitId": "-"
        },
        "content": "      (#211)"
      },
      {
        "lineNumber": 3084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3085,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add \u0027indexing-exception\u0027 warning, which detects that indexing"
      },
      {
        "lineNumber": 3086,
        "author": {
          "gitId": "-"
        },
        "content": "      an exception occurs in Python 2 (behaviour removed in Python 3)."
      },
      {
        "lineNumber": 3087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3089,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.2.0?"
      },
      {
        "lineNumber": 3090,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3092,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2014-04-18"
      },
      {
        "lineNumber": 3093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3094,
        "author": {
          "gitId": "-"
        },
        "content": "    * Pass the current python paths to pylint process when invoked via"
      },
      {
        "lineNumber": 3095,
        "author": {
          "gitId": "-"
        },
        "content": "      epylint.  Fixes BitBucket issue #133."
      },
      {
        "lineNumber": 3096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3097,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add -i / --include-ids and -s / --symbols back as completely ignored"
      },
      {
        "lineNumber": 3098,
        "author": {
          "gitId": "-"
        },
        "content": "      options. Fixes BitBucket issue #180."
      },
      {
        "lineNumber": 3099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3100,
        "author": {
          "gitId": "-"
        },
        "content": "    * Extend the number of cases in which logging calls are detected. Fixes"
      },
      {
        "lineNumber": 3101,
        "author": {
          "gitId": "-"
        },
        "content": "      bitbucket issue #182."
      },
      {
        "lineNumber": 3102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3103,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improve pragma handling to not detect pylint:* strings in non-comments."
      },
      {
        "lineNumber": 3104,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes BitBucket issue #79."
      },
      {
        "lineNumber": 3105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3106,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not crash with UnknownMessage if an unknown message ID/name appears"
      },
      {
        "lineNumber": 3107,
        "author": {
          "gitId": "-"
        },
        "content": "      in disable or enable in the configuration. Patch by Cole Robinson."
      },
      {
        "lineNumber": 3108,
        "author": {
          "gitId": "-"
        },
        "content": "      Fixes bitbucket issue #170."
      },
      {
        "lineNumber": 3109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3110,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new warning \u0027eval-used\u0027, checking that the builtin function `eval`"
      },
      {
        "lineNumber": 3111,
        "author": {
          "gitId": "-"
        },
        "content": "      was used."
      },
      {
        "lineNumber": 3112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3113,
        "author": {
          "gitId": "-"
        },
        "content": "    * Make it possible to show a naming hint for invalid name by setting"
      },
      {
        "lineNumber": 3114,
        "author": {
          "gitId": "-"
        },
        "content": "      include-naming-hint. Also make the naming hints configurable. Fixes"
      },
      {
        "lineNumber": 3115,
        "author": {
          "gitId": "-"
        },
        "content": "      BitBucket issue #138."
      },
      {
        "lineNumber": 3116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3117,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added support for enforcing multiple, but consistent name styles for"
      },
      {
        "lineNumber": 3118,
        "author": {
          "gitId": "-"
        },
        "content": "      different name types inside a single module; based on a patch written"
      },
      {
        "lineNumber": 3119,
        "author": {
          "gitId": "-"
        },
        "content": "      by morbo@google.com."
      },
      {
        "lineNumber": 3120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3121,
        "author": {
          "gitId": "-"
        },
        "content": "    * Also warn about empty docstrings on overridden methods; contributed"
      },
      {
        "lineNumber": 3122,
        "author": {
          "gitId": "-"
        },
        "content": "      by sebastianu@google.com."
      },
      {
        "lineNumber": 3123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3124,
        "author": {
          "gitId": "-"
        },
        "content": "    * Also inspect arguments to constructor calls, and emit relevant"
      },
      {
        "lineNumber": 3125,
        "author": {
          "gitId": "-"
        },
        "content": "      warnings; contributed by sebastianu@google.com."
      },
      {
        "lineNumber": 3126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3127,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new configuration option logging-modules to make the list"
      },
      {
        "lineNumber": 3128,
        "author": {
          "gitId": "-"
        },
        "content": "      of module names that can be checked for \u0027logging-not-lazy\u0027 et. al."
      },
      {
        "lineNumber": 3129,
        "author": {
          "gitId": "-"
        },
        "content": "      configurable; contributed by morbo@google.com."
      },
      {
        "lineNumber": 3130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3131,
        "author": {
          "gitId": "-"
        },
        "content": "    * ensure init-hooks is evaluated before other options, notably load-plugins"
      },
      {
        "lineNumber": 3132,
        "author": {
          "gitId": "-"
        },
        "content": "      (#166)"
      },
      {
        "lineNumber": 3133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3134,
        "author": {
          "gitId": "-"
        },
        "content": "    * Python 2.5 support restored: fixed small issues preventing pylint to run"
      },
      {
        "lineNumber": 3135,
        "author": {
          "gitId": "-"
        },
        "content": "      on python 2.5. Bitbucket issues #50 and #62."
      },
      {
        "lineNumber": 3136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3137,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #128: pylint doesn\u0027t crash when looking"
      },
      {
        "lineNumber": 3138,
        "author": {
          "gitId": "-"
        },
        "content": "      for used-before-assignment in context manager"
      },
      {
        "lineNumber": 3139,
        "author": {
          "gitId": "-"
        },
        "content": "      assignments."
      },
      {
        "lineNumber": 3140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3141,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new warning, \u0027bad-reversed-sequence\u0027, for checking that the"
      },
      {
        "lineNumber": 3142,
        "author": {
          "gitId": "-"
        },
        "content": "      reversed() builtin receive a sequence (implements __getitem__ and __len__,"
      },
      {
        "lineNumber": 3143,
        "author": {
          "gitId": "-"
        },
        "content": "      without being a dict or a dict subclass) or an instance which implements"
      },
      {
        "lineNumber": 3144,
        "author": {
          "gitId": "-"
        },
        "content": "      __reversed__."
      },
      {
        "lineNumber": 3145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3146,
        "author": {
          "gitId": "-"
        },
        "content": "    * Mark `file` as a bad function when using python2 (closes #8)."
      },
      {
        "lineNumber": 3147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3148,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new warning \u0027bad-exception-context\u0027, checking"
      },
      {
        "lineNumber": 3149,
        "author": {
          "gitId": "-"
        },
        "content": "      that `raise ... from ...` uses a proper exception context"
      },
      {
        "lineNumber": 3150,
        "author": {
          "gitId": "-"
        },
        "content": "      (None or an exception)."
      },
      {
        "lineNumber": 3151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3152,
        "author": {
          "gitId": "-"
        },
        "content": "    * Enhance the check for \u0027used-before-assignment\u0027 to look"
      },
      {
        "lineNumber": 3153,
        "author": {
          "gitId": "-"
        },
        "content": "      for \u0027nonlocal\u0027 uses."
      },
      {
        "lineNumber": 3154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3155,
        "author": {
          "gitId": "-"
        },
        "content": "    * Emit \u0027undefined-all-variable\u0027 if a package\u0027s __all__"
      },
      {
        "lineNumber": 3156,
        "author": {
          "gitId": "-"
        },
        "content": "      variable contains a missing submodule (closes #126)."
      },
      {
        "lineNumber": 3157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3158,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning \u0027abstract-class-instantiated\u0027 for checking"
      },
      {
        "lineNumber": 3159,
        "author": {
          "gitId": "-"
        },
        "content": "      that abstract classes created with `abc` module and"
      },
      {
        "lineNumber": 3160,
        "author": {
          "gitId": "-"
        },
        "content": "      with abstract methods are instantied."
      },
      {
        "lineNumber": 3161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3162,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not warn about \u0027return-arg-in-generator\u0027 in Python 3.3+."
      },
      {
        "lineNumber": 3163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3164,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not warn about \u0027abstract-method\u0027 when the abstract method"
      },
      {
        "lineNumber": 3165,
        "author": {
          "gitId": "-"
        },
        "content": "      is implemented through assignment (#155)."
      },
      {
        "lineNumber": 3166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3167,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improve cyclic import detection in the case of packages, patch by Buck"
      },
      {
        "lineNumber": 3168,
        "author": {
          "gitId": "-"
        },
        "content": "      Golemon"
      },
      {
        "lineNumber": 3169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3170,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new warnings for checking proper class __slots__:"
      },
      {
        "lineNumber": 3171,
        "author": {
          "gitId": "-"
        },
        "content": "      `invalid-slots-object` and `invalid-slots`."
      },
      {
        "lineNumber": 3172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3173,
        "author": {
          "gitId": "-"
        },
        "content": "    * Search for rc file in `~/.config/pylintrc` if `~/.pylintrc`"
      },
      {
        "lineNumber": 3174,
        "author": {
          "gitId": "-"
        },
        "content": "      doesn\u0027t exists (#121)"
      },
      {
        "lineNumber": 3175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3176,
        "author": {
          "gitId": "-"
        },
        "content": "    * Don\u0027t register the newstyle checker w/ python \u003e\u003d 3"
      },
      {
        "lineNumber": 3177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3178,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix unused-import false positive w/ augment assignment (#78)"
      },
      {
        "lineNumber": 3179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3180,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix access-member-before-definition false negative wrt aug assign (#164)"
      },
      {
        "lineNumber": 3181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3182,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not attempt to analyze non python file, eg .so file (#122)"
      },
      {
        "lineNumber": 3183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3185,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.1.0?"
      },
      {
        "lineNumber": 3186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3188,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2013-12-22"
      },
      {
        "lineNumber": 3189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3190,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new check for use of deprecated pragma directives \"pylint:disable-msg\""
      },
      {
        "lineNumber": 3191,
        "author": {
          "gitId": "-"
        },
        "content": "      or \"pylint:enable-msg\" (I0022, deprecated-pragma) which was previously"
      },
      {
        "lineNumber": 3192,
        "author": {
          "gitId": "-"
        },
        "content": "      emitted as a regular warn()."
      },
      {
        "lineNumber": 3193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3194,
        "author": {
          "gitId": "-"
        },
        "content": "    * Avoid false used-before-assignment for except handler defined"
      },
      {
        "lineNumber": 3195,
        "author": {
          "gitId": "-"
        },
        "content": "      identifier used on the same line (#111)."
      },
      {
        "lineNumber": 3196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3197,
        "author": {
          "gitId": "-"
        },
        "content": "    * Combine \u0027no-space-after-operator\u0027, \u0027no-space-after-comma\u0027 and"
      },
      {
        "lineNumber": 3198,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027no-space-before-operator\u0027 into a new warning \u0027bad-whitespace\u0027."
      },
      {
        "lineNumber": 3199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3200,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new warning \u0027superfluous-parens\u0027 for unnecessary"
      },
      {
        "lineNumber": 3201,
        "author": {
          "gitId": "-"
        },
        "content": "      parentheses after certain keywords."
      },
      {
        "lineNumber": 3202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3203,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix a potential crash in the redefine-in-handler warning"
      },
      {
        "lineNumber": 3204,
        "author": {
          "gitId": "-"
        },
        "content": "      if the redefined name is a nested getattr node."
      },
      {
        "lineNumber": 3205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3206,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a new option for the multi-statement warning to"
      },
      {
        "lineNumber": 3207,
        "author": {
          "gitId": "-"
        },
        "content": "      allow single-line if statements."
      },
      {
        "lineNumber": 3208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3209,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add \u0027bad-context-manager\u0027 error, checking that \u0027__exit__\u0027"
      },
      {
        "lineNumber": 3210,
        "author": {
          "gitId": "-"
        },
        "content": "      special method accepts the right number of arguments."
      },
      {
        "lineNumber": 3211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3212,
        "author": {
          "gitId": "-"
        },
        "content": "    * Run pylint as a python module \u0027python -m pylint\u0027 (anatoly techtonik)."
      },
      {
        "lineNumber": 3213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3214,
        "author": {
          "gitId": "-"
        },
        "content": "    * Check for non-exception classes inside an except clause."
      },
      {
        "lineNumber": 3215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3216,
        "author": {
          "gitId": "-"
        },
        "content": "    * epylint support options to give to pylint after the file to analyze and"
      },
      {
        "lineNumber": 3217,
        "author": {
          "gitId": "-"
        },
        "content": "      have basic input validation (bitbucket #53 and #54), patches provided by"
      },
      {
        "lineNumber": 3218,
        "author": {
          "gitId": "-"
        },
        "content": "      felipeochoa and Brian Lane."
      },
      {
        "lineNumber": 3219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3220,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning, \u0027non-iterator-returned\u0027, for non-iterators"
      },
      {
        "lineNumber": 3221,
        "author": {
          "gitId": "-"
        },
        "content": "      returned by \u0027__iter__\u0027."
      },
      {
        "lineNumber": 3222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3223,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new checks for unpacking non-sequences in assignments"
      },
      {
        "lineNumber": 3224,
        "author": {
          "gitId": "-"
        },
        "content": "      (unpacking-non-sequence) as well as unbalanced tuple unpacking"
      },
      {
        "lineNumber": 3225,
        "author": {
          "gitId": "-"
        },
        "content": "      (unbalanced-tuple-unpacking)."
      },
      {
        "lineNumber": 3226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3227,
        "author": {
          "gitId": "-"
        },
        "content": "    * useless-else-on-loop not emitted if there is a break in the"
      },
      {
        "lineNumber": 3228,
        "author": {
          "gitId": "-"
        },
        "content": "      else clause of inner loop (#117)."
      },
      {
        "lineNumber": 3229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3230,
        "author": {
          "gitId": "-"
        },
        "content": "    * don\u0027t mark `input` as a bad function when using python3 (#110)."
      },
      {
        "lineNumber": 3231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3232,
        "author": {
          "gitId": "-"
        },
        "content": "    * badly-implemented-container caused several problems in its"
      },
      {
        "lineNumber": 3233,
        "author": {
          "gitId": "-"
        },
        "content": "      current implementation. Deactivate it until we have something"
      },
      {
        "lineNumber": 3234,
        "author": {
          "gitId": "-"
        },
        "content": "      better. See #112 for instance."
      },
      {
        "lineNumber": 3235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3236,
        "author": {
          "gitId": "-"
        },
        "content": "    * Use attribute regexp for properties in python3, as in python2"
      },
      {
        "lineNumber": 3237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3238,
        "author": {
          "gitId": "-"
        },
        "content": "    * Create the PYLINTHOME directory when needed, it might fail and lead to"
      },
      {
        "lineNumber": 3239,
        "author": {
          "gitId": "-"
        },
        "content": "      spurious warnings on import of pylint.config."
      },
      {
        "lineNumber": 3240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3241,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix setup.py so that pylint properly install on Windows when using python3"
      },
      {
        "lineNumber": 3242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3243,
        "author": {
          "gitId": "-"
        },
        "content": "    * Various documentation fixes and enhancements"
      },
      {
        "lineNumber": 3244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3245,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix issue #55 (false-positive trailing-whitespace on Windows)"
      },
      {
        "lineNumber": 3246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3248,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 1.0.0?"
      },
      {
        "lineNumber": 3249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3251,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2013-08-06"
      },
      {
        "lineNumber": 3252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3254,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add check for the use of \u0027exec\u0027 function"
      },
      {
        "lineNumber": 3255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3256,
        "author": {
          "gitId": "-"
        },
        "content": "    * New --msg-template option to control output, deprecating \"msvc\" and"
      },
      {
        "lineNumber": 3257,
        "author": {
          "gitId": "-"
        },
        "content": "      \"parseable\" output formats as well as killing `--include-ids` and `--symbols`"
      },
      {
        "lineNumber": 3258,
        "author": {
          "gitId": "-"
        },
        "content": "      options"
      },
      {
        "lineNumber": 3259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3260,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not emit [fixme] for every line if the config value \u0027notes\u0027"
      },
      {
        "lineNumber": 3261,
        "author": {
          "gitId": "-"
        },
        "content": "      is empty, but [fixme] is enabled."
      },
      {
        "lineNumber": 3262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3263,
        "author": {
          "gitId": "-"
        },
        "content": "    * Emit warnings about lines exceeding the column limit when"
      },
      {
        "lineNumber": 3264,
        "author": {
          "gitId": "-"
        },
        "content": "      those lines are inside multiline docstrings."
      },
      {
        "lineNumber": 3265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3266,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not double-check parameter names with the regex for parameters and"
      },
      {
        "lineNumber": 3267,
        "author": {
          "gitId": "-"
        },
        "content": "      inline variables."
      },
      {
        "lineNumber": 3268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3269,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning missing-final-newline (C0304) for files missing"
      },
      {
        "lineNumber": 3270,
        "author": {
          "gitId": "-"
        },
        "content": "      the final newline."
      },
      {
        "lineNumber": 3271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3272,
        "author": {
          "gitId": "-"
        },
        "content": "    * Methods that are decorated as properties are now treated as attributes"
      },
      {
        "lineNumber": 3273,
        "author": {
          "gitId": "-"
        },
        "content": "      for the purposes of name checking."
      },
      {
        "lineNumber": 3274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3275,
        "author": {
          "gitId": "-"
        },
        "content": "    * Names of derived instance class member are not checked any more."
      },
      {
        "lineNumber": 3276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3277,
        "author": {
          "gitId": "-"
        },
        "content": "    * Names in global statements are now checked against the regular"
      },
      {
        "lineNumber": 3278,
        "author": {
          "gitId": "-"
        },
        "content": "      expression for constants."
      },
      {
        "lineNumber": 3279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3280,
        "author": {
          "gitId": "-"
        },
        "content": "    * For toplevel name assignment, the class name regex will be used if"
      },
      {
        "lineNumber": 3281,
        "author": {
          "gitId": "-"
        },
        "content": "      pylint can detect that value on the right-hand side is a class"
      },
      {
        "lineNumber": 3282,
        "author": {
          "gitId": "-"
        },
        "content": "      (like collections.namedtuple())."
      },
      {
        "lineNumber": 3283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3284,
        "author": {
          "gitId": "-"
        },
        "content": "    * Simplified invalid-name message"
      },
      {
        "lineNumber": 3285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3286,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning invalid-encoded-data (W0512) for files that"
      },
      {
        "lineNumber": 3287,
        "author": {
          "gitId": "-"
        },
        "content": "      contain data that cannot be decoded with the specified or"
      },
      {
        "lineNumber": 3288,
        "author": {
          "gitId": "-"
        },
        "content": "      default encoding."
      },
      {
        "lineNumber": 3289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3290,
        "author": {
          "gitId": "-"
        },
        "content": "    * New warning bad-open-mode (W1501) for calls to open (or file) that"
      },
      {
        "lineNumber": 3291,
        "author": {
          "gitId": "-"
        },
        "content": "      specify invalid open modes (Original implementation by Sasha Issayev)."
      },
      {
        "lineNumber": 3292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3293,
        "author": {
          "gitId": "-"
        },
        "content": "    * New warning old-style-class (C1001) for classes that do not have any"
      },
      {
        "lineNumber": 3294,
        "author": {
          "gitId": "-"
        },
        "content": "      base class."
      },
      {
        "lineNumber": 3295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3296,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add new name type \u0027class_attribute\u0027 for attributes defined"
      },
      {
        "lineNumber": 3297,
        "author": {
          "gitId": "-"
        },
        "content": "      in class scope. By default, allow both const and variable names."
      },
      {
        "lineNumber": 3298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3299,
        "author": {
          "gitId": "-"
        },
        "content": "    * New warning trailing-whitespace (C0303) that warns about"
      },
      {
        "lineNumber": 3300,
        "author": {
          "gitId": "-"
        },
        "content": "      trailing whitespace."
      },
      {
        "lineNumber": 3301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3302,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning unpacking-in-except (W0712) about unpacking"
      },
      {
        "lineNumber": 3303,
        "author": {
          "gitId": "-"
        },
        "content": "      exceptions in handlers, which is unsupported in Python 3."
      },
      {
        "lineNumber": 3304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3305,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add a configuration option for missing-docstring to"
      },
      {
        "lineNumber": 3306,
        "author": {
          "gitId": "-"
        },
        "content": "      optionally exempt short functions/methods/classes from"
      },
      {
        "lineNumber": 3307,
        "author": {
          "gitId": "-"
        },
        "content": "      the check."
      },
      {
        "lineNumber": 3308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3309,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add the type of the offending node to missing-docstring"
      },
      {
        "lineNumber": 3310,
        "author": {
          "gitId": "-"
        },
        "content": "      and empty-docstring."
      },
      {
        "lineNumber": 3311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3312,
        "author": {
          "gitId": "-"
        },
        "content": "    * New utility classes for per-checker unittests in testutils.py"
      },
      {
        "lineNumber": 3313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3314,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not warn about redefinitions of variables that match the"
      },
      {
        "lineNumber": 3315,
        "author": {
          "gitId": "-"
        },
        "content": "      dummy regex."
      },
      {
        "lineNumber": 3316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3317,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not treat all variables starting with _ as dummy variables,"
      },
      {
        "lineNumber": 3318,
        "author": {
          "gitId": "-"
        },
        "content": "      only _ itself."
      },
      {
        "lineNumber": 3319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3320,
        "author": {
          "gitId": "-"
        },
        "content": "    * Make the line-too-long warning configurable by adding a regex for lines"
      },
      {
        "lineNumber": 3321,
        "author": {
          "gitId": "-"
        },
        "content": "      for with the length limit should not be enforced"
      },
      {
        "lineNumber": 3322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3323,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not warn about a long line if a pylint disable"
      },
      {
        "lineNumber": 3324,
        "author": {
          "gitId": "-"
        },
        "content": "      option brings it above the length limit"
      },
      {
        "lineNumber": 3325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3326,
        "author": {
          "gitId": "-"
        },
        "content": "    * Do not flag names in nested with statements as undefined."
      },
      {
        "lineNumber": 3327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3328,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new warning \u0027old-raise-syntax\u0027 for the deprecated syntax"
      },
      {
        "lineNumber": 3329,
        "author": {
          "gitId": "-"
        },
        "content": "      raise Exception, args"
      },
      {
        "lineNumber": 3330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3331,
        "author": {
          "gitId": "-"
        },
        "content": "    * Support for PEP 3102 and new missing-kwoa (E1125) message for missing"
      },
      {
        "lineNumber": 3332,
        "author": {
          "gitId": "-"
        },
        "content": "      mandatory keyword argument (logilab.org\u0027s #107788)"
      },
      {
        "lineNumber": 3333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3334,
        "author": {
          "gitId": "-"
        },
        "content": "    * Fix spelling of max-branchs option, now max-branches"
      },
      {
        "lineNumber": 3335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3336,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added a new base class and interface for checkers that work on the"
      },
      {
        "lineNumber": 3337,
        "author": {
          "gitId": "-"
        },
        "content": "      tokens rather than the syntax, and only tokenize the input file"
      },
      {
        "lineNumber": 3338,
        "author": {
          "gitId": "-"
        },
        "content": "      once."
      },
      {
        "lineNumber": 3339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3340,
        "author": {
          "gitId": "-"
        },
        "content": "    * Follow astng renaming to astroid"
      },
      {
        "lineNumber": 3341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3342,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #37: check for unbalanced unpacking in assignments"
      },
      {
        "lineNumber": 3343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3344,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #25: fix incomplete-protocol false positive for read-only"
      },
      {
        "lineNumber": 3345,
        "author": {
          "gitId": "-"
        },
        "content": "      containers like tuple"
      },
      {
        "lineNumber": 3346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3347,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #16: fix False positive E1003 on Python 3 for argument-less super()"
      },
      {
        "lineNumber": 3348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3349,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #6: put back documentation in source distribution"
      },
      {
        "lineNumber": 3350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3351,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #15: epylint shouldn\u0027t hang anymore when there is a large"
      },
      {
        "lineNumber": 3352,
        "author": {
          "gitId": "-"
        },
        "content": "      output on pylint\u0027stderr"
      },
      {
        "lineNumber": 3353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3354,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #7: fix epylint w/ python3"
      },
      {
        "lineNumber": 3355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3356,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #3: remove string module from the default list of deprecated"
      },
      {
        "lineNumber": 3357,
        "author": {
          "gitId": "-"
        },
        "content": "      modules"
      },
      {
        "lineNumber": 3358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3360,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.28.0?"
      },
      {
        "lineNumber": 3361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3363,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2013-04-25"
      },
      {
        "lineNumber": 3364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3365,
        "author": {
          "gitId": "-"
        },
        "content": "    * bitbucket #1: fix \"dictionary changed size during iteration\" crash"
      },
      {
        "lineNumber": 3366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3367,
        "author": {
          "gitId": "-"
        },
        "content": "    * #74013: new E1310[bad-str-strip-call] message warning when a call to a"
      },
      {
        "lineNumber": 3368,
        "author": {
          "gitId": "-"
        },
        "content": "      {l,r,}strip method contains duplicate characters (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3370,
        "author": {
          "gitId": "-"
        },
        "content": "    * #123233: new E0108[duplicate-argument-name] message reporting duplicate"
      },
      {
        "lineNumber": 3371,
        "author": {
          "gitId": "-"
        },
        "content": "      argument names"
      },
      {
        "lineNumber": 3372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3373,
        "author": {
          "gitId": "-"
        },
        "content": "    * #81378: emit W0120[useless-else-on-loop] for loops without break"
      },
      {
        "lineNumber": 3374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3375,
        "author": {
          "gitId": "-"
        },
        "content": "    * #124660: internal dependencies should not appear in external dependencies"
      },
      {
        "lineNumber": 3376,
        "author": {
          "gitId": "-"
        },
        "content": "      report"
      },
      {
        "lineNumber": 3377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3378,
        "author": {
          "gitId": "-"
        },
        "content": "    * #124662: fix name error causing crash when symbols are included in output"
      },
      {
        "lineNumber": 3379,
        "author": {
          "gitId": "-"
        },
        "content": "      messages"
      },
      {
        "lineNumber": 3380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3381,
        "author": {
          "gitId": "-"
        },
        "content": "    * #123285: apply pragmas for warnings attached to lines to physical source"
      },
      {
        "lineNumber": 3382,
        "author": {
          "gitId": "-"
        },
        "content": "      code lines"
      },
      {
        "lineNumber": 3383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3384,
        "author": {
          "gitId": "-"
        },
        "content": "    * #123259: do not emit E0105 for yield expressions inside lambdas"
      },
      {
        "lineNumber": 3385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3386,
        "author": {
          "gitId": "-"
        },
        "content": "    * #123892: don\u0027t crash when attempting to show source code line that can\u0027t"
      },
      {
        "lineNumber": 3387,
        "author": {
          "gitId": "-"
        },
        "content": "      be encoded with the current locale settings"
      },
      {
        "lineNumber": 3388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3389,
        "author": {
          "gitId": "-"
        },
        "content": "    * Simplify checks for dangerous default values by unifying tests for all"
      },
      {
        "lineNumber": 3390,
        "author": {
          "gitId": "-"
        },
        "content": "      different mutable compound literals."
      },
      {
        "lineNumber": 3391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3392,
        "author": {
          "gitId": "-"
        },
        "content": "    * Improve the description for E1124[redundant-keyword-arg]"
      },
      {
        "lineNumber": 3393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3395,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.27.0?"
      },
      {
        "lineNumber": 3396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3398,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2013-02-26"
      },
      {
        "lineNumber": 3399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3400,
        "author": {
          "gitId": "-"
        },
        "content": "    * #20693: replace pylint.el by Ian Eure version (patch by J.Kotta)"
      },
      {
        "lineNumber": 3401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3402,
        "author": {
          "gitId": "-"
        },
        "content": "    * #105327: add support for --disable\u003dall option and deprecate the"
      },
      {
        "lineNumber": 3403,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027disable-all\u0027 inline directive in favour of \u0027skip-file\u0027 (patch by"
      },
      {
        "lineNumber": 3404,
        "author": {
          "gitId": "-"
        },
        "content": "      A.Fayolle)"
      },
      {
        "lineNumber": 3405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3406,
        "author": {
          "gitId": "-"
        },
        "content": "    * #110840: add messages I0020 and I0021 for reporting of suppressed"
      },
      {
        "lineNumber": 3407,
        "author": {
          "gitId": "-"
        },
        "content": "      messages and useless suppression pragmas. (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3409,
        "author": {
          "gitId": "-"
        },
        "content": "    * #112728: add warning E0604 for non-string objects in __all__"
      },
      {
        "lineNumber": 3410,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3412,
        "author": {
          "gitId": "-"
        },
        "content": "    * #120657: add warning W0110/deprecated-lambda when a map/filter"
      },
      {
        "lineNumber": 3413,
        "author": {
          "gitId": "-"
        },
        "content": "      of a lambda could be a comprehension (patch by Martin Pool)"
      },
      {
        "lineNumber": 3414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3415,
        "author": {
          "gitId": "-"
        },
        "content": "    * #113231: logging checker now looks at instances of Logger classes"
      },
      {
        "lineNumber": 3416,
        "author": {
          "gitId": "-"
        },
        "content": "      in addition to the base logging module. (patch by Mike Bryant)"
      },
      {
        "lineNumber": 3417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3418,
        "author": {
          "gitId": "-"
        },
        "content": "    * #111799: don\u0027t warn about octal escape sequence, but warn about \\o"
      },
      {
        "lineNumber": 3419,
        "author": {
          "gitId": "-"
        },
        "content": "      which is not octal in Python (patch by Martin Pool)"
      },
      {
        "lineNumber": 3420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3421,
        "author": {
          "gitId": "-"
        },
        "content": "    * #110839: bind \u003cF5\u003e to Run button in pylint-gui"
      },
      {
        "lineNumber": 3422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3423,
        "author": {
          "gitId": "-"
        },
        "content": "    * #115580: fix erroneous W0212 (access to protected member) on super call"
      },
      {
        "lineNumber": 3424,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by Martin Pool)"
      },
      {
        "lineNumber": 3425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3426,
        "author": {
          "gitId": "-"
        },
        "content": "    * #110853: fix a crash when an __init__ method in a base class has been"
      },
      {
        "lineNumber": 3427,
        "author": {
          "gitId": "-"
        },
        "content": "      created by assignment rather than direct function definition (patch by"
      },
      {
        "lineNumber": 3428,
        "author": {
          "gitId": "-"
        },
        "content": "      Torsten Marek)"
      },
      {
        "lineNumber": 3429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3430,
        "author": {
          "gitId": "-"
        },
        "content": "    * #110838: fix pylint-gui crash when include-ids is activated (patch by"
      },
      {
        "lineNumber": 3431,
        "author": {
          "gitId": "-"
        },
        "content": "      Omega Weapon)"
      },
      {
        "lineNumber": 3432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3433,
        "author": {
          "gitId": "-"
        },
        "content": "    * #112667: fix emission of reimport warnings for mixed imports and extend"
      },
      {
        "lineNumber": 3434,
        "author": {
          "gitId": "-"
        },
        "content": "      the testcase (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3436,
        "author": {
          "gitId": "-"
        },
        "content": "    * #112698: fix crash related to non-inferable __all__ attributes and"
      },
      {
        "lineNumber": 3437,
        "author": {
          "gitId": "-"
        },
        "content": "      invalid __all__ contents (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3439,
        "author": {
          "gitId": "-"
        },
        "content": "    * Python 3 related fixes:"
      },
      {
        "lineNumber": 3440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3441,
        "author": {
          "gitId": "-"
        },
        "content": "    * #110213: fix import of checkers broken with python 3.3, causing"
      },
      {
        "lineNumber": 3442,
        "author": {
          "gitId": "-"
        },
        "content": "        \"No such message id W0704\" breakage"
      },
      {
        "lineNumber": 3443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3444,
        "author": {
          "gitId": "-"
        },
        "content": "    * #120635: redefine cmp function used in pylint.reporters"
      },
      {
        "lineNumber": 3445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3446,
        "author": {
          "gitId": "-"
        },
        "content": "    * Include full warning id for I0020 and I0021 and make sure to flush"
      },
      {
        "lineNumber": 3447,
        "author": {
          "gitId": "-"
        },
        "content": "      warnings after each module, not at the end of the pylint run."
      },
      {
        "lineNumber": 3448,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3450,
        "author": {
          "gitId": "-"
        },
        "content": "    * Changed the regular expression for inline options so that it must be"
      },
      {
        "lineNumber": 3451,
        "author": {
          "gitId": "-"
        },
        "content": "      preceded by a # (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3453,
        "author": {
          "gitId": "-"
        },
        "content": "    * Make dot output for import graph predictable and not depend"
      },
      {
        "lineNumber": 3454,
        "author": {
          "gitId": "-"
        },
        "content": "      on ordering of strings in hashes. (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3456,
        "author": {
          "gitId": "-"
        },
        "content": "    * Add hooks for import path setup and move pylint\u0027s sys.path"
      },
      {
        "lineNumber": 3457,
        "author": {
          "gitId": "-"
        },
        "content": "      modifications into them. (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3460,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.26.0?"
      },
      {
        "lineNumber": 3461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3463,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2012-10-05"
      },
      {
        "lineNumber": 3464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3465,
        "author": {
          "gitId": "-"
        },
        "content": "    * #106534: add --ignore-imports option to code similarity checking"
      },
      {
        "lineNumber": 3466,
        "author": {
          "gitId": "-"
        },
        "content": "      and \u0027symilar\u0027 command line tool (patch by Ry4an Brase)"
      },
      {
        "lineNumber": 3467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3468,
        "author": {
          "gitId": "-"
        },
        "content": "    * #104571: check for anomalous backslash escape, introducing new"
      },
      {
        "lineNumber": 3469,
        "author": {
          "gitId": "-"
        },
        "content": "      W1401 and W1402 messages (patch by Martin Pool)"
      },
      {
        "lineNumber": 3470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3471,
        "author": {
          "gitId": "-"
        },
        "content": "    * #100707: check for boolop being used as exception class, introducing"
      },
      {
        "lineNumber": 3472,
        "author": {
          "gitId": "-"
        },
        "content": "      new W0711 message (patch by Tim Hatch)"
      },
      {
        "lineNumber": 3473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3474,
        "author": {
          "gitId": "-"
        },
        "content": "    * #4014: improve checking of metaclass methods first args, introducing"
      },
      {
        "lineNumber": 3475,
        "author": {
          "gitId": "-"
        },
        "content": "      new C0204 message (patch by lothiraldan@gmail.com finalized by sthenault)"
      },
      {
        "lineNumber": 3476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3477,
        "author": {
          "gitId": "-"
        },
        "content": "    * #4685: check for consistency of a module\u0027s __all__ variable,"
      },
      {
        "lineNumber": 3478,
        "author": {
          "gitId": "-"
        },
        "content": "      introducing new E0603 message"
      },
      {
        "lineNumber": 3479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3480,
        "author": {
          "gitId": "-"
        },
        "content": "    * #105337: allow custom reporter in output-format (patch by Kevin Jing Qiu)"
      },
      {
        "lineNumber": 3481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3482,
        "author": {
          "gitId": "-"
        },
        "content": "    * #104420: check for protocol completness and avoid false R0903"
      },
      {
        "lineNumber": 3483,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by Peter Hammond)"
      },
      {
        "lineNumber": 3484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3485,
        "author": {
          "gitId": "-"
        },
        "content": "    * #100654: fix grammatical error for W0332 message (using \u0027l\u0027 as"
      },
      {
        "lineNumber": 3486,
        "author": {
          "gitId": "-"
        },
        "content": "      long int identifier)"
      },
      {
        "lineNumber": 3487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3488,
        "author": {
          "gitId": "-"
        },
        "content": "    * #103656: fix W0231 false positive for missing call to object.__init__"
      },
      {
        "lineNumber": 3489,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by lothiraldan@gmail.com)"
      },
      {
        "lineNumber": 3490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3491,
        "author": {
          "gitId": "-"
        },
        "content": "    * #63424: fix similarity report disabling by properly renaming it to RP0801"
      },
      {
        "lineNumber": 3492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3493,
        "author": {
          "gitId": "-"
        },
        "content": "    * #103949: create a console_scripts entry point to be used by"
      },
      {
        "lineNumber": 3494,
        "author": {
          "gitId": "-"
        },
        "content": "      easy_install, buildout and pip"
      },
      {
        "lineNumber": 3495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3496,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix cross-interpreter issue (non compatible access to __builtins__)"
      },
      {
        "lineNumber": 3497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3498,
        "author": {
          "gitId": "-"
        },
        "content": "    * stop including tests files in distribution, they causes crash when"
      },
      {
        "lineNumber": 3499,
        "author": {
          "gitId": "-"
        },
        "content": "      installed with python3 (#72022, #82417, #76910)"
      },
      {
        "lineNumber": 3500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3502,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.25.2?"
      },
      {
        "lineNumber": 3503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3505,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2012-07-17"
      },
      {
        "lineNumber": 3506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3507,
        "author": {
          "gitId": "-"
        },
        "content": "    * #93591: Correctly emit warnings about clobbered variable names when an"
      },
      {
        "lineNumber": 3508,
        "author": {
          "gitId": "-"
        },
        "content": "      except handler contains a tuple of names instead of a single name."
      },
      {
        "lineNumber": 3509,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by tmarek@google.com)"
      },
      {
        "lineNumber": 3510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3511,
        "author": {
          "gitId": "-"
        },
        "content": "    * #7394: W0212 (access to protected member) not emitted on assigments"
      },
      {
        "lineNumber": 3512,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by lothiraldan@gmail.com)"
      },
      {
        "lineNumber": 3513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3514,
        "author": {
          "gitId": "-"
        },
        "content": "    * #18772; no prototype consistency check for mangled methods (patch by"
      },
      {
        "lineNumber": 3515,
        "author": {
          "gitId": "-"
        },
        "content": "      lothiraldan@gmail.com)"
      },
      {
        "lineNumber": 3516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3517,
        "author": {
          "gitId": "-"
        },
        "content": "    * #92911: emit W0102 when sets are used as default arguments in functions"
      },
      {
        "lineNumber": 3518,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by tmarek@google.com)"
      },
      {
        "lineNumber": 3519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3520,
        "author": {
          "gitId": "-"
        },
        "content": "    * #77982: do not emit E0602 for loop variables of comprehensions"
      },
      {
        "lineNumber": 3521,
        "author": {
          "gitId": "-"
        },
        "content": "      used as argument values inside a decorator (patch by tmarek@google.com)"
      },
      {
        "lineNumber": 3522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3523,
        "author": {
          "gitId": "-"
        },
        "content": "    * #89092: don\u0027t emit E0202 (attribute hiding a method) on @property methods"
      },
      {
        "lineNumber": 3524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3525,
        "author": {
          "gitId": "-"
        },
        "content": "    * #92584: fix pylint-gui crash due to internal API change"
      },
      {
        "lineNumber": 3526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3527,
        "author": {
          "gitId": "-"
        },
        "content": "    * #87192: fix crash when decorators are accessed through more than one dot"
      },
      {
        "lineNumber": 3528,
        "author": {
          "gitId": "-"
        },
        "content": "      (for instance @a.b is fine, @a.b.c crash)"
      },
      {
        "lineNumber": 3529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3530,
        "author": {
          "gitId": "-"
        },
        "content": "    * #88914: fix parsing of --generated-members options, leading to crash"
      },
      {
        "lineNumber": 3531,
        "author": {
          "gitId": "-"
        },
        "content": "      when using a regexp value set"
      },
      {
        "lineNumber": 3532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3533,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix potential crashes with utils.safe_infer raising InferenceError"
      },
      {
        "lineNumber": 3534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3536,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.25.1?"
      },
      {
        "lineNumber": 3537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3539,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2011-12-08"
      },
      {
        "lineNumber": 3540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3541,
        "author": {
          "gitId": "-"
        },
        "content": "    * #81078: Warn if names in  exception handlers clobber overwrite"
      },
      {
        "lineNumber": 3542,
        "author": {
          "gitId": "-"
        },
        "content": "      existing names (patch by tmarek@google.com)"
      },
      {
        "lineNumber": 3543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3544,
        "author": {
          "gitId": "-"
        },
        "content": "    * #81113: Fix W0702 messages appearing with the wrong line number."
      },
      {
        "lineNumber": 3545,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by tmarek@google.com)"
      },
      {
        "lineNumber": 3546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3547,
        "author": {
          "gitId": "-"
        },
        "content": "    * #50461, #52020, #51222: Do not issue warnings when using 2.6\u0027s"
      },
      {
        "lineNumber": 3548,
        "author": {
          "gitId": "-"
        },
        "content": "      property.setter/deleter functionality (patch by dneil@google.com)"
      },
      {
        "lineNumber": 3549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3550,
        "author": {
          "gitId": "-"
        },
        "content": "    * #9188, #4024: Do not trigger W0631 if a loop variable is assigned"
      },
      {
        "lineNumber": 3551,
        "author": {
          "gitId": "-"
        },
        "content": "      in the else branch of a for loop."
      },
      {
        "lineNumber": 3552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3554,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.25.0?"
      },
      {
        "lineNumber": 3555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3557,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2011-10-7"
      },
      {
        "lineNumber": 3558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3559,
        "author": {
          "gitId": "-"
        },
        "content": "    * #74742: make allowed name for first argument of class method configurable"
      },
      {
        "lineNumber": 3560,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by Google)"
      },
      {
        "lineNumber": 3561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3562,
        "author": {
          "gitId": "-"
        },
        "content": "    * #74087: handle case where inference of a module return YES; this avoid"
      },
      {
        "lineNumber": 3563,
        "author": {
          "gitId": "-"
        },
        "content": "      some cases of \"TypeError: \u0027_Yes\u0027 object does not support indexing\" (patch"
      },
      {
        "lineNumber": 3564,
        "author": {
          "gitId": "-"
        },
        "content": "      by Google)"
      },
      {
        "lineNumber": 3565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3566,
        "author": {
          "gitId": "-"
        },
        "content": "    * #74745: make \"too general\" exception names configurable (patch by Google)"
      },
      {
        "lineNumber": 3567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3568,
        "author": {
          "gitId": "-"
        },
        "content": "    * #74747: crash occurs when lookup up a special attribute in class scope"
      },
      {
        "lineNumber": 3569,
        "author": {
          "gitId": "-"
        },
        "content": "      (patch by google)"
      },
      {
        "lineNumber": 3570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3571,
        "author": {
          "gitId": "-"
        },
        "content": "    * #76920: crash if on eg \"pylint --rcfile\" (patch by Torsten Marek)"
      },
      {
        "lineNumber": 3572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3573,
        "author": {
          "gitId": "-"
        },
        "content": "    * #77237: warning for E0202 may be very misleading"
      },
      {
        "lineNumber": 3574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3575,
        "author": {
          "gitId": "-"
        },
        "content": "    * #73941: HTML report messages table is badly rendered"
      },
      {
        "lineNumber": 3576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3578,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.24.0?"
      },
      {
        "lineNumber": 3579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3581,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2011-07-18"
      },
      {
        "lineNumber": 3582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3583,
        "author": {
          "gitId": "-"
        },
        "content": "    * #69738: add regular expressions support for \"generated-members\""
      },
      {
        "lineNumber": 3584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3585,
        "author": {
          "gitId": "-"
        },
        "content": "    * ids of logging and string_format checkers have been changed:"
      },
      {
        "lineNumber": 3586,
        "author": {
          "gitId": "-"
        },
        "content": "      logging: 65 -\u003e 12, string_format: 99 -\u003e 13"
      },
      {
        "lineNumber": 3587,
        "author": {
          "gitId": "-"
        },
        "content": "      Also add documentation to say that ids of range 1-50 shall be reserved"
      },
      {
        "lineNumber": 3588,
        "author": {
          "gitId": "-"
        },
        "content": "      to pylint internal checkers"
      },
      {
        "lineNumber": 3589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3590,
        "author": {
          "gitId": "-"
        },
        "content": "    * #69993: Additional string format checks for logging module:"
      },
      {
        "lineNumber": 3591,
        "author": {
          "gitId": "-"
        },
        "content": "      check for missing arguments, too many arguments, or invalid string"
      },
      {
        "lineNumber": 3592,
        "author": {
          "gitId": "-"
        },
        "content": "      formats in the logging checker module. Contributed by Daniel Arena"
      },
      {
        "lineNumber": 3593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3594,
        "author": {
          "gitId": "-"
        },
        "content": "    * #69220: add column offset to the reports. If you\u0027ve a custom reporter,"
      },
      {
        "lineNumber": 3595,
        "author": {
          "gitId": "-"
        },
        "content": "      this change may break it has now location gain a new item giving the"
      },
      {
        "lineNumber": 3596,
        "author": {
          "gitId": "-"
        },
        "content": "      column offset."
      },
      {
        "lineNumber": 3597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3598,
        "author": {
          "gitId": "-"
        },
        "content": "    * #60828: Fix false positive in reimport check"
      },
      {
        "lineNumber": 3599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3600,
        "author": {
          "gitId": "-"
        },
        "content": "    * #70495: absolute imports fail depending on module path (patch by Jacek Konieczny)"
      },
      {
        "lineNumber": 3601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3602,
        "author": {
          "gitId": "-"
        },
        "content": "    * #22273: Fix --ignore option documentation to match reality"
      },
      {
        "lineNumber": 3603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3605,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.23.0?"
      },
      {
        "lineNumber": 3606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3608,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2011-01-11"
      },
      {
        "lineNumber": 3609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3610,
        "author": {
          "gitId": "-"
        },
        "content": "    * documentation update, add manpages"
      },
      {
        "lineNumber": 3611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3612,
        "author": {
          "gitId": "-"
        },
        "content": "    * several performance improvements"
      },
      {
        "lineNumber": 3613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3614,
        "author": {
          "gitId": "-"
        },
        "content": "    * finalize python3 support"
      },
      {
        "lineNumber": 3615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3616,
        "author": {
          "gitId": "-"
        },
        "content": "    * new W0106 warning \u0027Expression \"%s\" is assigned to nothing\u0027"
      },
      {
        "lineNumber": 3617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3618,
        "author": {
          "gitId": "-"
        },
        "content": "    * drop E0501 and E0502 messages about wrong source encoding: not anymore"
      },
      {
        "lineNumber": 3619,
        "author": {
          "gitId": "-"
        },
        "content": "      interesting since it\u0027s a syntax error for python \u003e\u003d 2.5 and we now only"
      },
      {
        "lineNumber": 3620,
        "author": {
          "gitId": "-"
        },
        "content": "      support this python version and above."
      },
      {
        "lineNumber": 3621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3622,
        "author": {
          "gitId": "-"
        },
        "content": "    * don\u0027t emit W0221 or W0222 when methods as variable arguments (eg \\*arg"
      },
      {
        "lineNumber": 3623,
        "author": {
          "gitId": "-"
        },
        "content": "      and/or \\*\\*args). Patch submitted by Charles Duffy."
      },
      {
        "lineNumber": 3624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3626,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.22.0?"
      },
      {
        "lineNumber": 3627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3629,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2010-11-15"
      },
      {
        "lineNumber": 3630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3631,
        "author": {
          "gitId": "-"
        },
        "content": "    * python versions: minimal python3.x support; drop python \u003c 2.5 support"
      },
      {
        "lineNumber": 3632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3634,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.21.4?"
      },
      {
        "lineNumber": 3635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3637,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2010-10-27"
      },
      {
        "lineNumber": 3638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3639,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #48066: pylint crashes when redirecting output containing non-ascii characters"
      },
      {
        "lineNumber": 3640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3641,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #19799: \"pylint -blah\" exit with status 2"
      },
      {
        "lineNumber": 3642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3643,
        "author": {
          "gitId": "-"
        },
        "content": "    * update documentation"
      },
      {
        "lineNumber": 3644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3646,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.21.3?"
      },
      {
        "lineNumber": 3647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3649,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2010-09-28"
      },
      {
        "lineNumber": 3650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3651,
        "author": {
          "gitId": "-"
        },
        "content": "    * restored python 2.3 compatibility. Along with logilab-astng"
      },
      {
        "lineNumber": 3652,
        "author": {
          "gitId": "-"
        },
        "content": "      0.21.3 and logilab-common 0.52, this will much probably be the"
      },
      {
        "lineNumber": 3653,
        "author": {
          "gitId": "-"
        },
        "content": "      latest release supporting python \u003c 2.5."
      },
      {
        "lineNumber": 3654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3656,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.21.2?"
      },
      {
        "lineNumber": 3657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3659,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2010-08-26"
      },
      {
        "lineNumber": 3660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3661,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #36193: import checker raise exception on cyclic import"
      },
      {
        "lineNumber": 3662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3663,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #28796: regression in --generated-members introduced pylint 0.20"
      },
      {
        "lineNumber": 3664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3665,
        "author": {
          "gitId": "-"
        },
        "content": "    * some documentation cleanups"
      },
      {
        "lineNumber": 3666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3668,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.21.1?"
      },
      {
        "lineNumber": 3669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3671,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2010-06-04"
      },
      {
        "lineNumber": 3672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3673,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #28962: pylint crash with new options, due to missing stats data while"
      },
      {
        "lineNumber": 3674,
        "author": {
          "gitId": "-"
        },
        "content": "      writing the Statistics by types report"
      },
      {
        "lineNumber": 3675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3676,
        "author": {
          "gitId": "-"
        },
        "content": "    * updated man page to 0.21 or greater command line usage (fix debian #582494)"
      },
      {
        "lineNumber": 3677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3679,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.21.0?"
      },
      {
        "lineNumber": 3680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3682,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2010-05-11"
      },
      {
        "lineNumber": 3683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3684,
        "author": {
          "gitId": "-"
        },
        "content": "    * command line updated (closes #9774, #9787, #9992, #22962):"
      },
      {
        "lineNumber": 3685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3686,
        "author": {
          "gitId": "-"
        },
        "content": "    * all enable-* / disable-* options have been merged into --enable / --disable"
      },
      {
        "lineNumber": 3687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3688,
        "author": {
          "gitId": "-"
        },
        "content": "    * BACKWARD INCOMPATIBLE CHANGE: short name of --errors-only becomes -E, -e being"
      },
      {
        "lineNumber": 3689,
        "author": {
          "gitId": "-"
        },
        "content": "      affected to --enable"
      },
      {
        "lineNumber": 3690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3691,
        "author": {
          "gitId": "-"
        },
        "content": "    * pylint --help output much simplified, with --long-help available to get the"
      },
      {
        "lineNumber": 3692,
        "author": {
          "gitId": "-"
        },
        "content": "      complete one"
      },
      {
        "lineNumber": 3693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3694,
        "author": {
          "gitId": "-"
        },
        "content": "    * revisited gui, thanks to students from Toronto university (they are great"
      },
      {
        "lineNumber": 3695,
        "author": {
          "gitId": "-"
        },
        "content": "      contributors to this release!)"
      },
      {
        "lineNumber": 3696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3697,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #21591: html reporter produces no output if reports is set to \u0027no\u0027"
      },
      {
        "lineNumber": 3698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3699,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #4581: not Missing docstring (C0111) warning if a method is overridden"
      },
      {
        "lineNumber": 3700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3701,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #4683: Non-ASCII characters count double if utf8 encode"
      },
      {
        "lineNumber": 3702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3703,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #9018: when using defining-attr-method, method order matters"
      },
      {
        "lineNumber": 3704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3705,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #4595: Comma not followed by a space should not occurs on trailing comma"
      },
      {
        "lineNumber": 3706,
        "author": {
          "gitId": "-"
        },
        "content": "      in list/tuple/dict definition"
      },
      {
        "lineNumber": 3707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3708,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #22585: [Patch] fix man warnings for pyreverse.1 manpage"
      },
      {
        "lineNumber": 3709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3710,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #20067: AttributeError: \u0027NoneType\u0027 object has no attribute \u0027name\u0027 with with"
      },
      {
        "lineNumber": 3711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3714,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.20.0?"
      },
      {
        "lineNumber": 3715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3717,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2010-03-01"
      },
      {
        "lineNumber": 3718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3719,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #19498: fix windows batch file"
      },
      {
        "lineNumber": 3720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3721,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #19339: pylint.el : non existing py-mod-map"
      },
      {
        "lineNumber": 3722,
        "author": {
          "gitId": "-"
        },
        "content": "      (closes Debian Bug report logs - #475939)"
      },
      {
        "lineNumber": 3723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3724,
        "author": {
          "gitId": "-"
        },
        "content": "    * implement #18860, new W0199 message on assert (a, b)"
      },
      {
        "lineNumber": 3725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3726,
        "author": {
          "gitId": "-"
        },
        "content": "    * implement #9776, \u0027W0150\u0027 break or return statement in finally block may"
      },
      {
        "lineNumber": 3727,
        "author": {
          "gitId": "-"
        },
        "content": "      swallow exception."
      },
      {
        "lineNumber": 3728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3729,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #9263, __init__ and __new__ are checked for unused arguments"
      },
      {
        "lineNumber": 3730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3731,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #20991, class scope definitions ignored in a genexpr"
      },
      {
        "lineNumber": 3732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3733,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #5975, Abstract intermediate class not recognized as such"
      },
      {
        "lineNumber": 3734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3735,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #5977, yield and return statement have their own counters, no more R0911"
      },
      {
        "lineNumber": 3736,
        "author": {
          "gitId": "-"
        },
        "content": "      (Too many return statements) when a function have many yield stamtements"
      },
      {
        "lineNumber": 3737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3738,
        "author": {
          "gitId": "-"
        },
        "content": "    * implement #5564, function / method arguments with leading \"_\" are ignored in"
      },
      {
        "lineNumber": 3739,
        "author": {
          "gitId": "-"
        },
        "content": "      arguments / local variables count."
      },
      {
        "lineNumber": 3740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3741,
        "author": {
          "gitId": "-"
        },
        "content": "    * implement #9982, E0711 specific error message when raising NotImplemented"
      },
      {
        "lineNumber": 3742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3743,
        "author": {
          "gitId": "-"
        },
        "content": "    * remove --cache-size option"
      },
      {
        "lineNumber": 3744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3746,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.19.0?"
      },
      {
        "lineNumber": 3747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3749,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2009-12-18"
      },
      {
        "lineNumber": 3750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3751,
        "author": {
          "gitId": "-"
        },
        "content": "    * implement #18947, #5561: checker for function arguments"
      },
      {
        "lineNumber": 3752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3753,
        "author": {
          "gitId": "-"
        },
        "content": "    * include James Lingard string format checker"
      },
      {
        "lineNumber": 3754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3755,
        "author": {
          "gitId": "-"
        },
        "content": "    * include simple message (ids) listing by Vincent Ferotin (#9791)"
      },
      {
        "lineNumber": 3756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3757,
        "author": {
          "gitId": "-"
        },
        "content": "    * --errors-only does not hide fatal error anymore"
      },
      {
        "lineNumber": 3758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3759,
        "author": {
          "gitId": "-"
        },
        "content": "    * include james Lingard patches for ++/-- and duplicate key in dicts"
      },
      {
        "lineNumber": 3760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3761,
        "author": {
          "gitId": "-"
        },
        "content": "    * include James Lingard patches for function call arguments checker"
      },
      {
        "lineNumber": 3762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3763,
        "author": {
          "gitId": "-"
        },
        "content": "    * improved flymake code and doc provided by Derek Harland"
      },
      {
        "lineNumber": 3764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3765,
        "author": {
          "gitId": "-"
        },
        "content": "    * refactor and fix the imports checker"
      },
      {
        "lineNumber": 3766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3767,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #18862: E0601 false positive with lambda functions"
      },
      {
        "lineNumber": 3768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3769,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #8764: More than one statement on a single line false positive with"
      },
      {
        "lineNumber": 3770,
        "author": {
          "gitId": "-"
        },
        "content": "      try/except/finally"
      },
      {
        "lineNumber": 3771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3772,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #9215: false undefined variable error in lambda function"
      },
      {
        "lineNumber": 3773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3774,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix for w0108 false positive (Nathaniel)"
      },
      {
        "lineNumber": 3775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3776,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix test/fulltest.sh"
      },
      {
        "lineNumber": 3777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3778,
        "author": {
          "gitId": "-"
        },
        "content": "    * #5821 added a utility function to run pylint in another process (patch provide by Vincent Ferotin)"
      },
      {
        "lineNumber": 3779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3781,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.18.0?"
      },
      {
        "lineNumber": 3782,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3784,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2009-03-25"
      },
      {
        "lineNumber": 3785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3786,
        "author": {
          "gitId": "-"
        },
        "content": "    * tests ok with python 2.4, 2.5, 2.6. 2.3 not tested"
      },
      {
        "lineNumber": 3787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3788,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #8687, W0613 false positive on inner function"
      },
      {
        "lineNumber": 3789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3790,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #8350, C0322 false positive on multi-line string"
      },
      {
        "lineNumber": 3791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3792,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #8332: set E0501 line no to the first line where non ascii character"
      },
      {
        "lineNumber": 3793,
        "author": {
          "gitId": "-"
        },
        "content": "      has been found"
      },
      {
        "lineNumber": 3794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3795,
        "author": {
          "gitId": "-"
        },
        "content": "    * avoid some E0203 / E0602 false negatives by detecting respectively"
      },
      {
        "lineNumber": 3796,
        "author": {
          "gitId": "-"
        },
        "content": "      AttributeError / NameError"
      },
      {
        "lineNumber": 3797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3798,
        "author": {
          "gitId": "-"
        },
        "content": "    * implements #4037: don\u0027t issue W0142 (* or ** magic) when they are barely"
      },
      {
        "lineNumber": 3799,
        "author": {
          "gitId": "-"
        },
        "content": "      passed from */** arguments"
      },
      {
        "lineNumber": 3800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3801,
        "author": {
          "gitId": "-"
        },
        "content": "    * complete #5573: more complete list of special methods, also skip W0613"
      },
      {
        "lineNumber": 3802,
        "author": {
          "gitId": "-"
        },
        "content": "      for python internal method"
      },
      {
        "lineNumber": 3803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3804,
        "author": {
          "gitId": "-"
        },
        "content": "    * don\u0027t show information messages by default"
      },
      {
        "lineNumber": 3805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3806,
        "author": {
          "gitId": "-"
        },
        "content": "    * integration of Yuen Ho Wong\u0027s patches on emacs lisp files"
      },
      {
        "lineNumber": 3807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3809,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.17.0?"
      },
      {
        "lineNumber": 3810,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3812,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2009-03-19"
      },
      {
        "lineNumber": 3813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3814,
        "author": {
          "gitId": "-"
        },
        "content": "    * semicolon check : move W0601 to W0301"
      },
      {
        "lineNumber": 3815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3816,
        "author": {
          "gitId": "-"
        },
        "content": "    * remove rpython : remove all rpython checker, modules and tests"
      },
      {
        "lineNumber": 3817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3818,
        "author": {
          "gitId": "-"
        },
        "content": "    * astng 0.18 compatibility: support for _ast module modifies interfaces"
      },
      {
        "lineNumber": 3819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3821,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.16.0?"
      },
      {
        "lineNumber": 3822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3824,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2009-01-28"
      },
      {
        "lineNumber": 3825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3826,
        "author": {
          "gitId": "-"
        },
        "content": "    * change [en|dis]able-msg-cat options: only accept message categories"
      },
      {
        "lineNumber": 3827,
        "author": {
          "gitId": "-"
        },
        "content": "      identified by their first letter (eg IRCWEF) without the need for comma"
      },
      {
        "lineNumber": 3828,
        "author": {
          "gitId": "-"
        },
        "content": "      as separator"
      },
      {
        "lineNumber": 3829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3830,
        "author": {
          "gitId": "-"
        },
        "content": "    * add epylint.bat script to fix Windows installation"
      },
      {
        "lineNumber": 3831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3832,
        "author": {
          "gitId": "-"
        },
        "content": "    * setuptools/easy_install support"
      },
      {
        "lineNumber": 3833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3834,
        "author": {
          "gitId": "-"
        },
        "content": "    * include a modified version of Maarten ter Huurne patch to avoid W0613"
      },
      {
        "lineNumber": 3835,
        "author": {
          "gitId": "-"
        },
        "content": "      warning on arguments from overridden method"
      },
      {
        "lineNumber": 3836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3837,
        "author": {
          "gitId": "-"
        },
        "content": "    * implement #5575  drop dumb W0704 message) by adding W0704 to ignored"
      },
      {
        "lineNumber": 3838,
        "author": {
          "gitId": "-"
        },
        "content": "      messages by default"
      },
      {
        "lineNumber": 3839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3840,
        "author": {
          "gitId": "-"
        },
        "content": "    * new W0108 message, checking for suspicious lambda (provided by  Nathaniel"
      },
      {
        "lineNumber": 3841,
        "author": {
          "gitId": "-"
        },
        "content": "      Manista)"
      },
      {
        "lineNumber": 3842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3843,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix W0631, false positive reported by Paul Hachmann"
      },
      {
        "lineNumber": 3844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3845,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #6951: false positive with W0104"
      },
      {
        "lineNumber": 3846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3847,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #6949"
      },
      {
        "lineNumber": 3848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3849,
        "author": {
          "gitId": "-"
        },
        "content": "    * patches by Mads Kiilerich:"
      },
      {
        "lineNumber": 3850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3851,
        "author": {
          "gitId": "-"
        },
        "content": "    * implement #4691, make pylint exits with a non zero return"
      },
      {
        "lineNumber": 3852,
        "author": {
          "gitId": "-"
        },
        "content": "      status if any messages other then Information are issued"
      },
      {
        "lineNumber": 3853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3854,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3711, #5626 (name resolution bug w/ decorator and class members)"
      },
      {
        "lineNumber": 3855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3856,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #6954"
      },
      {
        "lineNumber": 3857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3859,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.15.2?"
      },
      {
        "lineNumber": 3860,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3862,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2008-10-13"
      },
      {
        "lineNumber": 3863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3864,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #5672: W0706 weirdness ( W0706 removed )"
      },
      {
        "lineNumber": 3865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3866,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #5998: documentation points to wrong url for mailing list"
      },
      {
        "lineNumber": 3867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3868,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #6022: no error message on wrong module names"
      },
      {
        "lineNumber": 3869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3870,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #6040: pytest doesn\u0027t run test/func_test.py"
      },
      {
        "lineNumber": 3871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3873,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.15.1?"
      },
      {
        "lineNumber": 3874,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3876,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2008-09-15"
      },
      {
        "lineNumber": 3877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3878,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #4910: default values are missing in manpage"
      },
      {
        "lineNumber": 3879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3880,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #5991: missing files in 0.15.0 tarball"
      },
      {
        "lineNumber": 3881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3882,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #5993: epylint should work with python 2.3"
      },
      {
        "lineNumber": 3883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3885,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.15.0?"
      },
      {
        "lineNumber": 3886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3888,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2008-09-10"
      },
      {
        "lineNumber": 3889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3890,
        "author": {
          "gitId": "-"
        },
        "content": "    * include pyreverse package and class diagram generation"
      },
      {
        "lineNumber": 3891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3892,
        "author": {
          "gitId": "-"
        },
        "content": "    * included Stefan Rank\u0027s patch to deal with 2.4 relative import"
      },
      {
        "lineNumber": 3893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3894,
        "author": {
          "gitId": "-"
        },
        "content": "    * included Robert Kirkpatrick\u0027s tutorial and typos fixes"
      },
      {
        "lineNumber": 3895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3896,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix bug in reenabling message"
      },
      {
        "lineNumber": 3897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3898,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #2473: invoking pylint on __init__.py (hopefully)"
      },
      {
        "lineNumber": 3899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3900,
        "author": {
          "gitId": "-"
        },
        "content": "    * typecheck: acquired-members option has been dropped in favor of the more"
      },
      {
        "lineNumber": 3901,
        "author": {
          "gitId": "-"
        },
        "content": "      generic generated-members option. If the zope option is set, the behaviour"
      },
      {
        "lineNumber": 3902,
        "author": {
          "gitId": "-"
        },
        "content": "      is now to add some default values to generated-members."
      },
      {
        "lineNumber": 3903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3904,
        "author": {
          "gitId": "-"
        },
        "content": "    * flymake integration: added bin/epylint and elisp/pylint-flymake.el"
      },
      {
        "lineNumber": 3905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3907,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.14.0?"
      },
      {
        "lineNumber": 3908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3910,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2008-01-14"
      },
      {
        "lineNumber": 3911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3912,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3733: Messages (dis)appear depending on order of file names"
      },
      {
        "lineNumber": 3913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3914,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #4026: pylint.el should require compile"
      },
      {
        "lineNumber": 3915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3916,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix a bug in colorized reporter, spotted by Dave Borowitz"
      },
      {
        "lineNumber": 3917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3918,
        "author": {
          "gitId": "-"
        },
        "content": "    * applied patch from Stefan Rank to avoid W0410 false positive when"
      },
      {
        "lineNumber": 3919,
        "author": {
          "gitId": "-"
        },
        "content": "      multiple \"from __future__\" import statements"
      },
      {
        "lineNumber": 3920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3921,
        "author": {
          "gitId": "-"
        },
        "content": "    * implement #4012: flag back tick as deprecated (new W0333 message)"
      },
      {
        "lineNumber": 3922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3923,
        "author": {
          "gitId": "-"
        },
        "content": "    * new ignored-class option on typecheck checker allowing to skip members"
      },
      {
        "lineNumber": 3924,
        "author": {
          "gitId": "-"
        },
        "content": "      checking based on class name (patch provided by Thomas W Barr)"
      },
      {
        "lineNumber": 3925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3927,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.13.2?"
      },
      {
        "lineNumber": 3928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3930,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2007-06-07"
      },
      {
        "lineNumber": 3931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3932,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix disable-checker option so that it won\u0027t accidentally enable the"
      },
      {
        "lineNumber": 3933,
        "author": {
          "gitId": "-"
        },
        "content": "      rpython checker which is disabled by default"
      },
      {
        "lineNumber": 3934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3935,
        "author": {
          "gitId": "-"
        },
        "content": "    * added note about the gedit plugin into documentation"
      },
      {
        "lineNumber": 3936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3939,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.13.1?"
      },
      {
        "lineNumber": 3940,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3942,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2007-03-02"
      },
      {
        "lineNumber": 3943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3944,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix some unexplained 0.13.0 packaging issue which led to a bunch of"
      },
      {
        "lineNumber": 3945,
        "author": {
          "gitId": "-"
        },
        "content": "      files missing from the distribution"
      },
      {
        "lineNumber": 3946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3949,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.13.0?"
      },
      {
        "lineNumber": 3950,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3952,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2007-02-28"
      },
      {
        "lineNumber": 3953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3954,
        "author": {
          "gitId": "-"
        },
        "content": "    * new RPython (Restricted Python) checker for PyPy fellow or people"
      },
      {
        "lineNumber": 3955,
        "author": {
          "gitId": "-"
        },
        "content": "      wanting to get a compiled version of their python program using the"
      },
      {
        "lineNumber": 3956,
        "author": {
          "gitId": "-"
        },
        "content": "      translator of the PyPy project. For more information about PyPy or"
      },
      {
        "lineNumber": 3957,
        "author": {
          "gitId": "-"
        },
        "content": "      RPython, visit http://codespeak.net/pypy/"
      },
      {
        "lineNumber": 3958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3959,
        "author": {
          "gitId": "-"
        },
        "content": "    * new E0104 and E0105 messages introduced to respectively warn about"
      },
      {
        "lineNumber": 3960,
        "author": {
          "gitId": "-"
        },
        "content": "      \"return\" and \"yield\" outside function or method"
      },
      {
        "lineNumber": 3961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3962,
        "author": {
          "gitId": "-"
        },
        "content": "    * new E0106 message when \"yield\" and \"return something\" are mixed in a"
      },
      {
        "lineNumber": 3963,
        "author": {
          "gitId": "-"
        },
        "content": "      function or method"
      },
      {
        "lineNumber": 3964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3965,
        "author": {
          "gitId": "-"
        },
        "content": "    * new W0107 message for unnecessary pass statement"
      },
      {
        "lineNumber": 3966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3967,
        "author": {
          "gitId": "-"
        },
        "content": "    * new W0614 message to differentiate between unused `import X` and"
      },
      {
        "lineNumber": 3968,
        "author": {
          "gitId": "-"
        },
        "content": "      unused `from X import *` (#3209, patch submitted by Daniel Drake)"
      },
      {
        "lineNumber": 3969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3970,
        "author": {
          "gitId": "-"
        },
        "content": "    * included Daniel Drake\u0027s patch to have a different message E1003 instead of"
      },
      {
        "lineNumber": 3971,
        "author": {
          "gitId": "-"
        },
        "content": "      E1001 when a missing member is found but an inference failure has been"
      },
      {
        "lineNumber": 3972,
        "author": {
          "gitId": "-"
        },
        "content": "      detected"
      },
      {
        "lineNumber": 3973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3974,
        "author": {
          "gitId": "-"
        },
        "content": "    * msvs reporter for Visual Studio line number reporting (#3285)"
      },
      {
        "lineNumber": 3975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3976,
        "author": {
          "gitId": "-"
        },
        "content": "    * allow disable-all option inline (#3218, patch submitted by Daniel Drake)"
      },
      {
        "lineNumber": 3977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3978,
        "author": {
          "gitId": "-"
        },
        "content": "    * --init-hook option to call arbitrary code necessary to set"
      },
      {
        "lineNumber": 3979,
        "author": {
          "gitId": "-"
        },
        "content": "      environment (eg sys.path) (#3156)"
      },
      {
        "lineNumber": 3980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3981,
        "author": {
          "gitId": "-"
        },
        "content": "    * One more Daniel\u0027s patch fixing a command line option parsing"
      },
      {
        "lineNumber": 3982,
        "author": {
          "gitId": "-"
        },
        "content": "      problem, this\u0027ll definitely be the DDrake release :)"
      },
      {
        "lineNumber": 3983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3984,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3184: crashes on \"return\" outside function"
      },
      {
        "lineNumber": 3985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3986,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3205: W0704 false positive"
      },
      {
        "lineNumber": 3987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3988,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3123: W0212 false positive on static method"
      },
      {
        "lineNumber": 3989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3990,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #2485: W0222 false positive"
      },
      {
        "lineNumber": 3991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3992,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3259: when a message is explicitly enabled, check the checker"
      },
      {
        "lineNumber": 3993,
        "author": {
          "gitId": "-"
        },
        "content": "      emitting it is enabled"
      },
      {
        "lineNumber": 3994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3996,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.12.2?"
      },
      {
        "lineNumber": 3997,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3999,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2006-11-23"
      },
      {
        "lineNumber": 4000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4001,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3143: W0233 bug w/ YES objects"
      },
      {
        "lineNumber": 4002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4003,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3119: Off-by-one error counting lines in a file"
      },
      {
        "lineNumber": 4004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4005,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3117: ease sys.stdout overriding for reporters"
      },
      {
        "lineNumber": 4006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4007,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #2508: E0601 false positive with lambda"
      },
      {
        "lineNumber": 4008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4009,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3125: E1101 false positive and a message duplication. Only the last part"
      },
      {
        "lineNumber": 4010,
        "author": {
          "gitId": "-"
        },
        "content": "      is actually fixed since the initial false positive is due to dynamic setting of"
      },
      {
        "lineNumber": 4011,
        "author": {
          "gitId": "-"
        },
        "content": "      attributes on the decimal.Context class."
      },
      {
        "lineNumber": 4012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4013,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix #3149: E0101 false positives and introduced E0100 for generator __init__"
      },
      {
        "lineNumber": 4014,
        "author": {
          "gitId": "-"
        },
        "content": "      methods"
      },
      {
        "lineNumber": 4015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4016,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed some format checker false positives"
      },
      {
        "lineNumber": 4017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4019,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.12.1?"
      },
      {
        "lineNumber": 4020,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4023,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2006-09-25"
      },
      {
        "lineNumber": 4024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4025,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed python \u003e\u003d 2.4 format false positive with multiple lines statement"
      },
      {
        "lineNumber": 4026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4027,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed some 2.5 issues"
      },
      {
        "lineNumber": 4028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4029,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed generator expression scope bug (depends on astng 0.16.1)"
      },
      {
        "lineNumber": 4030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4031,
        "author": {
          "gitId": "-"
        },
        "content": "    * stop requiring __revision__"
      },
      {
        "lineNumber": 4032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4034,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.12.0?"
      },
      {
        "lineNumber": 4035,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4038,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2006-08-10"
      },
      {
        "lineNumber": 4039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4040,
        "author": {
          "gitId": "-"
        },
        "content": "    * usability changes:"
      },
      {
        "lineNumber": 4041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4042,
        "author": {
          "gitId": "-"
        },
        "content": "        * parseable, html and color options are now handled by a single"
      },
      {
        "lineNumber": 4043,
        "author": {
          "gitId": "-"
        },
        "content": "          output-format option"
      },
      {
        "lineNumber": 4044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4045,
        "author": {
          "gitId": "-"
        },
        "content": "        * enable-\u003ccheckerid\u003e and disable-all options are now handled by"
      },
      {
        "lineNumber": 4046,
        "author": {
          "gitId": "-"
        },
        "content": "          two (exclusive) enable-checker and disable-checker options"
      },
      {
        "lineNumber": 4047,
        "author": {
          "gitId": "-"
        },
        "content": "          taking a comma separated list of checker names as value"
      },
      {
        "lineNumber": 4048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4049,
        "author": {
          "gitId": "-"
        },
        "content": "        * renamed debug-mode option to errors-only"
      },
      {
        "lineNumber": 4050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4051,
        "author": {
          "gitId": "-"
        },
        "content": "    * started a reference user manual"
      },
      {
        "lineNumber": 4052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4053,
        "author": {
          "gitId": "-"
        },
        "content": "    * new W0212 message for access to protected member from client code"
      },
      {
        "lineNumber": 4054,
        "author": {
          "gitId": "-"
        },
        "content": "      (close #14081)"
      },
      {
        "lineNumber": 4055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4056,
        "author": {
          "gitId": "-"
        },
        "content": "    * new W0105 and W0106 messages extracted from W0104 (statement seems"
      },
      {
        "lineNumber": 4057,
        "author": {
          "gitId": "-"
        },
        "content": "      to have no effect) respectively when the statement is actually string"
      },
      {
        "lineNumber": 4058,
        "author": {
          "gitId": "-"
        },
        "content": "      (that\u0027s sometimes used instead of comments for documentation) or an"
      },
      {
        "lineNumber": 4059,
        "author": {
          "gitId": "-"
        },
        "content": "      empty  statement generated by a useless semicolon"
      },
      {
        "lineNumber": 4060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4061,
        "author": {
          "gitId": "-"
        },
        "content": "    * reclassified W0302 to C0302"
      },
      {
        "lineNumber": 4062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4063,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix so that global messages are not anymore connected to the last"
      },
      {
        "lineNumber": 4064,
        "author": {
          "gitId": "-"
        },
        "content": "      analyzed module (close #10106)"
      },
      {
        "lineNumber": 4065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4066,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix some bugs related to local disabling of messages"
      },
      {
        "lineNumber": 4067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4068,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix cr/lf pb when generating the rc file on windows platforms"
      },
      {
        "lineNumber": 4069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4071,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.11.0?"
      },
      {
        "lineNumber": 4072,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4074,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2006-04-19"
      },
      {
        "lineNumber": 4075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4076,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix crash caused by the exceptions checker in some case"
      },
      {
        "lineNumber": 4077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4078,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix some E1101 false positive with abstract method or classes defining"
      },
      {
        "lineNumber": 4079,
        "author": {
          "gitId": "-"
        },
        "content": "      __getattr__"
      },
      {
        "lineNumber": 4080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4081,
        "author": {
          "gitId": "-"
        },
        "content": "    * dirty fix to avoid \"_socketobject\" has not \"connect\" member. The actual"
      },
      {
        "lineNumber": 4082,
        "author": {
          "gitId": "-"
        },
        "content": "      problem is that astng isn\u0027t able to understand the code used to create"
      },
      {
        "lineNumber": 4083,
        "author": {
          "gitId": "-"
        },
        "content": "      socket.socket object with exec"
      },
      {
        "lineNumber": 4084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4085,
        "author": {
          "gitId": "-"
        },
        "content": "    * added an option in the similarity checker to ignore docstrings, enabled"
      },
      {
        "lineNumber": 4086,
        "author": {
          "gitId": "-"
        },
        "content": "      by default"
      },
      {
        "lineNumber": 4087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4088,
        "author": {
          "gitId": "-"
        },
        "content": "    * included patch from Benjamin Niemann to allow block level"
      },
      {
        "lineNumber": 4089,
        "author": {
          "gitId": "-"
        },
        "content": "      enabling/disabling of messages"
      },
      {
        "lineNumber": 4090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4092,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.10.0?"
      },
      {
        "lineNumber": 4093,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4095,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2006-03-06"
      },
      {
        "lineNumber": 4096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4097,
        "author": {
          "gitId": "-"
        },
        "content": "    * WARNING, this release include some configuration changes (see below),"
      },
      {
        "lineNumber": 4098,
        "author": {
          "gitId": "-"
        },
        "content": "      so you may have to check and update your own configuration file(s) if"
      },
      {
        "lineNumber": 4099,
        "author": {
          "gitId": "-"
        },
        "content": "      you use one"
      },
      {
        "lineNumber": 4100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4101,
        "author": {
          "gitId": "-"
        },
        "content": "    * this release require the 0.15 version of astng or superior (it will save"
      },
      {
        "lineNumber": 4102,
        "author": {
          "gitId": "-"
        },
        "content": "      you a lot of pylint crashes...)"
      },
      {
        "lineNumber": 4103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4104,
        "author": {
          "gitId": "-"
        },
        "content": "    * W0705 has been reclassified to E0701, and is now detecting more"
      },
      {
        "lineNumber": 4105,
        "author": {
          "gitId": "-"
        },
        "content": "      inheriting problem, and a false positive when empty except clause is"
      },
      {
        "lineNumber": 4106,
        "author": {
          "gitId": "-"
        },
        "content": "      following an Exception catch has been fixed (close #10422)"
      },
      {
        "lineNumber": 4107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4108,
        "author": {
          "gitId": "-"
        },
        "content": "    * E0212 and E0214 (metaclass/class method should have mcs/cls as first"
      },
      {
        "lineNumber": 4109,
        "author": {
          "gitId": "-"
        },
        "content": "      argument have been reclassified to C0202 and C0203 since this not as"
      },
      {
        "lineNumber": 4110,
        "author": {
          "gitId": "-"
        },
        "content": "      well established as \"self\" for instance method (E0213)"
      },
      {
        "lineNumber": 4111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4112,
        "author": {
          "gitId": "-"
        },
        "content": "    * W0224 has been reclassified into F0220 (failed to resolve interfaces"
      },
      {
        "lineNumber": 4113,
        "author": {
          "gitId": "-"
        },
        "content": "      implemented by a class)"
      },
      {
        "lineNumber": 4114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4115,
        "author": {
          "gitId": "-"
        },
        "content": "    * a new typecheck checker, introducing the following checks:"
      },
      {
        "lineNumber": 4116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4117,
        "author": {
          "gitId": "-"
        },
        "content": "        - E1101, access to unexistent member (implements #10430), remove"
      },
      {
        "lineNumber": 4118,
        "author": {
          "gitId": "-"
        },
        "content": "          the need of E0201 and so some options has been moved from the"
      },
      {
        "lineNumber": 4119,
        "author": {
          "gitId": "-"
        },
        "content": "          classes checker to this one"
      },
      {
        "lineNumber": 4120,
        "author": {
          "gitId": "-"
        },
        "content": "        - E1102, calling a non callable object"
      },
      {
        "lineNumber": 4121,
        "author": {
          "gitId": "-"
        },
        "content": "        - E1111 and W1111 when an assignment is done on a function call but the"
      },
      {
        "lineNumber": 4122,
        "author": {
          "gitId": "-"
        },
        "content": "          inferred function returns None (implements #10431)"
      },
      {
        "lineNumber": 4123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4124,
        "author": {
          "gitId": "-"
        },
        "content": "    * change in the base checker:"
      },
      {
        "lineNumber": 4125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4126,
        "author": {
          "gitId": "-"
        },
        "content": "        - checks module level and instance attribute names (new const-rgx"
      },
      {
        "lineNumber": 4127,
        "author": {
          "gitId": "-"
        },
        "content": "          and attr-rgx configuration option) (implements #10209  and"
      },
      {
        "lineNumber": 4128,
        "author": {
          "gitId": "-"
        },
        "content": "          #10440)"
      },
      {
        "lineNumber": 4129,
        "author": {
          "gitId": "-"
        },
        "content": "        - list comprehension and generator expression variables have their"
      },
      {
        "lineNumber": 4130,
        "author": {
          "gitId": "-"
        },
        "content": "          own regular expression  (the inlinevar-rgx option) (implements"
      },
      {
        "lineNumber": 4131,
        "author": {
          "gitId": "-"
        },
        "content": "          #9146)"
      },
      {
        "lineNumber": 4132,
        "author": {
          "gitId": "-"
        },
        "content": "        - the C0101 check with its min-name-length option has"
      },
      {
        "lineNumber": 4133,
        "author": {
          "gitId": "-"
        },
        "content": "          been removed (this can be specified in the regxp after all...)"
      },
      {
        "lineNumber": 4134,
        "author": {
          "gitId": "-"
        },
        "content": "        - W0103 and W0121 are now handled by the variables checker"
      },
      {
        "lineNumber": 4135,
        "author": {
          "gitId": "-"
        },
        "content": "          (W0103 is now W0603 and W0604 has been splitted into different messages)"
      },
      {
        "lineNumber": 4136,
        "author": {
          "gitId": "-"
        },
        "content": "        - W0131 and W0132 messages  have been reclassified to C0111 and"
      },
      {
        "lineNumber": 4137,
        "author": {
          "gitId": "-"
        },
        "content": "          C0112 respectively"
      },
      {
        "lineNumber": 4138,
        "author": {
          "gitId": "-"
        },
        "content": "        - new W0104 message on statement without effect"
      },
      {
        "lineNumber": 4139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4140,
        "author": {
          "gitId": "-"
        },
        "content": "    * regexp support for dummy-variables (dummy-variables-rgx option"
      },
      {
        "lineNumber": 4141,
        "author": {
          "gitId": "-"
        },
        "content": "      replace dummy-variables) (implements #10027)"
      },
      {
        "lineNumber": 4142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4143,
        "author": {
          "gitId": "-"
        },
        "content": "    * better global statement handling, see W0602, W0603, W0604 messages"
      },
      {
        "lineNumber": 4144,
        "author": {
          "gitId": "-"
        },
        "content": "      (implements #10344 and #10236)"
      },
      {
        "lineNumber": 4145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4146,
        "author": {
          "gitId": "-"
        },
        "content": "    * --debug-mode option, disabling all checkers without error message"
      },
      {
        "lineNumber": 4147,
        "author": {
          "gitId": "-"
        },
        "content": "      and filtering others to only display error"
      },
      {
        "lineNumber": 4148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4149,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed some R0201 (method could be a function) false positive"
      },
      {
        "lineNumber": 4150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4152,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.9.0?"
      },
      {
        "lineNumber": 4153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4155,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2006-01-10"
      },
      {
        "lineNumber": 4156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4157,
        "author": {
          "gitId": "-"
        },
        "content": "    * a lot of updates to follow astng 0.14 API changes, so install"
      },
      {
        "lineNumber": 4158,
        "author": {
          "gitId": "-"
        },
        "content": "      logilab-astng  0.14 or greater before using this version of pylint"
      },
      {
        "lineNumber": 4159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4160,
        "author": {
          "gitId": "-"
        },
        "content": "    * checker number 10 ! newstyle will search for problems regarding old"
      },
      {
        "lineNumber": 4161,
        "author": {
          "gitId": "-"
        },
        "content": "      style / new style classes usage problems (rely on astng 0.14 new"
      },
      {
        "lineNumber": 4162,
        "author": {
          "gitId": "-"
        },
        "content": "      style detection feature)"
      },
      {
        "lineNumber": 4163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4164,
        "author": {
          "gitId": "-"
        },
        "content": "    * new \u0027load-plugins\u0027 options to load additional pylint plugins (usable"
      },
      {
        "lineNumber": 4165,
        "author": {
          "gitId": "-"
        },
        "content": "      from the command line or from a configuration file) (implements"
      },
      {
        "lineNumber": 4166,
        "author": {
          "gitId": "-"
        },
        "content": "      #10031)"
      },
      {
        "lineNumber": 4167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4168,
        "author": {
          "gitId": "-"
        },
        "content": "    * check if a \"pylintrc\" file exists in the current working directory"
      },
      {
        "lineNumber": 4169,
        "author": {
          "gitId": "-"
        },
        "content": "      before using the one specified in the PYLINTRC environment variable"
      },
      {
        "lineNumber": 4170,
        "author": {
          "gitId": "-"
        },
        "content": "      or the default ~/.pylintrc or /etc/pylintrc"
      },
      {
        "lineNumber": 4171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4172,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed W0706 (Identifier used to raise an exception is assigned...)"
      },
      {
        "lineNumber": 4173,
        "author": {
          "gitId": "-"
        },
        "content": "      false positive and reraising a catched exception instance"
      },
      {
        "lineNumber": 4174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4175,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed E0611 (No name get in module blabla) false positive when accessing"
      },
      {
        "lineNumber": 4176,
        "author": {
          "gitId": "-"
        },
        "content": "      to a class\u0027__dict__"
      },
      {
        "lineNumber": 4177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4178,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed some E0203 (\"access to member before its definition\") false"
      },
      {
        "lineNumber": 4179,
        "author": {
          "gitId": "-"
        },
        "content": "      positive"
      },
      {
        "lineNumber": 4180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4181,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed E0214 (\"metaclass method first argument should be mcs) false"
      },
      {
        "lineNumber": 4182,
        "author": {
          "gitId": "-"
        },
        "content": "      positive with staticmethod used on a metaclass"
      },
      {
        "lineNumber": 4183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4184,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed packaging which was missing the test/regrtest_data directory"
      },
      {
        "lineNumber": 4185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4186,
        "author": {
          "gitId": "-"
        },
        "content": "    * W0212 (method could be a function) has been reclassified in the"
      },
      {
        "lineNumber": 4187,
        "author": {
          "gitId": "-"
        },
        "content": "      REFACTOR category as R0201, and is no more considerer when a method"
      },
      {
        "lineNumber": 4188,
        "author": {
          "gitId": "-"
        },
        "content": "      overrides an abstract method from an ancestor class"
      },
      {
        "lineNumber": 4189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4190,
        "author": {
          "gitId": "-"
        },
        "content": "    * include module name in W0401 (wildcard import), as suggested by"
      },
      {
        "lineNumber": 4191,
        "author": {
          "gitId": "-"
        },
        "content": "      Amaury"
      },
      {
        "lineNumber": 4192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4193,
        "author": {
          "gitId": "-"
        },
        "content": "    * when using the \u0027--parseable\u0027, path are written relative to the"
      },
      {
        "lineNumber": 4194,
        "author": {
          "gitId": "-"
        },
        "content": "      current working directory if in a sub-directory of it (#9789)"
      },
      {
        "lineNumber": 4195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4196,
        "author": {
          "gitId": "-"
        },
        "content": "    * \u0027pylint --version\u0027 shows logilab-astng and logilab-common versions"
      },
      {
        "lineNumber": 4197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4198,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed pylint.el to handle space in file names"
      },
      {
        "lineNumber": 4199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4200,
        "author": {
          "gitId": "-"
        },
        "content": "    * misc lint style fixes"
      },
      {
        "lineNumber": 4201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4203,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.8.1?"
      },
      {
        "lineNumber": 4204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4207,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2005-11-07"
      },
      {
        "lineNumber": 4208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4209,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix \"deprecated module\" false positive when the code imports a"
      },
      {
        "lineNumber": 4210,
        "author": {
          "gitId": "-"
        },
        "content": "      module whose name starts with a deprecated module\u0027s name (close"
      },
      {
        "lineNumber": 4211,
        "author": {
          "gitId": "-"
        },
        "content": "      #10061)"
      },
      {
        "lineNumber": 4212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4213,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix \"module has no name __dict__\" false positive (close #10039)"
      },
      {
        "lineNumber": 4214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4215,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix \"access to undefined variable __path__\" false positive (close"
      },
      {
        "lineNumber": 4216,
        "author": {
          "gitId": "-"
        },
        "content": "      #10065)"
      },
      {
        "lineNumber": 4217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4218,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix \"explicit return in __init__\" false positive when return is"
      },
      {
        "lineNumber": 4219,
        "author": {
          "gitId": "-"
        },
        "content": "      actually in an inner function (close #10075)"
      },
      {
        "lineNumber": 4220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4222,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.8.0?"
      },
      {
        "lineNumber": 4223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4225,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2005-10-21"
      },
      {
        "lineNumber": 4226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4227,
        "author": {
          "gitId": "-"
        },
        "content": "    * check names imported from a module exists in the module (E0611),"
      },
      {
        "lineNumber": 4228,
        "author": {
          "gitId": "-"
        },
        "content": "      patch contributed by Amaury Forgeot d\u0027Arc"
      },
      {
        "lineNumber": 4229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4230,
        "author": {
          "gitId": "-"
        },
        "content": "    * print a warning (W0212) for methods that could be a function"
      },
      {
        "lineNumber": 4231,
        "author": {
          "gitId": "-"
        },
        "content": "      (implements #9100)"
      },
      {
        "lineNumber": 4232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4233,
        "author": {
          "gitId": "-"
        },
        "content": "    * new --defining-attr-methods option on classes checker"
      },
      {
        "lineNumber": 4234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4235,
        "author": {
          "gitId": "-"
        },
        "content": "    * new --acquired-members option on the classes checker, used when"
      },
      {
        "lineNumber": 4236,
        "author": {
          "gitId": "-"
        },
        "content": "      --zope\u003dyes to avoid false positive on acquired attributes (listed"
      },
      {
        "lineNumber": 4237,
        "author": {
          "gitId": "-"
        },
        "content": "      using this new option) (close #8616)"
      },
      {
        "lineNumber": 4238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4239,
        "author": {
          "gitId": "-"
        },
        "content": "    * generate one E0602 for each use of an undefined variable"
      },
      {
        "lineNumber": 4240,
        "author": {
          "gitId": "-"
        },
        "content": "      (previously, only one for the first use but not for the following)"
      },
      {
        "lineNumber": 4241,
        "author": {
          "gitId": "-"
        },
        "content": "      (implements #1000)"
      },
      {
        "lineNumber": 4242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4243,
        "author": {
          "gitId": "-"
        },
        "content": "    * make profile option saveable"
      },
      {
        "lineNumber": 4244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4245,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix Windows .bat file,  patch contributed by Amaury Forgeot d\u0027Arc"
      },
      {
        "lineNumber": 4246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4247,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix one more false positive for E0601 (access before definition)"
      },
      {
        "lineNumber": 4248,
        "author": {
          "gitId": "-"
        },
        "content": "      with for loop such as \"for i in range(10): print i\" (test"
      },
      {
        "lineNumber": 4249,
        "author": {
          "gitId": "-"
        },
        "content": "      func_noerror_defined_and_used_on_same_line)"
      },
      {
        "lineNumber": 4250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4251,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix false positive for E0201 (undefined member) when accessing to"
      },
      {
        "lineNumber": 4252,
        "author": {
          "gitId": "-"
        },
        "content": "      __name__ on a class object"
      },
      {
        "lineNumber": 4253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4254,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix astng checkers traversal order"
      },
      {
        "lineNumber": 4255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4256,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix bug in format checker when parsing a file from a platform"
      },
      {
        "lineNumber": 4257,
        "author": {
          "gitId": "-"
        },
        "content": "      using different new line characters (close #9239)"
      },
      {
        "lineNumber": 4258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4259,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix encoding detection regexp"
      },
      {
        "lineNumber": 4260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4261,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix --rcfile handling (support for --rcfile\u003dfile, close #9590)"
      },
      {
        "lineNumber": 4262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4264,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.7.0?"
      },
      {
        "lineNumber": 4265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4268,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2005-05-27"
      },
      {
        "lineNumber": 4269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4270,
        "author": {
          "gitId": "-"
        },
        "content": "    * WARNING: pylint is no longer a logilab subpackage. Users may have to"
      },
      {
        "lineNumber": 4271,
        "author": {
          "gitId": "-"
        },
        "content": "      manually remove the old logilab/pylint directory."
      },
      {
        "lineNumber": 4272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4273,
        "author": {
          "gitId": "-"
        },
        "content": "    * introduce a new --additional-builtins option to handle user defined"
      },
      {
        "lineNumber": 4274,
        "author": {
          "gitId": "-"
        },
        "content": "      builtins"
      },
      {
        "lineNumber": 4275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4276,
        "author": {
          "gitId": "-"
        },
        "content": "    * --reports option has now -r as short alias, and -i for --include-ids"
      },
      {
        "lineNumber": 4277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4278,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix a bug in the variables checker which may causing some false"
      },
      {
        "lineNumber": 4279,
        "author": {
          "gitId": "-"
        },
        "content": "      positives when variables are defined and used within the same"
      },
      {
        "lineNumber": 4280,
        "author": {
          "gitId": "-"
        },
        "content": "      statement (test func_noerror_defined_and_used_on_same_line)"
      },
      {
        "lineNumber": 4281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4282,
        "author": {
          "gitId": "-"
        },
        "content": "    * this time, real fix of the \"disable-msg in the config file\" problem,"
      },
      {
        "lineNumber": 4283,
        "author": {
          "gitId": "-"
        },
        "content": "      test added to unittest_lint"
      },
      {
        "lineNumber": 4284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4285,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix bug with --list-messages and python -OO"
      },
      {
        "lineNumber": 4286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4287,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix possible false positive for W0201"
      },
      {
        "lineNumber": 4288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4290,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.6.4?"
      },
      {
        "lineNumber": 4291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4294,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2005-04-14"
      },
      {
        "lineNumber": 4295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4296,
        "author": {
          "gitId": "-"
        },
        "content": "    * allow to parse files without extension when a path is given on the"
      },
      {
        "lineNumber": 4297,
        "author": {
          "gitId": "-"
        },
        "content": "      command line (test noext)"
      },
      {
        "lineNumber": 4298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4299,
        "author": {
          "gitId": "-"
        },
        "content": "    * don\u0027t fail if we are unable to read an inline option  (e.g. inside a"
      },
      {
        "lineNumber": 4300,
        "author": {
          "gitId": "-"
        },
        "content": "      module), just produce an information message (test func_i0010)"
      },
      {
        "lineNumber": 4301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4302,
        "author": {
          "gitId": "-"
        },
        "content": "    * new message E0103 for break or continue outside loop (close #8883,"
      },
      {
        "lineNumber": 4303,
        "author": {
          "gitId": "-"
        },
        "content": "      test func_continue_not_in_loop)"
      },
      {
        "lineNumber": 4304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4305,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix bug in the variables checker, causing non detection of some"
      },
      {
        "lineNumber": 4306,
        "author": {
          "gitId": "-"
        },
        "content": "      actual name error (close #8884, test"
      },
      {
        "lineNumber": 4307,
        "author": {
          "gitId": "-"
        },
        "content": "      func_nameerror_on_string_substitution)"
      },
      {
        "lineNumber": 4308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4309,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix bug in the classes checker which was making pylint crash if"
      },
      {
        "lineNumber": 4310,
        "author": {
          "gitId": "-"
        },
        "content": "      \"object\" is assigned in a class inheriting from it (test"
      },
      {
        "lineNumber": 4311,
        "author": {
          "gitId": "-"
        },
        "content": "      func_noerror_object_as_class_attribute)"
      },
      {
        "lineNumber": 4312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4313,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix problem with the similar checker when related options are"
      },
      {
        "lineNumber": 4314,
        "author": {
          "gitId": "-"
        },
        "content": "      defined in a configuration file"
      },
      {
        "lineNumber": 4315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4316,
        "author": {
          "gitId": "-"
        },
        "content": "    * new --generate-man option to generate pylint\u0027s man page (require the"
      },
      {
        "lineNumber": 4317,
        "author": {
          "gitId": "-"
        },
        "content": "      latest logilab.common (\u003e\u003d 0.9.3)"
      },
      {
        "lineNumber": 4318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4319,
        "author": {
          "gitId": "-"
        },
        "content": "    * packaged (generated...) man page"
      },
      {
        "lineNumber": 4320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4322,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.6.3?"
      },
      {
        "lineNumber": 4323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4325,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2005-02-24"
      },
      {
        "lineNumber": 4326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4327,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix scope problem which may cause false positive and true negative"
      },
      {
        "lineNumber": 4328,
        "author": {
          "gitId": "-"
        },
        "content": "      on E0602"
      },
      {
        "lineNumber": 4329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4330,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix problem with some options such as disable-msg causing error when"
      },
      {
        "lineNumber": 4331,
        "author": {
          "gitId": "-"
        },
        "content": "      they are coming from the configuration file"
      },
      {
        "lineNumber": 4332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4334,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.6.2?"
      },
      {
        "lineNumber": 4335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4338,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2005-02-16"
      },
      {
        "lineNumber": 4339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4340,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix false positive on E0201 (\"access to undefined member\") with"
      },
      {
        "lineNumber": 4341,
        "author": {
          "gitId": "-"
        },
        "content": "      metaclasses"
      },
      {
        "lineNumber": 4342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4343,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix false positive on E0203 (\"access to member before its"
      },
      {
        "lineNumber": 4344,
        "author": {
          "gitId": "-"
        },
        "content": "      definition\") when attributes are defined in a parent class"
      },
      {
        "lineNumber": 4345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4346,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix false positive on W0706 (\"identifier used to raise an exception"
      },
      {
        "lineNumber": 4347,
        "author": {
          "gitId": "-"
        },
        "content": "      assigned to...\")"
      },
      {
        "lineNumber": 4348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4349,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix interpretation of \"\\t\" as value for the indent-string"
      },
      {
        "lineNumber": 4350,
        "author": {
          "gitId": "-"
        },
        "content": "      configuration variable"
      },
      {
        "lineNumber": 4351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4352,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix --rcfile so that --rcfile\u003dpylintrc (only --rcfile pylintrc was"
      },
      {
        "lineNumber": 4353,
        "author": {
          "gitId": "-"
        },
        "content": "      working in earlier release)"
      },
      {
        "lineNumber": 4354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4355,
        "author": {
          "gitId": "-"
        },
        "content": "    * new raw checker example in the examples/ directory"
      },
      {
        "lineNumber": 4356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4358,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.6.1?"
      },
      {
        "lineNumber": 4359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4361,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2005-02-04"
      },
      {
        "lineNumber": 4362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4363,
        "author": {
          "gitId": "-"
        },
        "content": "    * new --rcfile option to specify the configuration file without the"
      },
      {
        "lineNumber": 4364,
        "author": {
          "gitId": "-"
        },
        "content": "      PYLINTRC environment variable"
      },
      {
        "lineNumber": 4365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4366,
        "author": {
          "gitId": "-"
        },
        "content": "    * added an example module for a custom pylint checker (see the"
      },
      {
        "lineNumber": 4367,
        "author": {
          "gitId": "-"
        },
        "content": "      example/ directory)"
      },
      {
        "lineNumber": 4368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4369,
        "author": {
          "gitId": "-"
        },
        "content": "    * some fixes to handle fixes in common 0.9.1 (should however still working"
      },
      {
        "lineNumber": 4370,
        "author": {
          "gitId": "-"
        },
        "content": "      with common 0.9.0, even if upgrade is recommended)"
      },
      {
        "lineNumber": 4371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4373,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.6.0?"
      },
      {
        "lineNumber": 4374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4376,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2005-01-20"
      },
      {
        "lineNumber": 4377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4378,
        "author": {
          "gitId": "-"
        },
        "content": "    * refix pylint emacs mode"
      },
      {
        "lineNumber": 4379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4380,
        "author": {
          "gitId": "-"
        },
        "content": "    * no more traceback when just typing \"pylint\""
      },
      {
        "lineNumber": 4381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4382,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix a bug which may cause crashes on resolving parent classes"
      },
      {
        "lineNumber": 4383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4384,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix problems with the format checker: don\u0027t chock on files"
      },
      {
        "lineNumber": 4385,
        "author": {
          "gitId": "-"
        },
        "content": "      containing multiple CR, avoid C0322, C0323, C0324 false positives"
      },
      {
        "lineNumber": 4386,
        "author": {
          "gitId": "-"
        },
        "content": "      with triple quoted string with quote inside"
      },
      {
        "lineNumber": 4387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4388,
        "author": {
          "gitId": "-"
        },
        "content": "    * correctly detect access to member defined latter in __init__ method"
      },
      {
        "lineNumber": 4389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4390,
        "author": {
          "gitId": "-"
        },
        "content": "    * now depends on common 0.8.1 to fix problem with interface resolution"
      },
      {
        "lineNumber": 4391,
        "author": {
          "gitId": "-"
        },
        "content": "      (close #8606)"
      },
      {
        "lineNumber": 4392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4393,
        "author": {
          "gitId": "-"
        },
        "content": "    * new --list-msgs option describing available checkers and their"
      },
      {
        "lineNumber": 4394,
        "author": {
          "gitId": "-"
        },
        "content": "      messages"
      },
      {
        "lineNumber": 4395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4396,
        "author": {
          "gitId": "-"
        },
        "content": "    * added windows specific documentation to the README file, contributed"
      },
      {
        "lineNumber": 4397,
        "author": {
          "gitId": "-"
        },
        "content": "      by Brian van den Broek"
      },
      {
        "lineNumber": 4398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4399,
        "author": {
          "gitId": "-"
        },
        "content": "    * updated doc/features.txt (actually this file is now generated using"
      },
      {
        "lineNumber": 4400,
        "author": {
          "gitId": "-"
        },
        "content": "      the --list-msgs option), more entries into the FAQ"
      },
      {
        "lineNumber": 4401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4402,
        "author": {
          "gitId": "-"
        },
        "content": "    * improved tests coverage"
      },
      {
        "lineNumber": 4403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4405,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.5.0?"
      },
      {
        "lineNumber": 4406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4408,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2004-10-19"
      },
      {
        "lineNumber": 4409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4410,
        "author": {
          "gitId": "-"
        },
        "content": "    * avoid importing analyzed modules !"
      },
      {
        "lineNumber": 4411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4412,
        "author": {
          "gitId": "-"
        },
        "content": "    * new Refactor and Convention message categories. Some Warnings have been"
      },
      {
        "lineNumber": 4413,
        "author": {
          "gitId": "-"
        },
        "content": "      remaped into those new categories"
      },
      {
        "lineNumber": 4414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4415,
        "author": {
          "gitId": "-"
        },
        "content": "    * added \"similar\", a tool to find copied and pasted lines of code,"
      },
      {
        "lineNumber": 4416,
        "author": {
          "gitId": "-"
        },
        "content": "      both using a specific command line tool and integrated as a"
      },
      {
        "lineNumber": 4417,
        "author": {
          "gitId": "-"
        },
        "content": "      pylint\u0027s checker"
      },
      {
        "lineNumber": 4418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4419,
        "author": {
          "gitId": "-"
        },
        "content": "    * imports checker may report import dependencies as a dot graph"
      },
      {
        "lineNumber": 4420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4421,
        "author": {
          "gitId": "-"
        },
        "content": "    * new checker regrouping most Refactor detection (with some new metrics)"
      },
      {
        "lineNumber": 4422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4423,
        "author": {
          "gitId": "-"
        },
        "content": "    * more command line options storable in the configuration file"
      },
      {
        "lineNumber": 4424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4425,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix bug with total / undocumented number of methods"
      },
      {
        "lineNumber": 4426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4428,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.4.2?"
      },
      {
        "lineNumber": 4429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4431,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2004-07-08"
      },
      {
        "lineNumber": 4432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4433,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix pylint emacs mode"
      },
      {
        "lineNumber": 4434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4435,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix classes checkers to handler twisted interfaces"
      },
      {
        "lineNumber": 4436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4438,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.4.1?"
      },
      {
        "lineNumber": 4439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4441,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2004-05-14"
      },
      {
        "lineNumber": 4442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4443,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix the setup.py script to allow bdist_winst (well, the generated"
      },
      {
        "lineNumber": 4444,
        "author": {
          "gitId": "-"
        },
        "content": "      installer has not been tested...) with the necessary"
      },
      {
        "lineNumber": 4445,
        "author": {
          "gitId": "-"
        },
        "content": "      logilab/__init__.py file"
      },
      {
        "lineNumber": 4446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4447,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix file naming convention as suggested by Andreas Amoroso"
      },
      {
        "lineNumber": 4448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4449,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix stupid crash bug with bad method names"
      },
      {
        "lineNumber": 4450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4452,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.4.0?"
      },
      {
        "lineNumber": 4453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4455,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2004-05-10"
      },
      {
        "lineNumber": 4456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4457,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix file path with --parsable"
      },
      {
        "lineNumber": 4458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4459,
        "author": {
          "gitId": "-"
        },
        "content": "    * --parsable option has been renamed to --parseable"
      },
      {
        "lineNumber": 4460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4461,
        "author": {
          "gitId": "-"
        },
        "content": "    * added patch from Andreas Amoroso to output message to files instead"
      },
      {
        "lineNumber": 4462,
        "author": {
          "gitId": "-"
        },
        "content": "      of standard output"
      },
      {
        "lineNumber": 4463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4464,
        "author": {
          "gitId": "-"
        },
        "content": "    * added Run to the list of correct variable names"
      },
      {
        "lineNumber": 4465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4466,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix variable names regexp and checking of local classes names"
      },
      {
        "lineNumber": 4467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4468,
        "author": {
          "gitId": "-"
        },
        "content": "    * some basic handling of metaclasses"
      },
      {
        "lineNumber": 4469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4470,
        "author": {
          "gitId": "-"
        },
        "content": "    * no-docstring-rgx apply now on classes too"
      },
      {
        "lineNumber": 4471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4472,
        "author": {
          "gitId": "-"
        },
        "content": "    * new option to specify a different regexp for methods than for"
      },
      {
        "lineNumber": 4473,
        "author": {
          "gitId": "-"
        },
        "content": "      functions"
      },
      {
        "lineNumber": 4474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4475,
        "author": {
          "gitId": "-"
        },
        "content": "    * do not display the evaluation report when no statements has been"
      },
      {
        "lineNumber": 4476,
        "author": {
          "gitId": "-"
        },
        "content": "      analysed"
      },
      {
        "lineNumber": 4477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4478,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed crash with a class nested in a method"
      },
      {
        "lineNumber": 4479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4480,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed format checker to deals with triple quoted string and"
      },
      {
        "lineNumber": 4481,
        "author": {
          "gitId": "-"
        },
        "content": "      lines with code and comment mixed"
      },
      {
        "lineNumber": 4482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4483,
        "author": {
          "gitId": "-"
        },
        "content": "    * use logilab.common.ureports to layout reports"
      },
      {
        "lineNumber": 4484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4486,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.3.3?"
      },
      {
        "lineNumber": 4487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4489,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2004-02-17"
      },
      {
        "lineNumber": 4490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4491,
        "author": {
          "gitId": "-"
        },
        "content": "    * added a parsable text output, used when the --parsable option is"
      },
      {
        "lineNumber": 4492,
        "author": {
          "gitId": "-"
        },
        "content": "      provided"
      },
      {
        "lineNumber": 4493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4494,
        "author": {
          "gitId": "-"
        },
        "content": "    * added an emacs mode using this output, available in the distrib\u0027s"
      },
      {
        "lineNumber": 4495,
        "author": {
          "gitId": "-"
        },
        "content": "      elisp directory"
      },
      {
        "lineNumber": 4496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4497,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed some typos in messages"
      },
      {
        "lineNumber": 4498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4499,
        "author": {
          "gitId": "-"
        },
        "content": "    * change include-ids options to yn, and allow it to be in the"
      },
      {
        "lineNumber": 4500,
        "author": {
          "gitId": "-"
        },
        "content": "      configuration file"
      },
      {
        "lineNumber": 4501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4502,
        "author": {
          "gitId": "-"
        },
        "content": "    * do not chock on corrupted stats files"
      },
      {
        "lineNumber": 4503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4504,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed bug in the format checker which may stop pylint execution"
      },
      {
        "lineNumber": 4505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4506,
        "author": {
          "gitId": "-"
        },
        "content": "    * provide scripts for unix and windows to wrap the minimal pylint tk"
      },
      {
        "lineNumber": 4507,
        "author": {
          "gitId": "-"
        },
        "content": "      gui"
      },
      {
        "lineNumber": 4508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4511,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.3.2?"
      },
      {
        "lineNumber": 4512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4514,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2003-12-23"
      },
      {
        "lineNumber": 4515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4516,
        "author": {
          "gitId": "-"
        },
        "content": "    * html-escape messages in the HTML reporter (bug reported by Juergen"
      },
      {
        "lineNumber": 4517,
        "author": {
          "gitId": "-"
        },
        "content": "      Hermann)"
      },
      {
        "lineNumber": 4518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4519,
        "author": {
          "gitId": "-"
        },
        "content": "    * added \"TODO\" to the list of default note tags"
      },
      {
        "lineNumber": 4520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4521,
        "author": {
          "gitId": "-"
        },
        "content": "    * added \"rexec\" to the list of default deprecated modules"
      },
      {
        "lineNumber": 4522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4523,
        "author": {
          "gitId": "-"
        },
        "content": "    * fixed typos in some messages"
      },
      {
        "lineNumber": 4524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4527,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.3.1?"
      },
      {
        "lineNumber": 4528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4531,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2003-12-05"
      },
      {
        "lineNumber": 4532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4533,
        "author": {
          "gitId": "-"
        },
        "content": "    * bug fix in format and classes checkers"
      },
      {
        "lineNumber": 4534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4535,
        "author": {
          "gitId": "-"
        },
        "content": "    * remove print statement from imports checkers"
      },
      {
        "lineNumber": 4536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4537,
        "author": {
          "gitId": "-"
        },
        "content": "    * provide a simple tk gui, essentially useful for windows users"
      },
      {
        "lineNumber": 4538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4541,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.3.0?"
      },
      {
        "lineNumber": 4542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4545,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2003-11-20"
      },
      {
        "lineNumber": 4546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4547,
        "author": {
          "gitId": "-"
        },
        "content": "    * new exceptions checker, checking for string exception and empty"
      },
      {
        "lineNumber": 4548,
        "author": {
          "gitId": "-"
        },
        "content": "      except clauses."
      },
      {
        "lineNumber": 4549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4550,
        "author": {
          "gitId": "-"
        },
        "content": "    * imports checker checks for reimport of modules"
      },
      {
        "lineNumber": 4551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4552,
        "author": {
          "gitId": "-"
        },
        "content": "    * classes checker checks for calls to ancestor\u0027s __init__ and abstract"
      },
      {
        "lineNumber": 4553,
        "author": {
          "gitId": "-"
        },
        "content": "      method not overridden. It doesn\u0027t complain anymore for unused import in"
      },
      {
        "lineNumber": 4554,
        "author": {
          "gitId": "-"
        },
        "content": "      __init__ files, and provides a new option ignore-interface-methods,"
      },
      {
        "lineNumber": 4555,
        "author": {
          "gitId": "-"
        },
        "content": "      useful when you\u0027re using zope Interface implementation in your project"
      },
      {
        "lineNumber": 4556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4557,
        "author": {
          "gitId": "-"
        },
        "content": "    * base checker checks for black listed builtins call (controlled by the"
      },
      {
        "lineNumber": 4558,
        "author": {
          "gitId": "-"
        },
        "content": "      bad-functions option) and for use of * and **"
      },
      {
        "lineNumber": 4559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4560,
        "author": {
          "gitId": "-"
        },
        "content": "    * format checker checks for use of \u003c\u003e and \"l\" as long int marker"
      },
      {
        "lineNumber": 4561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4562,
        "author": {
          "gitId": "-"
        },
        "content": "    * major internal API changes"
      },
      {
        "lineNumber": 4563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4564,
        "author": {
          "gitId": "-"
        },
        "content": "    * use the rewrite of astng, based on compiler.ast"
      },
      {
        "lineNumber": 4565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4566,
        "author": {
          "gitId": "-"
        },
        "content": "    * added unique id for messages, as suggested by Wolfgang Grafen"
      },
      {
        "lineNumber": 4567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4568,
        "author": {
          "gitId": "-"
        },
        "content": "    * added unique id for reports"
      },
      {
        "lineNumber": 4569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4570,
        "author": {
          "gitId": "-"
        },
        "content": "    * can take multiple modules or files as argument"
      },
      {
        "lineNumber": 4571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4572,
        "author": {
          "gitId": "-"
        },
        "content": "    * new options command line options : --disable-msg, --enable-msg,"
      },
      {
        "lineNumber": 4573,
        "author": {
          "gitId": "-"
        },
        "content": "      --help-msg, --include-ids, --reports, --disable-report, --cache-size"
      },
      {
        "lineNumber": 4574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4575,
        "author": {
          "gitId": "-"
        },
        "content": "    * --version shows the version of the python interpreter"
      },
      {
        "lineNumber": 4576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4577,
        "author": {
          "gitId": "-"
        },
        "content": "    * removed some options which are now replaced by [en|dis]able-msg, or"
      },
      {
        "lineNumber": 4578,
        "author": {
          "gitId": "-"
        },
        "content": "      disable-report"
      },
      {
        "lineNumber": 4579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4580,
        "author": {
          "gitId": "-"
        },
        "content": "    * read disable-msg and enable-msg options in source files (should be"
      },
      {
        "lineNumber": 4581,
        "author": {
          "gitId": "-"
        },
        "content": "      in comments on the top of the file, in the form"
      },
      {
        "lineNumber": 4582,
        "author": {
          "gitId": "-"
        },
        "content": "      \"# pylint: disable-msg\u003dW0402\""
      },
      {
        "lineNumber": 4583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4584,
        "author": {
          "gitId": "-"
        },
        "content": "    * new message for modules importing themselves instead of the \"cyclic"
      },
      {
        "lineNumber": 4585,
        "author": {
          "gitId": "-"
        },
        "content": "      import\" message"
      },
      {
        "lineNumber": 4586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4587,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix bug with relative and cyclic imports"
      },
      {
        "lineNumber": 4588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4589,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix bug in imports checker (cycle was not always detected)"
      },
      {
        "lineNumber": 4590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4591,
        "author": {
          "gitId": "-"
        },
        "content": "    * still fixes in format checker : don\u0027t check comment and docstring,"
      },
      {
        "lineNumber": 4592,
        "author": {
          "gitId": "-"
        },
        "content": "      check first line after an indent"
      },
      {
        "lineNumber": 4593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4594,
        "author": {
          "gitId": "-"
        },
        "content": "    * black and white list now apply to all identifiers, not only"
      },
      {
        "lineNumber": 4595,
        "author": {
          "gitId": "-"
        },
        "content": "      variables,  so changed the configuration option from"
      },
      {
        "lineNumber": 4596,
        "author": {
          "gitId": "-"
        },
        "content": "      (good|bad)-variable-names to (good|bad)-names"
      },
      {
        "lineNumber": 4597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4598,
        "author": {
          "gitId": "-"
        },
        "content": "    * added string, rexec and Bastion to the default list of deprecated"
      },
      {
        "lineNumber": 4599,
        "author": {
          "gitId": "-"
        },
        "content": "      modules"
      },
      {
        "lineNumber": 4600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4601,
        "author": {
          "gitId": "-"
        },
        "content": "    * do not print redefinition warning for function/class/method defined"
      },
      {
        "lineNumber": 4602,
        "author": {
          "gitId": "-"
        },
        "content": "      in mutually exclusive branches"
      },
      {
        "lineNumber": 4603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4606,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.2.1?"
      },
      {
        "lineNumber": 4607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4610,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2003-10-10"
      },
      {
        "lineNumber": 4611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4612,
        "author": {
          "gitId": "-"
        },
        "content": "    * added some documentation, fixed some typos"
      },
      {
        "lineNumber": 4613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4614,
        "author": {
          "gitId": "-"
        },
        "content": "    * set environment variable PYLINT_IMPORT to 1 during pylint execution."
      },
      {
        "lineNumber": 4615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4616,
        "author": {
          "gitId": "-"
        },
        "content": "    * check that variables \"imported\" using the global statement exist"
      },
      {
        "lineNumber": 4617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4618,
        "author": {
          "gitId": "-"
        },
        "content": "    * indentation problems are now warning instead of errors"
      },
      {
        "lineNumber": 4619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4620,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix checkers.initialize to try to load all files with a known python"
      },
      {
        "lineNumber": 4621,
        "author": {
          "gitId": "-"
        },
        "content": "      extension (patch from wrobell)"
      },
      {
        "lineNumber": 4622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4623,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix a bunch of messages"
      },
      {
        "lineNumber": 4624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4625,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix sample configuration file"
      },
      {
        "lineNumber": 4626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4627,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix the bad-construction option"
      },
      {
        "lineNumber": 4628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4629,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix encoding checker"
      },
      {
        "lineNumber": 4630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4631,
        "author": {
          "gitId": "-"
        },
        "content": "    * fix format checker"
      },
      {
        "lineNumber": 4632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4634,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.2.0?"
      },
      {
        "lineNumber": 4635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4638,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2003-09-12"
      },
      {
        "lineNumber": 4639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4640,
        "author": {
          "gitId": "-"
        },
        "content": "    * new source encoding / FIXME checker (pep 263)"
      },
      {
        "lineNumber": 4641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4642,
        "author": {
          "gitId": "-"
        },
        "content": "    * new --zope option which trigger Zope import. Useful to check Zope"
      },
      {
        "lineNumber": 4643,
        "author": {
          "gitId": "-"
        },
        "content": "      products code."
      },
      {
        "lineNumber": 4644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4645,
        "author": {
          "gitId": "-"
        },
        "content": "    * new --comment option which enable the evaluation note comment"
      },
      {
        "lineNumber": 4646,
        "author": {
          "gitId": "-"
        },
        "content": "      (disabled by default)."
      },
      {
        "lineNumber": 4647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4648,
        "author": {
          "gitId": "-"
        },
        "content": "    * a ton of bug fixes"
      },
      {
        "lineNumber": 4649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4650,
        "author": {
          "gitId": "-"
        },
        "content": "    * easy functional test infrastructure"
      },
      {
        "lineNumber": 4651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4653,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.1.2?"
      },
      {
        "lineNumber": 4654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4657,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2003-06-18"
      },
      {
        "lineNumber": 4658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4659,
        "author": {
          "gitId": "-"
        },
        "content": "    * bug fix release"
      },
      {
        "lineNumber": 4660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4661,
        "author": {
          "gitId": "-"
        },
        "content": "    * remove dependency to pyreverse"
      },
      {
        "lineNumber": 4662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4664,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.1.1?"
      },
      {
        "lineNumber": 4665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4668,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2003-06-01"
      },
      {
        "lineNumber": 4669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4670,
        "author": {
          "gitId": "-"
        },
        "content": "    * much more functionalities !"
      },
      {
        "lineNumber": 4671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4673,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s New in Pylint 0.1?"
      },
      {
        "lineNumber": 4674,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4676,
        "author": {
          "gitId": "-"
        },
        "content": "Release date: 2003-05-19"
      },
      {
        "lineNumber": 4677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4678,
        "author": {
          "gitId": "-"
        },
        "content": "    * initial release"
      }
    ],
    "authorContributionMap": {
      "Enji Cooper": 2,
      "Andy Palmer": 4,
      "Anubhav": 4,
      "Athos Ribeiro": 2,
      "Claudiu Popa": 8,
      "-": 4652,
      "Ashley Whetter": 4,
      "Wes Turner": 2
    }
  },
  {
    "path": "doc/how_tos/plugins.rst",
    "fileType": "rst",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".. -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "How To Write a Pylint Plugin"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Pylint provides support for writing two types of extensions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "First, there is the concept of **checkers**,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "which can be used for finding problems in your code."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Secondly, there is also the concept of **transform plugin**,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "which represents a way through which the inference and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "the capabilities of Pylint can be enhanced"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "and tailored to a particular module, library of framework."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "In general, a plugin is a module which should have a function ``register``,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "which takes an instance of ``pylint.lint.PyLinter`` as input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Enji Cooper"
        },
        "content": "A plugin can optionally define a function, ``load_configuration``,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "which takes an instance of ``pylint.lint.PyLinter`` as input. This"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "function is called after Pylint loads configuration from configuration"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "file and command line interface. This function should load additional"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "plugin specific configuration to Pylint."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "So a basic hello-world plugin can be implemented as:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".. sourcecode:: python"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  # Inside hello_plugin.py"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  def register(linter):"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Enji Cooper"
        },
        "content": "    print(\u0027Hello world\u0027)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "We can run this plugin by placing this module in the PYTHONPATH and invoking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "**pylint** as:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".. sourcecode:: bash"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  $ pylint -E --load-plugins hello_plugin foo.py"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  Hello world"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "We can extend hello-world plugin to ignore some specific names using"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "``load_configuration`` function:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. sourcecode:: python"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  # Inside hello_plugin.py"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  def register(linter):"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Enji Cooper"
        },
        "content": "    print(\u0027Hello world\u0027)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  def load_configuration(linter):"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    name_checker \u003d get_checker(linter, NameChecker)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    # We consider as good names of variables Hello and World"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    name_checker.config.good_names +\u003d (\u0027Hello\u0027, \u0027World\u0027)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    # We ignore bin directory"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.config.black_list +\u003d (\u0027bin\u0027,)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Depending if we need a **transform plugin** or a **checker**, this might not"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "be enough. For the former, this is enough to declare the module as a plugin,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "but in the case of the latter, we need to register our checker with the linter"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "object, by calling the following inside the ``register`` function::"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(OurChecker(linter))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "For more information on writing a checker see :ref:`write_a_checker`."
      }
    ],
    "authorContributionMap": {
      "Enji Cooper": 3,
      "-": 62
    }
  },
  {
    "path": "doc/whatsnew/2.5.rst",
    "fileType": "rst",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "**************************"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " What\u0027s New in Pylint 2.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**************************"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":Release: 2.5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":Date: TBC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Summary -- Release highlights"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "New checkers"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "* A new check ``assert-on-string-literal`` was added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anubhav"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "  This check is emitted whenever **pylint** finds an assert statement"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "  with a string literal as its first argument. Such assert statements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "  are probably unintended as they will always pass."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anubhav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* A new check ``f-string-without-interpolation`` was added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  This check is emitted whenever **pylint** detects the use of an"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  f-string without having any interpolated values in it, which means"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  that the f-string can be a normal string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Multiple checks for invalid return types of protocol functions were added:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-bool-returned``: ``__bool__`` did not return a bool"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-index-returned``: ``__index__`` did not return an integer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-repr-returned)``: ``__repr__`` did not return a string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-str-returned)``: ``__str__`` did not return a string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-bytes-returned)``: ``__bytes__`` did not return a string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-hash-returned)``: ``__hash__`` did not return an integer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-length-hint-returned)``: ``__length_hint__`` did not return a non-negative integer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-format-returned)``: ``__format__`` did not return a string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-getnewargs-returned)``: ``__getnewargs__`` did not return a tuple"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   * ``invalid-getnewargs-ex-returned)``: ``__getnewargs_ex__`` did not return a tuple of the form (tuple, dict)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "* A new check ``inconsistent-quotes`` was added."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "  This check is emitted when quotes delimiters (\" and \u0027) are not used"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "  consistently throughout a module.  It makes allowances for avoiding"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "  unnecessary escaping, allowing, for example, ``\"Don\u0027t error\"`` in a module in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "  which single-quotes otherwise delimit strings so that the single quote in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "  ``Don\u0027t`` doesn\u0027t need to be escaped."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Other Changes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Don\u0027t emit ``line-too-long`` for multilines when a"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  `pylint:disable\u003dline-too-long` comment stands at their end."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  For example the following code will not trigger any ``line-too-long`` message::"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    def example():"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "      \"\"\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "      This is a very very very long line within a docstring that should trigger a pylint C0301 error line-too-long"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "      Even spread on multiple lines, the disable command is still effective on very very very, maybe too much long docstring"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \"\"\"#pylint: disable\u003dline-too-long"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Configuration can be read from a setup.cfg or pyproject.toml file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  in the current directory."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  A setup.cfg must prepend pylintrc section names with ``pylint.``,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  for example ``[pylint.MESSAGES CONTROL]``."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  A pyproject.toml file must prepend section names with ``tool.pylint.``,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  for example ``[tool.pylint.\u0027MESSAGES CONTROL\u0027]``."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  These files can also be passed in on the command line."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Add new good-names-rgx and bad-names-rgx to enable white-/blacklisting of regular expressions"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "To enable better handling of whitelisting/blacklisting names, we added two new config options: good-names-rgxs: a comma-"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "separated list of regexes, that if a name matches will be exempt of naming-checking. bad-names-rgxs: a comma-"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "separated list of regexes, that if a name matches will be always marked as a blacklisted name."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Mutable ``collections.*`` are now flagged as dangerous defaults."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Add new --fail-under flag for setting the threshold for the score to fail overall tests. If the score is over the fail-under threshold, pylint will complete SystemExit with value 0 to indicate no errors."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "* Add a new check (non-str-assignment-to-dunder-name) to ensure that only strings are assigned to ``__name__`` attributes"
      }
    ],
    "authorContributionMap": {
      "Andy Palmer": 2,
      "Anubhav": 6,
      "-": 68,
      "Wes Turner": 8
    }
  },
  {
    "path": "examples/pylintrc",
    "fileType": "pylintrc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "[MASTER]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# A comma-separated list of package or module names from where C extensions may"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# be loaded. Extensions are loading into the active Python interpreter and may"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# run arbitrary code."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "extension-pkg-whitelist\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Add files or directories to the blacklist. They should be base names, not"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# paths."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ignore\u003dCVS"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Add files or directories matching the regex patterns to the blacklist. The"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# regex matches against base names, not paths."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-patterns\u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Python code to execute, usually for sys.path manipulation such as"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# pygtk.require()."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "#init-hook\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# number of processors available to use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "jobs\u003d1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Control the amount of potential inferred values when inferring a single"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# object. This can help the performance when dealing with large functions or"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# complex, nested conditions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "limit-inference-results\u003d100"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# List of plugins (as comma separated values of python module names) to load,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# usually to register additional checkers."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "load-plugins\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# Pickle collected data for later comparisons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "persistent\u003dyes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Specify a configuration file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "#rcfile\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "# When enabled, pylint would attempt to guess common misconfiguration and emit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "# user-friendly hints instead of false-positive error messages."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "suggestion-mode\u003dyes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "# Allow loading of arbitrary C extensions. Extensions are imported into the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "# active Python interpreter and may run arbitrary code."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "unsafe-load-any-extension\u003dno"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[MESSAGES CONTROL]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "# Only show warnings with the listed confidence levels. Leave empty to show"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "confidence\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "# Disable the message, report, category or checker with the given id(s). You"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "# can either give multiple identifiers separated by comma (,) or put this"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "# option multiple times (only on the command line, not in the configuration"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "# file where it should appear only once). You can also use \"--disable\u003dall\" to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "# disable everything first and then reenable specific checks. For example, if"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "# you want to run only the similarities checker, you can use \"--disable\u003dall"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "# --enable\u003dsimilarities\". If you want to run only the classes checker, but have"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "# no Warning level messages displayed, use \"--disable\u003dall --enable\u003dclasses"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "# --disable\u003dW\"."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "disable\u003dprint-statement,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        parameter-unpacking,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        unpacking-in-except,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        old-raise-syntax,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        backtick,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        long-suffix,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        old-ne-operator,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        old-octal-literal,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        import-star-module-level,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        non-ascii-bytes-literal,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        raw-checker-failed,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        bad-inline-option,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        locally-disabled,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        file-ignored,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        suppressed-message,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        useless-suppression,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        deprecated-pragma,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        use-symbolic-message-instead,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        apply-builtin,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        basestring-builtin,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        buffer-builtin,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        cmp-builtin,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        coerce-builtin,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        execfile-builtin,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        file-builtin,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        long-builtin,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        raw_input-builtin,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        reduce-builtin,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        standarderror-builtin,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        unicode-builtin,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        xrange-builtin,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        coerce-method,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        delslice-method,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getslice-method,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setslice-method,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        no-absolute-import,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        old-division,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        dict-iter-method,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        dict-view-method,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        next-method-called,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        metaclass-assignment,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        indexing-exception,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        raising-string,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        reload-builtin,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        oct-method,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        hex-method,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        nonzero-method,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        cmp-method,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        input-builtin,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        round-builtin,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        intern-builtin,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        unichr-builtin,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        map-builtin-not-iterating,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        zip-builtin-not-iterating,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        range-builtin-not-iterating,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        filter-builtin-not-iterating,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        using-cmp-argument,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        eq-without-hash,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        div-method,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        idiv-method,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        rdiv-method,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        exception-message-attribute,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        invalid-str-codec,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        sys-max-int,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        bad-python3-import,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        deprecated-string-function,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        deprecated-str-translate-call,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        deprecated-itertools-function,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        deprecated-types-field,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        next-method-defined,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        dict-items-not-iterating,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        dict-keys-not-iterating,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        dict-values-not-iterating,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deprecated-operator-function,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        deprecated-urllib-function,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        xreadlines-attribute,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        deprecated-sys-function,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        exception-escape,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        comprehension-escape"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "# Enable the message, report, category or checker with the given id(s). You can"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "# either give multiple identifier separated by comma (,) or put this option"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "# multiple time (only on the command line, not in the configuration file where"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "# it should appear only once). See also the \"--disable\" option for examples."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "enable\u003dc-extension-no-member"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[REPORTS]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "# Python expression which should return a score less than or equal to 10. You"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "# have access to the variables \u0027error\u0027, \u0027warning\u0027, \u0027refactor\u0027, and \u0027convention\u0027"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "# which contain the number of messages in each category, as well as \u0027statement\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "# which is the total number of statements analyzed. This score is used by the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "# global evaluation report (RP0004)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "evaluation\u003d10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "# Template used to display messages. This is a python new-style format string"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "# used to format the message information. See doc for all details."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#msg-template\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "# Set the output format. Available formats are text, parseable, colorized, json"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "# and msvs (visual studio). You can also give a reporter class, e.g."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "# mypackage.mymodule.MyReporterClass."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "output-format\u003dtext"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether to display a full report or only the messages."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "reports\u003dno"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "# Activate the evaluation score."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "score\u003dyes"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "[REFACTORING]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of nested blocks for function / method body"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "max-nested-blocks\u003d5"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "# Complete name of functions that never returns. When checking for"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "# inconsistent-return-statements if a never returning function is called then"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "# it will be considered as an explicit return statement and no message will be"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "# printed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "never-returning-functions\u003dsys.exit"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[TYPECHECK]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "# List of decorators that produce context managers, such as"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "# contextlib.contextmanager. Add to this list to register other decorators that"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "# produce valid context managers."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "contextmanager-decorators\u003dcontextlib.contextmanager"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "# List of members which are set dynamically and missed by pylint inference"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "# system, and so shouldn\u0027t trigger E1101 when accessed. Python regular"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "# expressions are accepted."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "generated-members\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether missing members accessed in mixin class should be ignored. A"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "# mixin class is detected if its name ends with \"mixin\" (case insensitive)."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-mixin-members\u003dyes"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether to warn about missing members when the owner of the attribute"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "# is inferred to be None."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-none\u003dyes"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "# This flag controls whether pylint should warn about no-member and similar"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "# checks whenever an opaque object is returned when inferring. The inference"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "# can return multiple potential results while evaluating a Python object, but"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "# some branches might not be evaluated, which results in partial inference. In"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "# that case, it might be useful to still emit no-member and other checks for"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "# the rest of the inferred objects."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-on-opaque-inference\u003dyes"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "# List of class names for which member attributes should not be checked (useful"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "# for classes with dynamically set attributes). This supports the use of"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "# qualified names."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "ignored-classes\u003doptparse.Values,thread._local,_thread._local"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "# List of module names for which member attributes should not be checked"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "# (useful for modules/projects where namespaces are manipulated during runtime"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "# and thus existing member attributes cannot be deduced by static analysis). It"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "# supports qualified module names, as well as Unix pattern matching."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "ignored-modules\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "# Show a hint with possible names when a member name was not found. The aspect"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "# of finding the hint is based on edit distance."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "missing-member-hint\u003dyes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "# The minimum edit distance a name should have in order to be considered a"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "# similar match for a missing member name."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "missing-member-hint-distance\u003d1"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "# The total number of similar names that should be taken in consideration when"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "# showing a hint for a missing member."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "missing-member-max-choices\u003d1"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "# List of decorators that change the signature of a decorated function."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "signature-mutators\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "[LOGGING]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "# Format style used to check logging format string. `old` means using %"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "# formatting, while `new` is for `{}` formatting."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "logging-format-style\u003dold"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "# Logging modules to check that the string format arguments are in logging"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "# function parameter format."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "logging-modules\u003dlogging"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "[SIMILARITIES]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "# Ignore comments when computing similarities."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-comments\u003dyes"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "# Ignore docstrings when computing similarities."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-docstrings\u003dyes"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "# Ignore imports when computing similarities."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-imports\u003dno"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "# Minimum lines number of a similarity."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "min-similarity-lines\u003d4"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[VARIABLES]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "# List of additional names supposed to be defined in builtins. Remember that"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "# you should avoid defining new builtins when possible."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "additional-builtins\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether unused global variables should be treated as a violation."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "allow-global-unused-variables\u003dyes"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "# List of strings which can identify a callback function by name. A callback"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "# name must start or end with one of those strings."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "callbacks\u003dcb_,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "          _cb"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "# A regular expression matching the name of dummy variables (i.e. expected to"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "# not be used)."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "dummy-variables-rgx\u003d_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "# Argument names that match this expression will be ignored. Default to name"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "# with leading underscore."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "ignored-argument-names\u003d_.*|^ignored_|^unused_"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether we should check for unused import in __init__ files."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "init-import\u003dno"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "# List of qualified module names which can have objects that can redefine"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "# builtins."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "redefining-builtins-modules\u003dsix.moves,past.builtins,future.builtins,builtins,io"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[SPELLING]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "# Limits count of emitted suggestions for spelling mistakes."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "max-spelling-suggestions\u003d4"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "# Spelling dictionary name. Available dictionaries: none. To make it work,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "# install the python-enchant package."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "spelling-dict\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "# List of comma separated words that should not be checked."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "spelling-ignore-words\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "# A path to a file that contains the private dictionary; one word per line."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "spelling-private-dict-file\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether to store unknown words to the private dictionary (see the"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "# --spelling-private-dict-file option) instead of raising a message."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "spelling-store-unknown-words\u003dno"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[FORMAT]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "# Expected format of line ending, e.g. empty (any line ending), LF or CRLF."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "expected-line-ending-format\u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "# Regexp for a line that is allowed to be longer than the limit."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-long-lines\u003d^\\s*(# )?\u003c?https?://\\S+\u003e?$"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "# Number of spaces of indent required inside a hanging or continued line."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "indent-after-paren\u003d4"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "# tab)."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "indent-string\u003d\u0027    \u0027"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of characters on a single line."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "max-line-length\u003d100"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of lines in a module."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "max-module-lines\u003d1000"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "# List of optional constructs for which whitespace checking is disabled. `dict-"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\\n222: 2}."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "# `trailing-comma` allows a space between comma and closing bracket: (a, )."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "# `empty-line` allows space-only lines."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "no-space-check\u003dtrailing-comma,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "               dict-separator"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "# Allow the body of a class to be on the same line as the declaration if body"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "# contains single statement."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "single-line-class-stmt\u003dno"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "# Allow the body of an if to be on the same line as the test if there is no"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "# else."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "single-line-if-stmt\u003dno"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "[BASIC]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct argument names."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "argument-naming-style\u003dsnake_case"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct argument names. Overrides argument-"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "# naming-style."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "#argument-rgx\u003d"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct attribute names."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "attr-naming-style\u003dsnake_case"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct attribute names. Overrides attr-naming-"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "# style."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#attr-rgx\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "# Bad variable names which should always be refused, separated by a comma."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "bad-names\u003dfoo,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "          bar,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "          baz,"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "          toto,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "          tutu,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "          tata"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct class attribute names."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "class-attribute-naming-style\u003dany"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct class attribute names. Overrides class-"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "# attribute-naming-style."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "#class-attribute-rgx\u003d"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct class names."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "class-naming-style\u003dPascalCase"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct class names. Overrides class-naming-"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "# style."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "#class-rgx\u003d"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct constant names."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "const-naming-style\u003dUPPER_CASE"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct constant names. Overrides const-naming-"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "# style."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "#const-rgx\u003d"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "# Minimum line length for functions/classes that require docstrings, shorter"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "# ones are exempt."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "docstring-min-length\u003d-1"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct function names."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "function-naming-style\u003dsnake_case"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct function names. Overrides function-"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "# naming-style."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "#function-rgx\u003d"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "# Good variable names which should always be accepted, separated by a comma."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "good-names\u003di,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "           j,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "           k,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "           ex,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "           Run,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "           _"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "# Include a hint for the correct naming format with invalid-name."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "include-naming-hint\u003dno"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct inline iteration names."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "inlinevar-naming-style\u003dany"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct inline iteration names. Overrides"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "# inlinevar-naming-style."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "#inlinevar-rgx\u003d"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct method names."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "method-naming-style\u003dsnake_case"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct method names. Overrides method-naming-"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "# style."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "#method-rgx\u003d"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct module names."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "module-naming-style\u003dsnake_case"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct module names. Overrides module-naming-"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "# style."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "#module-rgx\u003d"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "# Colon-delimited sets of names that determine each other\u0027s naming style when"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "# the name regexes allow several styles."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "name-group\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression which should only match function or class names that do"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "# not require a docstring."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "no-docstring-rgx\u003d^_"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "# List of decorators that produce properties, such as abc.abstractproperty. Add"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "# to this list to register other decorators that produce valid properties."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "# These decorators are taken in consideration only for invalid-name."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "property-classes\u003dabc.abstractproperty"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming style matching correct variable names."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "variable-naming-style\u003dsnake_case"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct variable names. Overrides variable-"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "# naming-style."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "#variable-rgx\u003d"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "[MISCELLANEOUS]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "# List of note tags to take in consideration, separated by a comma."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "notes\u003dFIXME,"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "      XXX,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "      TODO"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "[STRING]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "# This flag controls whether the implicit-str-concat-in-sequence should"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "# generate a warning on implicit string concatenation in sequences defined over"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "# several lines."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "check-str-concat-over-line-jumps\u003dno"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "# This flag controls whether inconsistent-quotes generates a warning when the"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "# character used as a quote delimiter is used inconsistently within a module."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "check-quote-consistency\u003dno"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "[IMPORTS]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "# Allow wildcard imports from modules that define __all__."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "allow-wildcard-with-all\u003dno"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "# Analyse import fallback blocks. This can be used to support both Python 2 and"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "# 3 compatible code, which means that the block might have code that exists"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "# only in one or another interpreter, leading to false positives when analysed."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "analyse-fallback-blocks\u003dno"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "# Deprecated modules which should not be used, separated by a comma."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "deprecated-modules\u003doptparse,tkinter.tix"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "# Create a graph of external dependencies in the given file (report RP0402 must"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "# not be disabled)."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "ext-import-graph\u003d"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "# Create a graph of every (i.e. internal and external) dependencies in the"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "# given file (report RP0402 must not be disabled)."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "import-graph\u003d"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "# Create a graph of internal dependencies in the given file (report RP0402 must"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "# not be disabled)."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "int-import-graph\u003d"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "# Force import order to recognize a module as part of the standard"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "# compatibility libraries."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "known-standard-library\u003d"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "# Force import order to recognize a module as part of a third party library."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "known-third-party\u003denchant"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "# Couples of modules and preferred modules, separated by a comma."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "preferred-modules\u003d"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "[CLASSES]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "# List of method names used to declare (i.e. assign) instance attributes."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "defining-attr-methods\u003d__init__,"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "                      __new__,"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "                      setUp,"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "                      __post_init__"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "# List of member names, which should be excluded from the protected access"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "# warning."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "exclude-protected\u003d_asdict,"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "                  _fields,"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "                  _replace,"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "                  _source,"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "                  _make"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "# List of valid names for the first argument in a class method."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "valid-classmethod-first-arg\u003dcls"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "# List of valid names for the first argument in a metaclass class method."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "valid-metaclass-classmethod-first-arg\u003dcls"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "[DESIGN]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of arguments for function / method."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "max-args\u003d5"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of attributes for a class (see R0902)."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "max-attributes\u003d7"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of boolean expressions in an if statement (see R0916)."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "max-bool-expr\u003d5"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of branch for function / method body."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "max-branches\u003d12"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of locals for function / method body."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "max-locals\u003d15"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of parents for a class (see R0901)."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "max-parents\u003d7"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of public methods for a class (see R0904)."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "max-public-methods\u003d20"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of return / yield for function / method body."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "max-returns\u003d6"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of statements in function / method body."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "max-statements\u003d50"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "# Minimum number of public methods for a class (see R0903)."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "min-public-methods\u003d2"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "[EXCEPTIONS]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "# Exceptions that will emit a warning when being caught. Defaults to"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "# \"BaseException, Exception\"."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "overgeneral-exceptions\u003dBaseException,"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "                       Exception"
      }
    ],
    "authorContributionMap": {
      "-": 577,
      "Wes Turner": 4
    }
  },
  {
    "path": "pylint/checkers/base.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2006-2016 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2010 Daniel Harding \u003cdharding@gmail.com\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012-2014 Google, Inc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2013-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Brett Cannon \u003cbrett@python.org\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Nick Bastin \u003cnick.bastin@gmail.com\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Michael Kefeder \u003coss@multiwave.ch\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Dmitry Pribysh \u003cdmand@yandex.ru\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Stephane Wirtel \u003cstephane@wirtel.be\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Cosmin Poieana \u003ccmin@ropython.org\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Florian Bruhin \u003cme@the-compiler.org\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Radu Ciorba \u003cradu@devrandom.ro\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016, 2018 Jakub Wilk \u003cjwilk@jwilk.net\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016-2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Glenn Matthews \u003cglenn@e-dad.net\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Elias Dorneles \u003celiasdorneles@gmail.com\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Ashley Whetter \u003cashley@awhetter.co.uk\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Yannack \u003cyannack@users.noreply.github.com\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Alex Jurkiewicz \u003calex@jurkiewi.cz\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Jacques Kvam \u003cjwkvam@gmail.com\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 ttenhoeve-aa \u003cttenhoeve@appannie.com\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 hippo91 \u003cguillaume.peillex@gmail.com\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Nick Drozd \u003cnicholasdrozd@gmail.com\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Steven M. Vascellaro \u003csvascellaro@gmail.com\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Mike Frysinger \u003cvapier@gmail.com\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 ssolanki \u003csushobhitsolanki@gmail.com\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Sushobhit \u003c31987769+sushobhit27@users.noreply.github.com\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Chris Lamb \u003cchris@chris-lamb.co.uk\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 glmdgrielson \u003c32415403+glmdgrielson@users.noreply.github.com\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ville Skyttä \u003cville.skytta@upcloud.com\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"basic checker for Python code\"\"\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import builtins"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import collections"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import itertools"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import re"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import sys"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "from typing import Pattern"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid.bases"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid.scoped_nodes"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.arguments import CallSite"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import pylint.utils as lint_utils"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint import checkers, exceptions, interfaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers import utils"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers.utils import is_property_deleter, is_property_setter"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.reporters.ureports import nodes as reporter_nodes"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "class NamingStyle:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    # It may seem counterintuitive that single naming style"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    # has multiple \"accepted\" forms of regular expressions,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    # but we need to special-case stuff like dunder names"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    # in method names."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_NAME_RGX \u003d None  # type: Pattern[str]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    MOD_NAME_RGX \u003d None  # type: Pattern[str]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    CONST_NAME_RGX \u003d None  # type: Pattern[str]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    COMP_VAR_RGX \u003d None  # type: Pattern[str]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    DEFAULT_NAME_RGX \u003d None  # type: Pattern[str]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_ATTRIBUTE_RGX \u003d None  # type: Pattern[str]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @classmethod"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    def get_regex(cls, name_type):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \"module\": cls.MOD_NAME_RGX,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \"const\": cls.CONST_NAME_RGX,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \"class\": cls.CLASS_NAME_RGX,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \"function\": cls.DEFAULT_NAME_RGX,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            \"method\": cls.DEFAULT_NAME_RGX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \"attr\": cls.DEFAULT_NAME_RGX,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            \"argument\": cls.DEFAULT_NAME_RGX,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            \"variable\": cls.DEFAULT_NAME_RGX,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            \"class_attribute\": cls.CLASS_ATTRIBUTE_RGX,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            \"inlinevar\": cls.COMP_VAR_RGX,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }[name_type]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "class SnakeCaseStyle(NamingStyle):"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Regex rules for snake_case naming style.\"\"\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_NAME_RGX \u003d re.compile(\"[a-z_][a-z0-9_]+$\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    MOD_NAME_RGX \u003d re.compile(\"[a-z_][a-z0-9_]*$\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    CONST_NAME_RGX \u003d re.compile(\"([a-z_][a-z0-9_]*|__.*__)$\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    COMP_VAR_RGX \u003d re.compile(\"[a-z_][a-z0-9_]*$\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    DEFAULT_NAME_RGX \u003d re.compile("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \"([a-z_][a-z0-9_]{2,}|_[a-z0-9_]*|__[a-z][a-z0-9_]+__)$\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_ATTRIBUTE_RGX \u003d re.compile(r\"([a-z_][a-z0-9_]{2,}|__.*__)$\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "class CamelCaseStyle(NamingStyle):"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Regex rules for camelCase naming style.\"\"\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_NAME_RGX \u003d re.compile(\"[a-z_][a-zA-Z0-9]+$\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    MOD_NAME_RGX \u003d re.compile(\"[a-z_][a-zA-Z0-9]*$\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    CONST_NAME_RGX \u003d re.compile(\"([a-z_][A-Za-z0-9]*|__.*__)$\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    COMP_VAR_RGX \u003d re.compile(\"[a-z_][A-Za-z0-9]*$\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    DEFAULT_NAME_RGX \u003d re.compile(\"([a-z_][a-zA-Z0-9]{2,}|__[a-z][a-zA-Z0-9_]+__)$\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_ATTRIBUTE_RGX \u003d re.compile(r\"([a-z_][A-Za-z0-9]{2,}|__.*__)$\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "class PascalCaseStyle(NamingStyle):"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Regex rules for PascalCase naming style.\"\"\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_NAME_RGX \u003d re.compile(\"[A-Z_][a-zA-Z0-9]+$\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    MOD_NAME_RGX \u003d re.compile(\"[A-Z_][a-zA-Z0-9]+$\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    CONST_NAME_RGX \u003d re.compile(\"([A-Z_][A-Za-z0-9]*|__.*__)$\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    COMP_VAR_RGX \u003d re.compile(\"[A-Z_][a-zA-Z0-9]+$\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    DEFAULT_NAME_RGX \u003d re.compile(\"([A-Z_][a-zA-Z0-9]{2,}|__[a-z][a-zA-Z0-9_]+__)$\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_ATTRIBUTE_RGX \u003d re.compile(\"[A-Z_][a-zA-Z0-9]{2,}$\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "class UpperCaseStyle(NamingStyle):"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Regex rules for UPPER_CASE naming style.\"\"\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_NAME_RGX \u003d re.compile(\"[A-Z_][A-Z0-9_]+$\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    MOD_NAME_RGX \u003d re.compile(\"[A-Z_][A-Z0-9_]+$\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    CONST_NAME_RGX \u003d re.compile(\"([A-Z_][A-Z0-9_]*|__.*__)$\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    COMP_VAR_RGX \u003d re.compile(\"[A-Z_][A-Z0-9_]+$\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    DEFAULT_NAME_RGX \u003d re.compile(\"([A-Z_][A-Z0-9_]{2,}|__[a-z][a-zA-Z0-9_]+__)$\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASS_ATTRIBUTE_RGX \u003d re.compile(\"[A-Z_][A-Z0-9_]{2,}$\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "class AnyStyle(NamingStyle):"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @classmethod"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    def get_regex(cls, name_type):"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return re.compile(\".*\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "NAMING_STYLES \u003d {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    \"snake_case\": SnakeCaseStyle,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \"camelCase\": CamelCaseStyle,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \"PascalCase\": PascalCaseStyle,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    \"UPPER_CASE\": UpperCaseStyle,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    \"any\": AnyStyle,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "# do not require a doc string on private/system methods"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "NO_REQUIRED_DOC_RGX \u003d re.compile(\"^_\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "REVERSED_PROTOCOL_METHOD \u003d \"__reversed__\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "SEQUENCE_PROTOCOL_METHODS \u003d (\"__getitem__\", \"__len__\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "REVERSED_METHODS \u003d (SEQUENCE_PROTOCOL_METHODS, (REVERSED_PROTOCOL_METHOD,))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "TYPECHECK_COMPARISON_OPERATORS \u003d frozenset((\"is\", \"is not\", \"\u003d\u003d\", \"!\u003d\", \"in\", \"not in\"))"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "LITERAL_NODE_TYPES \u003d (astroid.Const, astroid.Dict, astroid.List, astroid.Set)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "UNITTEST_CASE \u003d \"unittest.case\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "BUILTINS \u003d builtins.__name__"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "TYPE_QNAME \u003d \"%s.type\" % BUILTINS"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "ABC_METACLASSES \u003d {\"_py_abc.ABCMeta\", \"abc.ABCMeta\"}  # Python 3.7+,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "# Name categories that are always consistent with all naming conventions."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "EXEMPT_NAME_CATEGORIES \u003d {\"exempt\", \"ignore\"}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "# A mapping from qname -\u003e symbol, to be used when generating messages"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "# about dangerous default values as arguments"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "DEFAULT_ARGUMENT_SYMBOLS \u003d dict("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    zip("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        [\".\".join([BUILTINS, x]) for x in (\"set\", \"dict\", \"list\")],"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        [\"set()\", \"{}\", \"[]\"],"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    **{"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        x: \"%s()\" % x"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        for x in ("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            \"collections.deque\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            \"collections.ChainMap\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            \"collections.Counter\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            \"collections.OrderedDict\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            \"collections.defaultdict\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            \"collections.UserDict\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            \"collections.UserList\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "REVERSED_COMPS \u003d {\"\u003c\": \"\u003e\", \"\u003c\u003d\": \"\u003e\u003d\", \"\u003e\": \"\u003c\", \"\u003e\u003d\": \"\u003c\u003d\"}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "COMPARISON_OPERATORS \u003d frozenset((\"\u003d\u003d\", \"!\u003d\", \"\u003c\", \"\u003e\", \"\u003c\u003d\", \"\u003e\u003d\"))"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "# List of methods which can be redefined"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "REDEFINABLE_METHODS \u003d frozenset((\"__module__\",))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "TYPING_FORWARD_REF_QNAME \u003d \"typing.ForwardRef\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "def _redefines_import(node):"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Detect that the given node (AssignName) is inside an"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    exception handler and redefines an import from the tryexcept body."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns True if the node redefines an import, False otherwise."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    current \u003d node"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    while current and not isinstance(current.parent, astroid.ExceptHandler):"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        current \u003d current.parent"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    if not current or not utils.error_of_type(current.parent, ImportError):"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    try_block \u003d current.parent.parent"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    for import_node in try_block.nodes_of_class((astroid.ImportFrom, astroid.Import)):"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, alias in import_node.names:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if alias:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                if alias \u003d\u003d node.name:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                    return True"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            elif name \u003d\u003d node.name:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "def in_loop(node):"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"return True if the node is inside a kind of for loop\"\"\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    parent \u003d node.parent"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    while parent is not None:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            parent,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.For,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.ListComp,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.SetComp,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.DictComp,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.GeneratorExp,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        parent \u003d parent.parent"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "def in_nested_list(nested_list, obj):"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"return true if the object is an element of \u003cnested_list\u003e or of a nested"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    for elmt in nested_list:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(elmt, (list, tuple)):"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            if in_nested_list(elmt, obj):"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        elif elmt \u003d\u003d obj:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_break_loop_node(break_node):"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns the loop node that holds the break node in arguments."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    Args:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        break_node (astroid.Break): the break node of interest."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        astroid.For or astroid.While: the loop node holding the break node."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    loop_nodes \u003d (astroid.For, astroid.While)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    parent \u003d break_node.parent"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    while not isinstance(parent, loop_nodes) or break_node in getattr("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        parent, \"orelse\", []"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    ):"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        break_node \u003d parent"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        parent \u003d parent.parent"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if parent is None:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            break"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    return parent"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "def _loop_exits_early(loop):"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns true if a loop may ends up in a break statement."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    Args:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        loop (astroid.For, astroid.While): the loop node inspected."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        bool: True if the loop may ends up in a break statement, False otherwise."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    loop_nodes \u003d (astroid.For, astroid.While)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    definition_nodes \u003d (astroid.FunctionDef, astroid.ClassDef)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    inner_loop_nodes \u003d ["
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        _node"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        for _node in loop.nodes_of_class(loop_nodes, skip_klass\u003ddefinition_nodes)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        if _node !\u003d loop"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    return any("
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        _node"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        for _node in loop.nodes_of_class(astroid.Break, skip_klass\u003ddefinition_nodes)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        if _get_break_loop_node(_node) not in inner_loop_nodes"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_multi_naming_match(match, node_type, confidence):"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    return ("
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        match is not None"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        and match.lastgroup is not None"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        and match.lastgroup not in EXEMPT_NAME_CATEGORIES"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        and (node_type !\u003d \"method\" or confidence !\u003d interfaces.INFERENCE_FAILURE)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "BUILTIN_PROPERTY \u003d \"builtins.property\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_properties(config):"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Returns a tuple of property classes and names."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    Property classes are fully qualified, such as \u0027abc.abstractproperty\u0027 and"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    property names are the actual names, such as \u0027abstract_property\u0027."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    property_classes \u003d {BUILTIN_PROPERTY}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    property_names \u003d set()  # Not returning \u0027property\u0027, it has its own check."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    if config is not None:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        property_classes.update(config.property_classes)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        property_names.update("
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            (prop.rsplit(\".\", 1)[-1] for prop in config.property_classes)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    return property_classes, property_names"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "def _determine_function_name_type(node, config\u003dNone):"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Determine the name type whose regex the a function\u0027s name should match."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    :param node: A function node."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    :type node: astroid.node_classes.NodeNG"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    :param config: Configuration from which to pull additional property classes."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    :type config: :class:`optparse.Values`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    :returns: One of (\u0027function\u0027, \u0027method\u0027, \u0027attr\u0027)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    :rtype: str"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    property_classes, property_names \u003d _get_properties(config)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    if not node.is_method():"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"function\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    if is_property_setter(node) or is_property_deleter(node):"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        # If the function is decorated using the prop_method.{setter,getter}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        # form, treat it like an attribute as well."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"attr\""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    if node.decorators:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        decorators \u003d node.decorators.nodes"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        decorators \u003d []"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    for decorator in decorators:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        # If the function is a property (decorated with @property"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        # or @abc.abstractproperty), the name type is \u0027attr\u0027."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(decorator, astroid.Name) or ("
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(decorator, astroid.Attribute)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            and decorator.attrname in property_names"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d utils.safe_infer(decorator)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred and inferred.qname() in property_classes:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"attr\""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"method\""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "def _has_abstract_methods(node):"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    Determine if the given `node` has abstract methods."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    The methods should be made abstract by decorating them"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    with `abc` decorators."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    return len(utils.unimplemented_abstract_methods(node)) \u003e 0"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "def report_by_type_stats(sect, stats, _):"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"make a report of"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    * percentage of different types documented"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    * percentage of different types with a bad name"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    # percentage of different types documented and/or with a bad name"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    nice_stats \u003d {}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    for node_type in (\"module\", \"class\", \"method\", \"function\"):"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            total \u003d stats[node_type]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        except KeyError:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            raise exceptions.EmptyReportError()"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        nice_stats[node_type] \u003d {}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        if total !\u003d 0:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                documented \u003d total - stats[\"undocumented_\" + node_type]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                percent \u003d (documented * 100.0) / total"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                nice_stats[node_type][\"percent_documented\"] \u003d \"%.2f\" % percent"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            except KeyError:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                nice_stats[node_type][\"percent_documented\"] \u003d \"NC\""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                percent \u003d (stats[\"badname_\" + node_type] * 100.0) / total"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                nice_stats[node_type][\"percent_badname\"] \u003d \"%.2f\" % percent"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            except KeyError:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                nice_stats[node_type][\"percent_badname\"] \u003d \"NC\""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    lines \u003d (\"type\", \"number\", \"old number\", \"difference\", \"%documented\", \"%badname\")"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    for node_type in (\"module\", \"class\", \"method\", \"function\"):"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        new \u003d stats[node_type]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        lines +\u003d ("
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            node_type,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            str(new),"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            \"NC\","
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            \"NC\","
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            nice_stats[node_type].get(\"percent_documented\", \"0\"),"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            nice_stats[node_type].get(\"percent_badname\", \"0\"),"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    sect.append(reporter_nodes.Table(children\u003dlines, cols\u003d6, rheaders\u003d1))"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "def redefined_by_decorator(node):"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"return True if the object is a method redefined via decorator."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    For example:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        @property"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        def x(self): return self._x"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        @x.setter"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        def x(self, value): self._x \u003d value"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    if node.decorators:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        for decorator in node.decorators.nodes:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(decorator, astroid.Attribute)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "                and getattr(decorator.expr, \"name\", None) \u003d\u003d node.name"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "class _BasicChecker(checkers.BaseChecker):"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d interfaces.IAstroidChecker"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"basic\""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "class BasicErrorChecker(_BasicChecker):"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0100\": ("
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__init__ method is a generator\","
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            \"init-is-generator\","
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the special class method __init__ is turned into a \""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "            \"generator by a yield in its body.\","
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0101\": ("
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Explicit return in __init__\","
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "            \"return-in-init\","
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the special class method __init__ has an explicit \""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            \"return value.\","
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0102\": ("
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "            \"%s already defined line %s\","
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            \"function-redefined\","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a function / class / method is redefined.\","
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0103\": ("
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            \"%r not properly in loop\","
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "            \"not-in-loop\","
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when break or continue keywords are used outside a loop.\","
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0104\": ("
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Return outside function\","
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            \"return-outside-function\","
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when a \"return\" statement is found outside a function or method.\u0027,"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0105\": ("
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Yield outside function\","
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "            \"yield-outside-function\","
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when a \"yield\" statement is found outside a function or method.\u0027,"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0106\": ("
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Return with argument inside generator\","
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "            \"return-arg-in-generator\","
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when a \"return\" statement with an argument is found \u0027"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            \"outside in a generator function or method (e.g. with some \""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027\"yield\" statements).\u0027,"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"maxversion\": (3, 3)},"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0107\": ("
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use of the non-existent %s operator\","
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "            \"nonexistent-operator\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when you attempt to use the C-style pre-increment or \""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pre-decrement operator -- and ++, which doesn\u0027t exist in Python.\","
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0108\": ("
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Duplicate argument name %s in function definition\","
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "            \"duplicate-argument-name\","
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Duplicate argument names in function definitions are syntax errors.\","
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0110\": ("
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Abstract class %r with abstract methods instantiated\","
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "            \"abstract-class-instantiated\","
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an abstract class with `abc.ABCMeta` as metaclass \""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "            \"has abstract methods and is instantiated.\","
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0120\": ("
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Else clause on loop without a break statement\","
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "            \"useless-else-on-loop\","
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Loops should only have an else clause if they can exit early \""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "            \"with a break statement, otherwise the statements under else \""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "            \"should be on the same scope as the loop itself.\","
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0112\": ("
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "            \"More than one starred expression in assignment\","
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "            \"too-many-star-expressions\","
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when there are more than one starred \""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            \"expressions (`*x`) in an assignment. This is a SyntaxError.\","
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0113\": ("
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Starred assignment target must be in a list or tuple\","
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-star-assignment-target\","
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a star expression is used as a starred assignment target.\","
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0114\": ("
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Can use starred expression only in assignment target\","
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "            \"star-needs-assignment-target\","
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a star expression is not used in an assignment target.\","
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0115\": ("
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Name %r is nonlocal and global\","
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "            \"nonlocal-and-global\","
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a name is both nonlocal and global.\","
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0116\": ("
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\u0027continue\u0027 not supported inside \u0027finally\u0027 clause\","
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "            \"continue-in-finally\","
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when the `continue` keyword is found \""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            \"inside a finally clause, which is a SyntaxError.\","
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0117\": ("
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "            \"nonlocal name %s found without binding\","
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "            \"nonlocal-without-binding\","
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a nonlocal variable does not have an attached \""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "            \"name somewhere in the parent scopes\","
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0118\": ("
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Name %r is used prior to global declaration\","
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            \"used-prior-global-declaration\","
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a name is used prior a global declaration, \""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "            \"which results in an error since Python 3.6.\","
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"minversion\": (3, 6)},"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"function-redefined\")"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_classdef(self, node):"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_redefinition(\"class\", node)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "    def _too_many_starred_for_tuple(self, assign_tuple):"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        starred_count \u003d 0"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        for elem in assign_tuple.itered():"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(elem, astroid.Tuple):"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "                return self._too_many_starred_for_tuple(elem)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(elem, astroid.Starred):"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "                starred_count +\u003d 1"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        return starred_count \u003e 1"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"too-many-star-expressions\", \"invalid-star-assignment-target\")"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assign(self, node):"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check *a, *b \u003d ..."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        assign_target \u003d node.targets[0]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check *a \u003d b"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.targets[0], astroid.Starred):"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-star-assignment-target\", node\u003dnode)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(assign_target, astroid.Tuple):"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._too_many_starred_for_tuple(assign_target):"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"too-many-star-expressions\", node\u003dnode)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"star-needs-assignment-target\")"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_starred(self, node):"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check that a Starred expression is used in an assignment target.\"\"\""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.parent, astroid.Call):"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            # f(*args) is converted to Call(args\u003d[Starred]), so ignore"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "            # them for this check."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance("
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            node.parent, (astroid.List, astroid.Tuple, astroid.Set, astroid.Dict)"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "            # PEP 448 unpacking."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        stmt \u003d node.statement()"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(stmt, astroid.Assign):"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "        if stmt.value is node or stmt.value.parent_of(node):"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"star-needs-assignment-target\", node\u003dnode)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages("
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        \"init-is-generator\","
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        \"return-in-init\","
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        \"function-redefined\","
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        \"return-arg-in-generator\","
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        \"duplicate-argument-name\","
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        \"nonlocal-and-global\","
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        \"used-prior-global-declaration\","
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_nonlocal_and_global(node)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_name_used_prior_global(node)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        if not redefined_by_decorator("
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "            node"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        ) and not utils.is_registered_in_singledispatch_function(node):"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_redefinition(node.is_method() and \"method\" or \"function\", node)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        # checks for max returns, branch, return in __init__"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        returns \u003d node.nodes_of_class("
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.Return, skip_klass\u003d(astroid.FunctionDef, astroid.ClassDef)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.is_method() and node.name \u003d\u003d \"__init__\":"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.is_generator():"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"init-is-generator\", node\u003dnode)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "                values \u003d [r.value for r in returns]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "                # Are we returning anything but None from constructors"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "                if any(v for v in values if not utils.is_none(v)):"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"return-in-init\", node\u003dnode)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check for duplicate names by clustering args with same name for detailed report"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        arg_clusters \u003d collections.defaultdict(list)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        arguments \u003d filter(None, [node.args.args, node.args.kwonlyargs])"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        for arg in itertools.chain.from_iterable(arguments):"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "            arg_clusters[arg.name].append(arg)"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        # provide detailed report about each repeated argument"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        for argument_duplicates in arg_clusters.values():"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(argument_duplicates) !\u003d 1:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "                for argument in argument_duplicates:"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"duplicate-argument-name\","
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "                        line\u003dargument.lineno,"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "                        node\u003dargument,"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "                        args\u003d(argument.name,),"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "    visit_asyncfunctiondef \u003d visit_functiondef"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_name_used_prior_global(self, node):"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        scope_globals \u003d {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "            name: child"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "            for child in node.nodes_of_class(astroid.Global)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            for name in child.names"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "            if child.scope() is node"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "        if not scope_globals:"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        for node_name in node.nodes_of_class(astroid.Name):"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "            if node_name.scope() is not node:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d node_name.name"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "            corresponding_global \u003d scope_globals.get(name)"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "            if not corresponding_global:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            global_lineno \u003d corresponding_global.fromlineno"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "            if global_lineno and global_lineno \u003e node_name.fromlineno:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"used-prior-global-declaration\", node\u003dnode_name, args\u003d(name,)"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_nonlocal_and_global(self, node):"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check that a name is both nonlocal and global.\"\"\""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        def same_scope(current):"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "            return current.scope() is node"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        from_iter \u003d itertools.chain.from_iterable"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "        nonlocals \u003d set("
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            from_iter("
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "                child.names"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "                for child in node.nodes_of_class(astroid.Nonlocal)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "                if same_scope(child)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        if not nonlocals:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        global_vars \u003d set("
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "            from_iter("
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "                child.names"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "                for child in node.nodes_of_class(astroid.Global)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "                if same_scope(child)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        for name in nonlocals.intersection(global_vars):"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"nonlocal-and-global\", args\u003d(name,), node\u003dnode)"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"return-outside-function\")"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_return(self, node):"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node.frame(), astroid.FunctionDef):"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"return-outside-function\", node\u003dnode)"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"yield-outside-function\")"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_yield(self, node):"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_yield_outside_func(node)"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"yield-outside-function\")"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_yieldfrom(self, node):"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_yield_outside_func(node)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"not-in-loop\", \"continue-in-finally\")"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_continue(self, node):"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_in_loop(node, \"continue\")"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"not-in-loop\")"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_break(self, node):"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_in_loop(node, \"break\")"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"useless-else-on-loop\")"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_for(self, node):"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_else_on_loop(node)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"useless-else-on-loop\")"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_while(self, node):"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_else_on_loop(node)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"nonexistent-operator\")"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_unaryop(self, node):"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check use of the non-existent ++ and -- operator operator\"\"\""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "            (node.op in \"+-\")"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(node.operand, astroid.UnaryOp)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "            and (node.operand.op \u003d\u003d node.op)"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"nonexistent-operator\", node\u003dnode, args\u003dnode.op * 2)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_nonlocal_without_binding(self, node, name):"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        current_scope \u003d node.scope()"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        while True:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "            if current_scope.parent is None:"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(current_scope, (astroid.ClassDef, astroid.FunctionDef)):"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"nonlocal-without-binding\", args\u003d(name,), node\u003dnode)"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "            if name not in current_scope.locals:"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "                current_scope \u003d current_scope.parent.scope()"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "            # Okay, found it."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(current_scope, astroid.FunctionDef):"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"nonlocal-without-binding\", args\u003d(name,), node\u003dnode)"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"nonlocal-without-binding\")"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_nonlocal(self, node):"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        for name in node.names:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_nonlocal_without_binding(node, name)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"abstract-class-instantiated\")"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_call(self, node):"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" Check instantiating abstract class with"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        abc.ABCMeta as metaclass."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "            for inferred in node.func.infer():"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_inferred_class_is_abstract(inferred, node)"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_inferred_class_is_abstract(self, inferred, node):"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(inferred, astroid.ClassDef):"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "        klass \u003d utils.node_frame_class(node)"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        if klass is inferred:"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "            # Don\u0027t emit the warning if the class is instantiated"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "            # in its own body or if the call is not an instance"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "            # creation. If the class is instantiated into its own"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "            # body, we\u0027re expecting that it knows what it is doing."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "        # __init__ was called"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "        abstract_methods \u003d _has_abstract_methods(inferred)"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "        if not abstract_methods:"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "        metaclass \u003d inferred.metaclass()"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "        if metaclass is None:"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "            # Python 3.4 has `abc.ABC`, which won\u0027t be detected"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "            # by ClassNode.metaclass()"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "            for ancestor in inferred.ancestors():"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "                if ancestor.qname() \u003d\u003d \"abc.ABC\":"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"abstract-class-instantiated\", args\u003d(inferred.name,), node\u003dnode"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        if metaclass.qname() in ABC_METACLASSES:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "                \"abstract-class-instantiated\", args\u003d(inferred.name,), node\u003dnode"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_yield_outside_func(self, node):"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node.frame(), (astroid.FunctionDef, astroid.Lambda)):"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"yield-outside-function\", node\u003dnode)"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_else_on_loop(self, node):"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check that any loop with an else clause has a break statement.\"\"\""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.orelse and not _loop_exits_early(node):"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "                \"useless-else-on-loop\","
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "                node\u003dnode,"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "                # This is not optimal, but the line previous"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "                # to the first statement in the else clause"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "                # will usually be the one that contains the else:."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "                line\u003dnode.orelse[0].lineno - 1,"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_in_loop(self, node, node_name):"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that a node is inside a for or while loop\"\"\""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "        _node \u003d node.parent"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "        while _node:"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(_node, (astroid.For, astroid.While)):"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "                if node not in _node.orelse:"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(_node, (astroid.ClassDef, astroid.FunctionDef)):"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(_node, astroid.TryFinally)"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "                and node in _node.finalbody"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "                and isinstance(node, astroid.Continue)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"continue-in-finally\", node\u003dnode)"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "            _node \u003d _node.parent"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"not-in-loop\", node\u003dnode, args\u003dnode_name)"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_redefinition(self, redeftype, node):"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check for redefinition of a function / method / class name\"\"\""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "        parent_frame \u003d node.parent.frame()"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore function stubs created for type information"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "        redefinitions \u003d parent_frame.locals[node.name]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "        defined_self \u003d next("
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "            (local for local in redefinitions if not utils.is_overload_stub(local)),"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "            node,"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "        if defined_self is not node and not astroid.are_exclusive(node, defined_self):"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "            # Additional checks for methods which are not considered"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "            # redefined, since they are already part of the base API."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(parent_frame, astroid.ClassDef)"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                and node.name in REDEFINABLE_METHODS"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "            if utils.is_overload_stub(node):"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "            # Check if we have forward references for this node."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "                redefinition_index \u003d redefinitions.index(node)"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "            except ValueError:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "                for redefinition in redefinitions[:redefinition_index]:"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "                    inferred \u003d utils.safe_infer(redefinition)"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "                        inferred"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "                        and isinstance(inferred, astroid.Instance)"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "                        and inferred.qname() \u003d\u003d TYPING_FORWARD_REF_QNAME"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "            dummy_variables_rgx \u003d lint_utils.get_global_option("
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "                self, \"dummy-variables-rgx\", default\u003dNone"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "            if dummy_variables_rgx and dummy_variables_rgx.match(node.name):"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "                \"function-redefined\","
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "                node\u003dnode,"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(redeftype, defined_self.fromlineno),"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "class BasicChecker(_BasicChecker):"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"checks for :"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "    * doc strings"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "    * number of arguments, local variables, branches, returns and statements in"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "    functions, methods"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "    * required module attributes"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "    * dangerous default values as arguments"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "    * redefinition of function / method / class"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "    * uses of the global statement"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d interfaces.IAstroidChecker"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"basic\""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0101\": ("
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Unreachable code\","
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unreachable\","
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when there is some code behind a \"return\" or \"raise\" \u0027"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "            \"statement, which will never be accessed.\","
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0102\": ("
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Dangerous default value %s as argument\","
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dangerous-default-value\","
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a mutable value as list or dictionary is detected in \""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "            \"a default value for an argument.\","
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0104\": ("
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Statement seems to have no effect\","
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pointless-statement\","
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a statement doesn\u0027t have (or at least seems to) any effect.\","
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0105\": ("
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "            \"String statement has no effect\","
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pointless-string-statement\","
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a string is used as a statement (which of course \""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "            \"has no effect). This is a particular case of W0104 with its \""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "            \"own message so you can easily disable it if you\u0027re using \""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "            \"those strings as documentation, instead of comments.\","
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0106\": ("
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Expression \"%s\" is assigned to nothing\u0027,"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "            \"expression-not-assigned\","
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an expression that is not a function call is assigned \""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "            \"to nothing. Probably something else was intended.\","
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0108\": ("
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Lambda may not be necessary\","
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unnecessary-lambda\","
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the body of a lambda expression is a function call \""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "            \"on the same argument list as the lambda itself; such lambda \""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "            \"expressions are in all but a few cases replaceable with the \""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "            \"function being called in the body of the lambda.\","
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0109\": ("
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Duplicate key %r in dictionary\","
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "            \"duplicate-key\","
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a dictionary expression binds the same key multiple times.\","
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0122\": ("
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use of exec\","
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "            \"exec-used\","
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when you use the \"exec\" statement (function for Python \u0027"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "            \"3), to discourage its usage. That doesn\u0027t \""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "            \"mean you cannot use it !\","
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0123\": ("
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use of eval\","
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "            \"eval-used\","
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when you use the \"eval\" function, to discourage its \u0027"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            \"usage. Consider using `ast.literal_eval` for safely evaluating \""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "            \"strings containing Python expressions \""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "            \"from untrusted sources. \","
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0150\": ("
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "            \"%s statement in finally block may swallow exception\","
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "            \"lost-exception\","
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a break or a return statement is found inside the \""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "            \"finally clause of a try...finally block: the exceptions raised \""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "            \"in the try clause will be silently swallowed instead of being \""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "            \"re-raised.\","
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0199\": ("
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Assert called on a 2-item-tuple. Did you mean \u0027assert x,y\u0027?\","
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "            \"assert-on-tuple\","
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "            \"A call of assert on a tuple will always evaluate to true if \""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "            \"the tuple is not empty, and will always evaluate to false if \""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "            \"it is.\","
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0124\": ("
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Following \"as\" with another context manager looks like a tuple.\u0027,"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "            \"confusing-with-statement\","
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a `with` statement component returns multiple values \""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "            \"and uses name binding with `as` only for a part of those values, \""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "            \"as in with ctx() as a, b. This can be misleading, since it\u0027s not \""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "            \"clear if the context manager returns a tuple or if the node without \""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "            \"a name binding is another context manager.\","
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0125\": ("
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using a conditional statement with a constant value\","
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "            \"using-constant-test\","
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a conditional statement (If or ternary if) \""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "            \"uses a constant value for its test. This might not be what \""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "            \"the user intended to do.\","
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0126\": ("
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using a conditional statement with potentially wrong function or method call due to missing parentheses\","
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "            \"missing-parentheses-for-call-in-test\","
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a conditional statement (If or ternary if) \""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "            \"seems to wrongly call a function due to missing parentheses\","
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0127\": ("
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Assigning the same variable %r to itself\","
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "            \"self-assigning-variable\","
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when we detect that a variable is assigned to itself\","
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0128\": ("
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Redeclared variable %r in assignment\","
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "            \"redeclared-assigned-name\","
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when we detect that a variable was redeclared in the same assignment.\","
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0111\": ("
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "            \"The first reversed() argument is not a sequence\","
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "            \"bad-reversed-sequence\","
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the first argument to reversed() builtin \""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "            \"isn\u0027t a sequence (does not implement __reversed__, \""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "            \"nor __getitem__ and __len__\","
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0119\": ("
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "            \"format function is not called on str\","
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "            \"misplaced-format-function\","
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when format function is not called on str object. \""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027e.g doing print(\"value: {}\").format(123) instead of \u0027"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027print(\"value: {}\".format(123)). This might not be what the user \u0027"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "            \"intended to do.\","
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "        \"W0129\": ("
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "            \"Assert statement has a string literal as its first argument. The assert will never fail.\","
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "            \"assert-on-string-literal\","
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "            \"Used when an assert statement has a string literal as its first argument, which will \""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "            \"cause the assert to always pass.\","
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "    reports \u003d ((\"RP0101\", \"Statistics by type\", report_by_type_stats),)"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, linter):"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "        _BasicChecker.__init__(self, linter)"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats \u003d None"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "        self._tryfinallys \u003d None"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "    def open(self):"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"initialize visit variables and statistics"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "        self._tryfinallys \u003d []"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats \u003d self.linter.add_stats(module\u003d0, function\u003d0, method\u003d0, class_\u003d0)"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"using-constant-test\", \"missing-parentheses-for-call-in-test\")"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_if(self, node):"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_using_constant_test(node, node.test)"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"using-constant-test\", \"missing-parentheses-for-call-in-test\")"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_ifexp(self, node):"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_using_constant_test(node, node.test)"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"using-constant-test\", \"missing-parentheses-for-call-in-test\")"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_comprehension(self, node):"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.ifs:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "            for if_test in node.ifs:"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_using_constant_test(node, if_test)"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_using_constant_test(self, node, test):"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        const_nodes \u003d ("
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.Module,"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.scoped_nodes.GeneratorExp,"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.Lambda,"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.FunctionDef,"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.ClassDef,"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.bases.Generator,"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.UnboundMethod,"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.BoundMethod,"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.Module,"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "        structs \u003d (astroid.Dict, astroid.Tuple, astroid.Set)"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "        # These nodes are excepted, since they are not constant"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "        # values, requiring a computation to happen."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "        except_nodes \u003d ("
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.Call,"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.BinOp,"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.BoolOp,"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.UnaryOp,"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.Subscript,"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d None"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "        emit \u003d isinstance(test, (astroid.Const,) + structs + const_nodes)"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(test, except_nodes):"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d utils.safe_infer(test)"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "        if emit:"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"using-constant-test\", node\u003dnode)"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(inferred, const_nodes):"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "            # If the constant node is a FunctionDef or Lambda then"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "            #  it may be a illicit function call due to missing parentheses"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "            call_inferred \u003d None"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(inferred, astroid.FunctionDef):"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "                call_inferred \u003d inferred.infer_call_result()"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "            elif isinstance(inferred, astroid.Lambda):"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "                call_inferred \u003d inferred.infer_call_result(node)"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "            if call_inferred:"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "                    for inf_call in call_inferred:"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "                        if inf_call !\u003d astroid.Uninferable:"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"missing-parentheses-for-call-in-test\", node\u003dnode"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "                            break"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "                except astroid.InferenceError:"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"using-constant-test\", node\u003dnode)"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_module(self, _):"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check module name, docstring and required arguments"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats[\"module\"] +\u003d 1"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_classdef(self, node):  # pylint: disable\u003dunused-argument"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check module name, docstring and redefinition"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "        increment branch counter"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats[\"class\"] +\u003d 1"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages("
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pointless-statement\", \"pointless-string-statement\", \"expression-not-assigned\""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_expr(self, node):"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check for various kind of statements without effect\"\"\""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "        expr \u003d node.value"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(expr, astroid.Const) and isinstance(expr.value, str):"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "            # treat string statement in a separated message"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "            # Handle PEP-257 attribute docstrings."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "            # An attribute docstring is defined as being a string right after"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "            # an assignment at the module level, class level or __init__ level."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "            scope \u003d expr.scope()"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance("
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "                scope, (astroid.ClassDef, astroid.Module, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(scope, astroid.FunctionDef) and scope.name !\u003d \"__init__\":"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "                    sibling \u003d expr.previous_sibling()"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "                        sibling is not None"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "                        and sibling.scope() is scope"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "                        and isinstance(sibling, (astroid.Assign, astroid.AnnAssign))"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"pointless-string-statement\", node\u003dnode)"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore if this is :"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "        # * a direct function call"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "        # * the unique child of a try/except body"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "        # * a yield statement"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "        # * an ellipsis (which can be used on Python 3 instead of pass)"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "        # warn W0106 if we have any underlying function call (we can\u0027t predict"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "        # side effects), else pointless-statement"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance("
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "                expr, (astroid.Yield, astroid.Await, astroid.Ellipsis, astroid.Call)"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            or ("
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(node.parent, astroid.TryExcept)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "                and node.parent.body \u003d\u003d [node]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "            or (isinstance(expr, astroid.Const) and expr.value is Ellipsis)"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "        if any(expr.nodes_of_class(astroid.Call)):"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "                \"expression-not-assigned\", node\u003dnode, args\u003dexpr.as_string()"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"pointless-statement\", node\u003dnode)"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "    def _filter_vararg(node, call_args):"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "        # Return the arguments for the given call which are"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "        # not passed as vararg."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "        for arg in call_args:"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(arg, astroid.Starred):"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(arg.value, astroid.Name)"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "                    and arg.value.name !\u003d node.args.vararg"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "                    yield arg"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "                yield arg"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "    def _has_variadic_argument(args, variadic_name):"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "        if not args:"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "        for arg in args:"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(arg.value, astroid.Name):"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "                if arg.value.name !\u003d variadic_name:"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "                    return True"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"unnecessary-lambda\")"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_lambda(self, node):"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check whether or not the lambda is suspicious"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "        # if the body of the lambda is a call expression with the same"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "        # argument list as the lambda itself, then the lambda is"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "        # possibly unnecessary and at least suspicious."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.args.defaults:"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "            # If the arguments of the lambda include defaults, then a"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "            # judgment cannot be made because there is no way to check"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "            # that the defaults defined by the lambda are the same as"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "            # the defaults defined by the function called in the body"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "            # of the lambda."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "        call \u003d node.body"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(call, astroid.Call):"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "            # The body of the lambda must be a function call expression"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "            # for the lambda to be unnecessary."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.body.func, astroid.Attribute) and isinstance("
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "            node.body.func.expr, astroid.Call"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "            # Chained call, the intermediate call might"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "            # return something else (but we don\u0027t check that, yet)."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "        call_site \u003d CallSite.from_call(call)"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "        ordinary_args \u003d list(node.args.args)"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "        new_call_args \u003d list(self._filter_vararg(node, call.args))"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.args.kwarg:"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "            if self._has_variadic_argument(call.kwargs, node.args.kwarg):"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.args.vararg:"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "            if self._has_variadic_argument(call.starargs, node.args.vararg):"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "        elif call.starargs:"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "        if call.keywords:"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "            # Look for additional keyword arguments that are not part"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "            # of the lambda\u0027s signature"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "            lambda_kwargs \u003d {keyword.name for keyword in node.args.defaults}"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(lambda_kwargs) !\u003d len(call_site.keyword_arguments):"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "                # Different lengths, so probably not identical"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "            if set(call_site.keyword_arguments).difference(lambda_kwargs):"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "        # The \"ordinary\" arguments must be in a correspondence such that:"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "        # ordinary_args[i].name \u003d\u003d call.args[i].name."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(ordinary_args) !\u003d len(new_call_args):"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "        for arg, passed_arg in zip(ordinary_args, new_call_args):"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(passed_arg, astroid.Name):"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "            if arg.name !\u003d passed_arg.name:"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"unnecessary-lambda\", line\u003dnode.fromlineno, node\u003dnode)"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"dangerous-default-value\")"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check function name, docstring, arguments, redefinition,"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "        variable names, max locals"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats[\"method\" if node.is_method() else \"function\"] +\u003d 1"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_dangerous_default(node)"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "    visit_asyncfunctiondef \u003d visit_functiondef"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_dangerous_default(self, node):"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "        # check for dangerous default values as arguments"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "        is_iterable \u003d lambda n: isinstance(n, (astroid.List, astroid.Set, astroid.Dict))"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "        for default in node.args.defaults:"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "                value \u003d next(default.infer())"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.InferenceError:"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(value, astroid.Instance)"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "                and value.qname() in DEFAULT_ARGUMENT_SYMBOLS"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "                if value is default:"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "                    msg \u003d DEFAULT_ARGUMENT_SYMBOLS[value.qname()]"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "                elif isinstance(value, astroid.Instance) or is_iterable(value):"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "                    # We are here in the following situation(s):"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "                    #   * a dict/set/list/tuple call which wasn\u0027t inferred"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "                    #     to a syntax node ({}, () etc.). This can happen"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "                    #     when the arguments are invalid or unknown to"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "                    #     the inference."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "                    #   * a variable from somewhere else, which turns out to be a list"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "                    #     or a dict."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "                    if is_iterable(default):"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d value.pytype()"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "                    elif isinstance(default, astroid.Call):"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"%s() (%s)\" % (value.name, value.qname())"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"%s (%s)\" % (default.as_string(), value.qname())"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "                    # this argument is a name"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "                    msg \u003d \"%s (%s)\" % ("
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "                        default.as_string(),"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "                        DEFAULT_ARGUMENT_SYMBOLS[value.qname()],"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"dangerous-default-value\", node\u003dnode, args\u003d(msg,))"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"unreachable\", \"lost-exception\")"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_return(self, node):"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"1 - check is the node has a right sibling (if so, that\u0027s some"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        unreachable code)"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "        2 - check is the node is inside the finally clause of a try...finally"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "        block"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_unreachable(node)"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "        # Is it inside final body of a try...finally bloc ?"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_not_in_finally(node, \"return\", (astroid.FunctionDef,))"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"unreachable\")"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_continue(self, node):"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check is the node has a right sibling (if so, that\u0027s some unreachable"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "        code)"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_unreachable(node)"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"unreachable\", \"lost-exception\")"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_break(self, node):"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"1 - check is the node has a right sibling (if so, that\u0027s some"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "        unreachable code)"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "        2 - check is the node is inside the finally clause of a try...finally"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "        block"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "        # 1 - Is it right sibling ?"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_unreachable(node)"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "        # 2 - Is it inside final body of a try...finally bloc ?"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_not_in_finally(node, \"break\", (astroid.For, astroid.While))"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"unreachable\")"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_raise(self, node):"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check if the node has a right sibling (if so, that\u0027s some unreachable"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "        code)"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_unreachable(node)"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"exec-used\")"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_exec(self, node):"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"just print a warning on exec statements\"\"\""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"exec-used\", node\u003dnode)"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_misplaced_format_function(self, call_node):"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(call_node.func, astroid.Attribute):"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "        if call_node.func.attrname !\u003d \"format\":"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "        expr \u003d utils.safe_infer(call_node.func.expr)"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "        if expr is astroid.Uninferable:"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "        if not expr:"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "            # we are doubtful on inferred type of node, so here just check if format"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "            # was called on print()"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "            call_expr \u003d call_node.func.expr"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(call_expr, astroid.Call):"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(call_expr.func, astroid.Name)"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "                and call_expr.func.name \u003d\u003d \"print\""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"misplaced-format-function\", node\u003dcall_node)"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages("
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "        \"eval-used\", \"exec-used\", \"bad-reversed-sequence\", \"misplaced-format-function\""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_call(self, node):"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit a Call node -\u003e check if this is not a blacklisted builtin"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "        call and check for * or ** use"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_misplaced_format_function(node)"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.func, astroid.Name):"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d node.func.name"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "            # ignore the name if it\u0027s not a builtin (i.e. not defined in the"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "            # locals nor globals scope)"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "            if not (name in node.frame() or name in node.root()):"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "                if name \u003d\u003d \"exec\":"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"exec-used\", node\u003dnode)"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "                elif name \u003d\u003d \"reversed\":"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._check_reversed(node)"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "                elif name \u003d\u003d \"eval\":"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"eval-used\", node\u003dnode)"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "    @utils.check_messages(\"assert-on-tuple\", \"assert-on-string-literal\")"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assert(self, node):"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "        \"\"\"check whether assert is used on a tuple or string literal.\"\"\""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "            node.fail is None"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(node.test, astroid.Tuple)"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "            and len(node.test.elts) \u003d\u003d 2"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"assert-on-tuple\", node\u003dnode)"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "        if isinstance(node.test, astroid.Const) and isinstance(node.test.value, str):"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "            self.add_message(\"assert-on-string-literal\", node\u003dnode)"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Anubhav"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"duplicate-key\")"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_dict(self, node):"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check duplicate key in dictionary\"\"\""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "        keys \u003d set()"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "        for k, _ in node.items:"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(k, astroid.Const):"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "                key \u003d k.value"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "                if key in keys:"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"duplicate-key\", node\u003dnode, args\u003dkey)"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "                keys.add(key)"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_tryfinally(self, node):"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"update try...finally flag\"\"\""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "        self._tryfinallys.append(node)"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_tryfinally(self, node):  # pylint: disable\u003dunused-argument"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"update try...finally flag\"\"\""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "        self._tryfinallys.pop()"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_unreachable(self, node):"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check unreachable code\"\"\""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "        unreach_stmt \u003d node.next_sibling()"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "        if unreach_stmt is not None:"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"unreachable\", node\u003dunreach_stmt)"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_not_in_finally(self, node, node_name, breaker_classes\u003d()):"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that a node is not inside a finally clause of a"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "        try...finally statement."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "        If we found before a try...finally bloc a parent which its type is"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "        in breaker_classes, we skip the whole check.\"\"\""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "        # if self._tryfinallys is empty, we\u0027re not an in try...finally block"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._tryfinallys:"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "        # the node could be a grand-grand...-children of the try...finally"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "        _parent \u003d node.parent"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "        _node \u003d node"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "        while _parent and not isinstance(_parent, breaker_classes):"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "            if hasattr(_parent, \"finalbody\") and _node in _parent.finalbody:"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"lost-exception\", node\u003dnode, args\u003dnode_name)"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "            _node \u003d _parent"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "            _parent \u003d _node.parent"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_reversed(self, node):"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" check that the argument to `reversed` is a sequence \"\"\""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "            argument \u003d utils.safe_infer(utils.get_argument_from_call(node, position\u003d0))"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "        except utils.NoSuchArgumentError:"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "            if argument is astroid.Uninferable:"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "            if argument is None:"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "                # Nothing was inferred."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "                # Try to see if we have iter()."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(node.args[0], astroid.Call):"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "                    try:"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "                        func \u003d next(node.args[0].func.infer())"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "                    except astroid.InferenceError:"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "                    if getattr("
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "                        func, \"name\", None"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "                    ) \u003d\u003d \"iter\" and utils.is_builtin_object(func):"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(\"bad-reversed-sequence\", node\u003dnode)"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(argument, (astroid.List, astroid.Tuple)):"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(argument, astroid.Instance):"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "                if argument._proxied.name \u003d\u003d \"dict\" and utils.is_builtin_object("
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "                    argument._proxied"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"bad-reversed-sequence\", node\u003dnode)"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "                if any("
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "                    ancestor.name \u003d\u003d \"dict\" and utils.is_builtin_object(ancestor)"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "                    for ancestor in argument._proxied.ancestors()"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Mappings aren\u0027t accepted by reversed(), unless"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "                    # they provide explicitly a __reversed__ method."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "                    try:"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "                        argument.locals[REVERSED_PROTOCOL_METHOD]"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "                    except KeyError:"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(\"bad-reversed-sequence\", node\u003dnode)"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "            if hasattr(argument, \"getattr\"):"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "                # everything else is not a proper sequence for reversed()"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "                for methods in REVERSED_METHODS:"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "                    for meth in methods:"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "                        try:"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "                            argument.getattr(meth)"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "                        except astroid.NotFoundError:"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "                            break"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "                        break"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"bad-reversed-sequence\", node\u003dnode)"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"bad-reversed-sequence\", node\u003dnode)"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"confusing-with-statement\")"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_with(self, node):"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "        # a \"with\" statement with multiple managers corresponds"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "        # to one AST \"With\" node with multiple items"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "        pairs \u003d node.items"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "        if pairs:"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "            for prev_pair, pair in zip(pairs, pairs[1:]):"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(prev_pair[1], astroid.AssignName) and ("
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "                    pair[1] is None and not isinstance(pair[0], astroid.Call)"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Don\u0027t emit a message if the second is a function call"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "                    # there\u0027s no way that can be mistaken for a name assignment."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "                    # If the line number doesn\u0027t match"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "                    # we assume it\u0027s a nested \"with\"."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"confusing-with-statement\", node\u003dnode)"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_self_assigning_variable(self, node):"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "        # Detect assigning to the same variable."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "        scope \u003d node.scope()"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "        scope_locals \u003d scope.locals"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "        rhs_names \u003d []"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "        targets \u003d node.targets"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(targets[0], astroid.Tuple):"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(targets) !\u003d 1:"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "                # A complex assignment, so bail out early."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "            targets \u003d targets[0].elts"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.value, astroid.Name):"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(targets) !\u003d 1:"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "            rhs_names \u003d [node.value]"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(node.value, astroid.Tuple):"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "            rhs_count \u003d len(node.value.elts)"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(targets) !\u003d rhs_count or rhs_count \u003d\u003d 1:"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "            rhs_names \u003d node.value.elts"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "        for target, lhs_name in zip(targets, rhs_names):"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(lhs_name, astroid.Name):"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(target, astroid.AssignName):"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(scope, astroid.ClassDef) and target.name in scope_locals:"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "                # Check that the scope is different than a class level, which is usually"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "                # a pattern to expose module level attributes as class level ones."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "            if target.name \u003d\u003d lhs_name.name:"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"self-assigning-variable\", args\u003d(target.name,), node\u003dtarget"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_redeclared_assign_name(self, targets):"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "        for target in targets:"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(target, astroid.Tuple):"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "            found_names \u003d []"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "            for element in target.elts:"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(element, astroid.Tuple):"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._check_redeclared_assign_name([element])"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "                elif isinstance(element, astroid.AssignName) and element.name !\u003d \"_\":"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "                    found_names.append(element.name)"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "            names \u003d collections.Counter(found_names)"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "            for name, count in names.most_common():"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "                if count \u003e 1:"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"redeclared-assigned-name\", args\u003d(name,), node\u003dtarget"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"self-assigning-variable\", \"redeclared-assigned-name\")"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assign(self, node):"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_self_assigning_variable(node)"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_redeclared_assign_name(node.targets)"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"redeclared-assigned-name\")"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_for(self, node):"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_redeclared_assign_name([node.target])"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "KNOWN_NAME_TYPES \u003d {"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "    \"module\","
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "    \"const\","
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "    \"class\","
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "    \"function\","
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "    \"method\","
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "    \"attr\","
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "    \"argument\","
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "    \"variable\","
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "    \"class_attribute\","
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "    \"inlinevar\","
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "HUMAN_READABLE_TYPES \u003d {"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "    \"module\": \"module\","
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "    \"const\": \"constant\","
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "    \"class\": \"class\","
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "    \"function\": \"function\","
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "    \"method\": \"method\","
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "    \"attr\": \"attribute\","
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "    \"argument\": \"argument\","
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "    \"variable\": \"variable\","
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "    \"class_attribute\": \"class attribute\","
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "    \"inlinevar\": \"inline iteration\","
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "DEFAULT_NAMING_STYLES \u003d {"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "    \"module\": \"snake_case\","
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "    \"const\": \"UPPER_CASE\","
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "    \"class\": \"PascalCase\","
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "    \"function\": \"snake_case\","
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "    \"method\": \"snake_case\","
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "    \"attr\": \"snake_case\","
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "    \"argument\": \"snake_case\","
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "    \"variable\": \"snake_case\","
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "    \"class_attribute\": \"any\","
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "    \"inlinevar\": \"any\","
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "def _create_naming_options():"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "    name_options \u003d []"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "    for name_type in sorted(KNOWN_NAME_TYPES):"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "        human_readable_name \u003d HUMAN_READABLE_TYPES[name_type]"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "        default_style \u003d DEFAULT_NAMING_STYLES[name_type]"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "        name_type \u003d name_type.replace(\"_\", \"-\")"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "        name_options.append("
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "                \"%s-naming-style\" % (name_type,),"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": default_style,"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"choice\","
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"choices\": list(NAMING_STYLES.keys()),"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cstyle\u003e\","
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Naming style matching correct %s names.\""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "                    % (human_readable_name,),"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "        name_options.append("
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "                \"%s-rgx\" % (name_type,),"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": None,"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"regexp\","
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cregexp\u003e\","
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Regular expression matching correct %s names. Overrides %s-naming-style.\""
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "                    % (human_readable_name, name_type),"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "    return tuple(name_options)"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "class NameChecker(_BasicChecker):"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0102\": ("
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Black listed name \"%s\"\u0027,"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "            \"blacklisted-name\","
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the name is listed in the black list (unauthorized names).\","
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0103\": ("
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027%s name \"%s\" doesn\\\u0027t conform to %s\u0027,"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-name\","
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the name doesn\u0027t conform to naming rules \""
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "            \"associated to its type (constant, variable, class...).\","
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0111\": ("
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Name %s will become a keyword in Python %s\","
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "            \"assign-to-new-keyword\","
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when assignment will become invalid in future \""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Python release due to introducing new keyword.\","
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ("
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "            \"good-names\","
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (\"i\", \"j\", \"k\", \"ex\", \"Run\", \"_\"),"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cnames\u003e\","
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Good variable names which should always be accepted,\""
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "                \" separated by a comma.\","
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "            \"good-names-rgxs\","
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": \"\","
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"regexp_csv\","
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cnames\u003e\","
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Good variable names regexes, separated by a comma. If names match any regex,\""
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "                \" they will always be accepted\","
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "            \"bad-names\","
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (\"foo\", \"bar\", \"baz\", \"toto\", \"tutu\", \"tata\"),"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cnames\u003e\","
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Bad variable names which should always be refused, \""
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "                \"separated by a comma.\","
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "            \"bad-names-rgxs\","
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": \"\","
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"regexp_csv\","
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cnames\u003e\","
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Bad variable names regexes, separated by a comma. If names match any regex,\""
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "                \" they will always be refused\","
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "            \"name-group\","
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (),"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cname1:name2\u003e\","
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": ("
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Colon-delimited sets of names that determine each\""
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" other\u0027s naming style when the name regexes\""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" allow several styles.\""
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "            \"include-naming-hint\","
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": False,"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Include a hint for the correct naming format with invalid-name.\","
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "            \"property-classes\","
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (\"abc.abstractproperty\",),"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cdecorator names\u003e\","
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of decorators that produce properties, such as \""
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "                \"abc.abstractproperty. Add to this list to register \""
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "                \"other decorators that produce valid properties. \""
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "                \"These decorators are taken in consideration only for invalid-name.\","
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "    ) + _create_naming_options()"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "    KEYWORD_ONSET \u003d {(3, 7): {\"async\", \"await\"}}"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, linter):"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "        _BasicChecker.__init__(self, linter)"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "        self._name_category \u003d {}"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "        self._name_group \u003d {}"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bad_names \u003d {}"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "        self._name_regexps \u003d {}"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "        self._name_hints \u003d {}"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "        self._good_names_rgxs_compiled \u003d []"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bad_names_rgxs_compiled \u003d []"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "    def open(self):"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats \u003d self.linter.add_stats("
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_module\u003d0,"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_class\u003d0,"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_function\u003d0,"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_method\u003d0,"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_attr\u003d0,"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_const\u003d0,"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_variable\u003d0,"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_inlinevar\u003d0,"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_argument\u003d0,"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "            badname_class_attribute\u003d0,"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": "        for group in self.config.name_group:"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "            for name_type in group.split(\":\"):"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "                self._name_group[name_type] \u003d \"group_%s\" % (group,)"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "        regexps, hints \u003d self._create_naming_rules()"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "        self._name_regexps \u003d regexps"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "        self._name_hints \u003d hints"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "        self._good_names_rgxs_compiled \u003d ["
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "            re.compile(rgxp) for rgxp in self.config.good_names_rgxs"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bad_names_rgxs_compiled \u003d ["
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "            re.compile(rgxp) for rgxp in self.config.bad_names_rgxs"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "    def _create_naming_rules(self):"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "        regexps \u003d {}"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "        hints \u003d {}"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "        for name_type in KNOWN_NAME_TYPES:"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "            naming_style_option_name \u003d \"%s_naming_style\" % (name_type,)"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "            naming_style_name \u003d getattr(self.config, naming_style_option_name)"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "            regexps[name_type] \u003d NAMING_STYLES[naming_style_name].get_regex(name_type)"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "            custom_regex_setting_name \u003d \"%s_rgx\" % (name_type,)"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "            custom_regex \u003d getattr(self.config, custom_regex_setting_name, None)"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "            if custom_regex is not None:"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "                regexps[name_type] \u003d custom_regex"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "            if custom_regex is not None:"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "                hints[name_type] \u003d \"%r pattern\" % custom_regex.pattern"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "                hints[name_type] \u003d \"%s naming style\" % naming_style_name"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "        return regexps, hints"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"blacklisted-name\", \"invalid-name\")"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_module(self, node):"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_name(\"module\", node.name.split(\".\")[-1], node)"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bad_names \u003d {}"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_module(self, node):  # pylint: disable\u003dunused-argument"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "        for all_groups in self._bad_names.values():"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(all_groups) \u003c 2:"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": "            groups \u003d collections.defaultdict(list)"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": "            min_warnings \u003d sys.maxsize"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": "            for group in all_groups.values():"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "                groups[len(group)].append(group)"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": "                min_warnings \u003d min(len(group), min_warnings)"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(groups[min_warnings]) \u003e 1:"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "                by_line \u003d sorted("
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "                    groups[min_warnings],"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "                    key\u003dlambda group: min(warning[0].lineno for warning in group),"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "                warnings \u003d itertools.chain(*by_line[1:])"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "                warnings \u003d groups[min_warnings][0]"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "            for args in warnings:"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": "                self._raise_name_warning(*args)"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"blacklisted-name\", \"invalid-name\", \"assign-to-new-keyword\")"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_classdef(self, node):"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_assign_to_new_keyword_violation(node.name, node)"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_name(\"class\", node.name, node)"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": "        for attr, anodes in node.instance_attrs.items():"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": "            if not any(node.instance_attr_ancestors(attr)):"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_name(\"attr\", attr, anodes[0])"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"blacklisted-name\", \"invalid-name\", \"assign-to-new-keyword\")"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": "        # Do not emit any warnings if the method is just an implementation"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": "        # of a base class method."
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_assign_to_new_keyword_violation(node.name, node)"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "        confidence \u003d interfaces.HIGH"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.is_method():"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "-"
        },
        "content": "            if utils.overrides_a_method(node.parent.frame(), node.name):"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "-"
        },
        "content": "            confidence \u003d ("
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": "                interfaces.INFERENCE"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "-"
        },
        "content": "                if utils.has_known_bases(node.parent.frame())"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "-"
        },
        "content": "                else interfaces.INFERENCE_FAILURE"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_name("
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "-"
        },
        "content": "            _determine_function_name_type(node, config\u003dself.config),"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "-"
        },
        "content": "            node.name,"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": "            node,"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "-"
        },
        "content": "            confidence,"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check argument names"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": "        args \u003d node.args.args"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "-"
        },
        "content": "        if args is not None:"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "-"
        },
        "content": "            self._recursive_check_names(args, node)"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": "    visit_asyncfunctiondef \u003d visit_functiondef"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"blacklisted-name\", \"invalid-name\")"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_global(self, node):"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "        for name in node.names:"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_name(\"const\", name, node)"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"blacklisted-name\", \"invalid-name\", \"assign-to-new-keyword\")"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assignname(self, node):"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check module level assigned names\"\"\""
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_assign_to_new_keyword_violation(node.name, node)"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "-"
        },
        "content": "        frame \u003d node.frame()"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": "        assign_type \u003d node.assign_type()"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(assign_type, astroid.Comprehension):"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_name(\"inlinevar\", node.name, node)"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(frame, astroid.Module):"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(assign_type, astroid.Assign) and not in_loop(assign_type):"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(utils.safe_infer(assign_type.value), astroid.ClassDef):"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._check_name(\"class\", node.name, node)"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "-"
        },
        "content": "                # Don\u0027t emit if the name redefines an import"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": "                # in an ImportError except handler."
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "                elif not _redefines_import(node) and isinstance("
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": "                    utils.safe_infer(assign_type.value), astroid.Const"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._check_name(\"const\", node.name, node)"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": "            elif isinstance(assign_type, astroid.ExceptHandler):"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_name(\"variable\", node.name, node)"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(frame, astroid.FunctionDef):"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": "            # global introduced variable aren\u0027t in the function locals"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.name in frame and node.name not in frame.argnames():"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": "                if not _redefines_import(node):"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._check_name(\"variable\", node.name, node)"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(frame, astroid.ClassDef):"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": "            if not list(frame.local_attr_ancestors(node.name)):"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_name(\"class_attribute\", node.name, node)"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": "    def _recursive_check_names(self, args, node):"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check names in a possibly recursive list \u003carg\u003e\"\"\""
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": "        for arg in args:"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(arg, astroid.AssignName):"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_name(\"argument\", arg.name, node)"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": "                self._recursive_check_names(arg.elts, node)"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": "    def _find_name_group(self, node_type):"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._name_group.get(node_type, node_type)"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": "    def _raise_name_warning(self, node, node_type, name, confidence):"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": "        type_label \u003d HUMAN_READABLE_TYPES[node_type]"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": "        hint \u003d self._name_hints[node_type]"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": "        if self.config.include_naming_hint:"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": "            hint +\u003d \" (%r pattern)\" % self._name_regexps[node_type].pattern"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": "        args \u003d (type_label.capitalize(), name, hint)"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"invalid-name\", node\u003dnode, args\u003dargs, confidence\u003dconfidence)"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats[\"badname_\" + node_type] +\u003d 1"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": "    def _name_valid_due_to_whitelist(self, name: str) -\u003e bool:"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": "        return name in self.config.good_names or any("
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": "            pattern.match(name) for pattern in self._good_names_rgxs_compiled"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "-"
        },
        "content": "    def _name_invalid_due_to_blacklist(self, name: str) -\u003e bool:"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "-"
        },
        "content": "        return name in self.config.bad_names or any("
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "-"
        },
        "content": "            pattern.match(name) for pattern in self._bad_names_rgxs_compiled"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_name(self, node_type, name, node, confidence\u003dinterfaces.HIGH):"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check for a name using the type\u0027s regexp\"\"\""
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": "        def _should_exempt_from_invalid_name(node):"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": "            if node_type \u003d\u003d \"variable\":"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": "                inferred \u003d utils.safe_infer(node)"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(inferred, astroid.ClassDef):"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": "                    return True"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": "        if utils.is_inside_except(node):"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": "            clobbering, _ \u003d utils.clobber_in_except(node)"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": "            if clobbering:"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._name_valid_due_to_whitelist(name\u003dname):"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._name_invalid_due_to_blacklist(name\u003dname):"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": "            self.stats[\"badname_\" + node_type] +\u003d 1"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"blacklisted-name\", node\u003dnode, args\u003dname)"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": "        regexp \u003d self._name_regexps[node_type]"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": "        match \u003d regexp.match(name)"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": "        if _is_multi_naming_match(match, node_type, confidence):"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "-"
        },
        "content": "            name_group \u003d self._find_name_group(node_type)"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "-"
        },
        "content": "            bad_name_group \u003d self._bad_names.setdefault(name_group, {})"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "            warnings \u003d bad_name_group.setdefault(match.lastgroup, [])"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": "            warnings.append((node, node_type, name, confidence))"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": "        if match is None and not _should_exempt_from_invalid_name(node):"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": "            self._raise_name_warning(node, node_type, name, confidence)"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_assign_to_new_keyword_violation(self, name, node):"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "-"
        },
        "content": "        keyword_first_version \u003d self._name_became_keyword_in_version("
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": "            name, self.KEYWORD_ONSET"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": "        if keyword_first_version is not None:"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": "                \"assign-to-new-keyword\","
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": "                node\u003dnode,"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(name, keyword_first_version),"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": "                confidence\u003dinterfaces.HIGH,"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "-"
        },
        "content": "    def _name_became_keyword_in_version(name, rules):"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "-"
        },
        "content": "        for version, keywords in rules.items():"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "-"
        },
        "content": "            if name in keywords and sys.version_info \u003c version:"
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": "                return \".\".join(map(str, version))"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "-"
        },
        "content": "class DocStringChecker(_BasicChecker):"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0112\": ("
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Empty %s docstring\","
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "-"
        },
        "content": "            \"empty-docstring\","
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a module, function, class or method has an empty \""
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "-"
        },
        "content": "            \"docstring (it would be too easy ;).\","
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"W0132\", \"old-empty-docstring\")]},"
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0114\": ("
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Missing module docstring\","
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "-"
        },
        "content": "            \"missing-module-docstring\","
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a module has no docstring.\""
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Empty modules do not require a docstring.\","
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"C0111\", \"missing-docstring\")]},"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0115\": ("
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Missing class docstring\","
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "-"
        },
        "content": "            \"missing-class-docstring\","
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a class has no docstring.\""
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Even an empty class must have a docstring.\","
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"C0111\", \"missing-docstring\")]},"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0116\": ("
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Missing function or method docstring\","
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "-"
        },
        "content": "            \"missing-function-docstring\","
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a function or method has no docstring.\""
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Some special methods like __init__ do not require a \""
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "-"
        },
        "content": "            \"docstring.\","
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"C0111\", \"missing-docstring\")]},"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ("
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "-"
        },
        "content": "            \"no-docstring-rgx\","
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": NO_REQUIRED_DOC_RGX,"
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"regexp\","
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cregexp\u003e\","
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Regular expression which should only match \""
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "-"
        },
        "content": "                \"function or class names that do not require a \""
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "-"
        },
        "content": "                \"docstring.\","
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "-"
        },
        "content": "            \"docstring-min-length\","
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": -1,"
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"int\","
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cint\u003e\","
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": ("
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Minimum line length for functions/classes that\""
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" require docstrings, shorter ones are exempt.\""
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "-"
        },
        "content": "    def open(self):"
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats \u003d self.linter.add_stats("
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "-"
        },
        "content": "            undocumented_module\u003d0,"
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "-"
        },
        "content": "            undocumented_function\u003d0,"
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "-"
        },
        "content": "            undocumented_method\u003d0,"
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "-"
        },
        "content": "            undocumented_class\u003d0,"
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"missing-docstring\", \"empty-docstring\")"
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_module(self, node):"
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_docstring(\"module\", node)"
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"missing-docstring\", \"empty-docstring\")"
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_classdef(self, node):"
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "-"
        },
        "content": "        if self.config.no_docstring_rgx.match(node.name) is None:"
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_docstring(\"class\", node)"
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"missing-docstring\", \"empty-docstring\")"
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "-"
        },
        "content": "        if self.config.no_docstring_rgx.match(node.name) is None:"
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "-"
        },
        "content": "            ftype \u003d \"method\" if node.is_method() else \"function\""
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "-"
        },
        "content": "            if is_property_setter(node) or is_property_deleter(node):"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(node.parent.frame(), astroid.ClassDef):"
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "-"
        },
        "content": "                overridden \u003d False"
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "-"
        },
        "content": "                confidence \u003d ("
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "-"
        },
        "content": "                    interfaces.INFERENCE"
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "-"
        },
        "content": "                    if utils.has_known_bases(node.parent.frame())"
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "-"
        },
        "content": "                    else interfaces.INFERENCE_FAILURE"
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "-"
        },
        "content": "                # check if node is from a method overridden by its ancestor"
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "-"
        },
        "content": "                for ancestor in node.parent.frame().ancestors():"
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "-"
        },
        "content": "                    if node.name in ancestor and isinstance("
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "-"
        },
        "content": "                        ancestor[node.name], astroid.FunctionDef"
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "-"
        },
        "content": "                        overridden \u003d True"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "-"
        },
        "content": "                        break"
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_docstring("
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "-"
        },
        "content": "                    ftype, node, report_missing\u003dnot overridden, confidence\u003dconfidence"
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "-"
        },
        "content": "            elif isinstance(node.parent.frame(), astroid.Module):"
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_docstring(ftype, node)"
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "-"
        },
        "content": "    visit_asyncfunctiondef \u003d visit_functiondef"
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_docstring("
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "-"
        },
        "content": "        self, node_type, node, report_missing\u003dTrue, confidence\u003dinterfaces.HIGH"
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "-"
        },
        "content": "    ):"
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check the node has a non empty docstring\"\"\""
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "-"
        },
        "content": "        docstring \u003d node.doc"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        if docstring is None:"
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "            docstring \u003d _infer_dunder_doc_attribute(node)"
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "-"
        },
        "content": "        if docstring is None:"
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "-"
        },
        "content": "            if not report_missing:"
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "-"
        },
        "content": "            lines \u003d utils.get_node_last_lineno(node) - node.lineno"
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "-"
        },
        "content": "            if node_type \u003d\u003d \"module\" and not lines:"
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "-"
        },
        "content": "                # If the module has no body, there\u0027s no reason"
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "-"
        },
        "content": "                # to require a docstring."
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "-"
        },
        "content": "            max_lines \u003d self.config.docstring_min_length"
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "-"
        },
        "content": "            if node_type !\u003d \"module\" and max_lines \u003e -1 and lines \u003c max_lines:"
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "-"
        },
        "content": "            self.stats[\"undocumented_\" + node_type] +\u003d 1"
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "-"
        },
        "content": "                node.body"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "-"
        },
        "content": "                and isinstance(node.body[0], astroid.Expr)"
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "-"
        },
        "content": "                and isinstance(node.body[0].value, astroid.Call)"
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "-"
        },
        "content": "                # Most likely a string with a format call. Let\u0027s see."
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "-"
        },
        "content": "                func \u003d utils.safe_infer(node.body[0].value.func)"
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(func, astroid.BoundMethod) and isinstance("
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "-"
        },
        "content": "                    func.bound, astroid.Instance"
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Strings."
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "-"
        },
        "content": "                    if func.bound.name \u003d\u003d \"str\":"
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "-"
        },
        "content": "                    if func.bound.name in (\"str\", \"unicode\", \"bytes\"):"
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "-"
        },
        "content": "            if node_type \u003d\u003d \"module\":"
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"missing-module-docstring\""
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "-"
        },
        "content": "            elif node_type \u003d\u003d \"class\":"
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"missing-class-docstring\""
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"missing-function-docstring\""
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(message, node\u003dnode, confidence\u003dconfidence)"
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "-"
        },
        "content": "        elif not docstring.strip():"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "-"
        },
        "content": "            self.stats[\"undocumented_\" + node_type] +\u003d 1"
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "-"
        },
        "content": "                \"empty-docstring\", node\u003dnode, args\u003d(node_type,), confidence\u003dconfidence"
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "-"
        },
        "content": "class PassChecker(_BasicChecker):"
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"check if the pass statement is really necessary\"\"\""
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0107\": ("
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Unnecessary pass statement\","
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unnecessary-pass\","
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when a \"pass\" statement that can be avoided is encountered.\u0027,"
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"unnecessary-pass\")"
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_pass(self, node):"
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(node.parent.child_sequence(node)) \u003e 1 or ("
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(node.parent, (astroid.ClassDef, astroid.FunctionDef))"
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "-"
        },
        "content": "            and (node.parent.doc is not None)"
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"unnecessary-pass\", node\u003dnode)"
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_one_arg_pos_call(call):"
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Is this a call with exactly 1 argument,"
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "-"
        },
        "content": "    where that argument is positional?"
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "-"
        },
        "content": "    return isinstance(call, astroid.Call) and len(call.args) \u003d\u003d 1 and not call.keywords"
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "def _infer_dunder_doc_attribute(node):"
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    # Try to see if we have a `__doc__` attribute."
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        docstring \u003d node[\"__doc__\"]"
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    except KeyError:"
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    docstring \u003d utils.safe_infer(docstring)"
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    if not docstring:"
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    if not isinstance(docstring, astroid.Const):"
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    return docstring.value"
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "-"
        },
        "content": "class ComparisonChecker(_BasicChecker):"
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Checks for comparisons"
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "-"
        },
        "content": "    - singleton comparison: \u0027expr \u003d\u003d True\u0027, \u0027expr \u003d\u003d False\u0027 and \u0027expr \u003d\u003d None\u0027"
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "-"
        },
        "content": "    - yoda condition: \u0027const \"comp\" right\u0027 where comp can be \u0027\u003d\u003d\u0027, \u0027!\u003d\u0027, \u0027\u003c\u0027,"
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0027\u003c\u003d\u0027, \u0027\u003e\u0027 or \u0027\u003e\u003d\u0027, and right can be a variable, an attribute, a method or"
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "-"
        },
        "content": "      a function"
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0121\": ("
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Comparison to %s should be %s\","
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "-"
        },
        "content": "            \"singleton-comparison\","
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an expression is compared to singleton \""
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "-"
        },
        "content": "            \"values like True, False or None.\","
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2212,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0122\": ("
      },
      {
        "lineNumber": 2213,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Comparison should be %s\","
      },
      {
        "lineNumber": 2214,
        "author": {
          "gitId": "-"
        },
        "content": "            \"misplaced-comparison-constant\","
      },
      {
        "lineNumber": 2215,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the constant is placed on the left side \""
      },
      {
        "lineNumber": 2216,
        "author": {
          "gitId": "-"
        },
        "content": "            \"of a comparison. It is usually clearer in intent to \""
      },
      {
        "lineNumber": 2217,
        "author": {
          "gitId": "-"
        },
        "content": "            \"place it in the right hand side of the comparison.\","
      },
      {
        "lineNumber": 2218,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2219,
        "author": {
          "gitId": "-"
        },
        "content": "        \"C0123\": ("
      },
      {
        "lineNumber": 2220,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using type() instead of isinstance() for a typecheck.\","
      },
      {
        "lineNumber": 2221,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unidiomatic-typecheck\","
      },
      {
        "lineNumber": 2222,
        "author": {
          "gitId": "-"
        },
        "content": "            \"The idiomatic way to perform an explicit typecheck in \""
      },
      {
        "lineNumber": 2223,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Python is to use isinstance(x, Y) rather than \""
      },
      {
        "lineNumber": 2224,
        "author": {
          "gitId": "-"
        },
        "content": "            \"type(x) \u003d\u003d Y, type(x) is Y. Though there are unusual \""
      },
      {
        "lineNumber": 2225,
        "author": {
          "gitId": "-"
        },
        "content": "            \"situations where these give different results.\","
      },
      {
        "lineNumber": 2226,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"W0154\", \"old-unidiomatic-typecheck\")]},"
      },
      {
        "lineNumber": 2227,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2228,
        "author": {
          "gitId": "-"
        },
        "content": "        \"R0123\": ("
      },
      {
        "lineNumber": 2229,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Comparison to literal\","
      },
      {
        "lineNumber": 2230,
        "author": {
          "gitId": "-"
        },
        "content": "            \"literal-comparison\","
      },
      {
        "lineNumber": 2231,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when comparing an object to a literal, which is usually \""
      },
      {
        "lineNumber": 2232,
        "author": {
          "gitId": "-"
        },
        "content": "            \"what you do not want to do, since you can compare to a different \""
      },
      {
        "lineNumber": 2233,
        "author": {
          "gitId": "-"
        },
        "content": "            \"literal than what was expected altogether.\","
      },
      {
        "lineNumber": 2234,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2235,
        "author": {
          "gitId": "-"
        },
        "content": "        \"R0124\": ("
      },
      {
        "lineNumber": 2236,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Redundant comparison - %s\","
      },
      {
        "lineNumber": 2237,
        "author": {
          "gitId": "-"
        },
        "content": "            \"comparison-with-itself\","
      },
      {
        "lineNumber": 2238,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when something is compared against itself.\","
      },
      {
        "lineNumber": 2239,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2240,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W0143\": ("
      },
      {
        "lineNumber": 2241,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Comparing against a callable, did you omit the parenthesis?\","
      },
      {
        "lineNumber": 2242,
        "author": {
          "gitId": "-"
        },
        "content": "            \"comparison-with-callable\","
      },
      {
        "lineNumber": 2243,
        "author": {
          "gitId": "-"
        },
        "content": "            \"This message is emitted when pylint detects that a comparison with a \""
      },
      {
        "lineNumber": 2244,
        "author": {
          "gitId": "-"
        },
        "content": "            \"callable was made, which might suggest that some parenthesis were omitted, \""
      },
      {
        "lineNumber": 2245,
        "author": {
          "gitId": "-"
        },
        "content": "            \"resulting in potential unwanted behaviour.\","
      },
      {
        "lineNumber": 2246,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 2247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2249,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_singleton_comparison(self, singleton, root_node, negative_check\u003dFalse):"
      },
      {
        "lineNumber": 2250,
        "author": {
          "gitId": "-"
        },
        "content": "        if singleton.value is True:"
      },
      {
        "lineNumber": 2251,
        "author": {
          "gitId": "-"
        },
        "content": "            if not negative_check:"
      },
      {
        "lineNumber": 2252,
        "author": {
          "gitId": "-"
        },
        "content": "                suggestion \u003d \"just \u0027expr\u0027\""
      },
      {
        "lineNumber": 2253,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 2254,
        "author": {
          "gitId": "-"
        },
        "content": "                suggestion \u003d \"just \u0027not expr\u0027\""
      },
      {
        "lineNumber": 2255,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 2256,
        "author": {
          "gitId": "-"
        },
        "content": "                \"singleton-comparison\", node\u003droot_node, args\u003d(True, suggestion)"
      },
      {
        "lineNumber": 2257,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 2258,
        "author": {
          "gitId": "-"
        },
        "content": "        elif singleton.value is False:"
      },
      {
        "lineNumber": 2259,
        "author": {
          "gitId": "-"
        },
        "content": "            if not negative_check:"
      },
      {
        "lineNumber": 2260,
        "author": {
          "gitId": "-"
        },
        "content": "                suggestion \u003d \"\u0027not expr\u0027\""
      },
      {
        "lineNumber": 2261,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 2262,
        "author": {
          "gitId": "-"
        },
        "content": "                suggestion \u003d \"\u0027expr\u0027\""
      },
      {
        "lineNumber": 2263,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 2264,
        "author": {
          "gitId": "-"
        },
        "content": "                \"singleton-comparison\", node\u003droot_node, args\u003d(False, suggestion)"
      },
      {
        "lineNumber": 2265,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 2266,
        "author": {
          "gitId": "-"
        },
        "content": "        elif singleton.value is None:"
      },
      {
        "lineNumber": 2267,
        "author": {
          "gitId": "-"
        },
        "content": "            if not negative_check:"
      },
      {
        "lineNumber": 2268,
        "author": {
          "gitId": "-"
        },
        "content": "                suggestion \u003d \"\u0027expr is None\u0027\""
      },
      {
        "lineNumber": 2269,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 2270,
        "author": {
          "gitId": "-"
        },
        "content": "                suggestion \u003d \"\u0027expr is not None\u0027\""
      },
      {
        "lineNumber": 2271,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 2272,
        "author": {
          "gitId": "-"
        },
        "content": "                \"singleton-comparison\", node\u003droot_node, args\u003d(None, suggestion)"
      },
      {
        "lineNumber": 2273,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 2274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2275,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_literal_comparison(self, literal, node):"
      },
      {
        "lineNumber": 2276,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check if we compare to a literal, which is usually what we do not want to do.\"\"\""
      },
      {
        "lineNumber": 2277,
        "author": {
          "gitId": "-"
        },
        "content": "        nodes \u003d (astroid.List, astroid.Tuple, astroid.Dict, astroid.Set)"
      },
      {
        "lineNumber": 2278,
        "author": {
          "gitId": "-"
        },
        "content": "        is_other_literal \u003d isinstance(literal, nodes)"
      },
      {
        "lineNumber": 2279,
        "author": {
          "gitId": "-"
        },
        "content": "        is_const \u003d False"
      },
      {
        "lineNumber": 2280,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(literal, astroid.Const):"
      },
      {
        "lineNumber": 2281,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(literal.value, bool) or literal.value is None:"
      },
      {
        "lineNumber": 2282,
        "author": {
          "gitId": "-"
        },
        "content": "                # Not interested in this values."
      },
      {
        "lineNumber": 2283,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 2284,
        "author": {
          "gitId": "-"
        },
        "content": "            is_const \u003d isinstance(literal.value, (bytes, str, int, float))"
      },
      {
        "lineNumber": 2285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2286,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_const or is_other_literal:"
      },
      {
        "lineNumber": 2287,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"literal-comparison\", node\u003dnode)"
      },
      {
        "lineNumber": 2288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2289,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_misplaced_constant(self, node, left, right, operator):"
      },
      {
        "lineNumber": 2290,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(right, astroid.Const):"
      },
      {
        "lineNumber": 2291,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 2292,
        "author": {
          "gitId": "-"
        },
        "content": "        operator \u003d REVERSED_COMPS.get(operator, operator)"
      },
      {
        "lineNumber": 2293,
        "author": {
          "gitId": "-"
        },
        "content": "        suggestion \u003d \"%s %s %r\" % (right.as_string(), operator, left.value)"
      },
      {
        "lineNumber": 2294,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"misplaced-comparison-constant\", node\u003dnode, args\u003d(suggestion,))"
      },
      {
        "lineNumber": 2295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2296,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_logical_tautology(self, node):"
      },
      {
        "lineNumber": 2297,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check if identifier is compared against itself."
      },
      {
        "lineNumber": 2298,
        "author": {
          "gitId": "-"
        },
        "content": "        :param node: Compare node"
      },
      {
        "lineNumber": 2299,
        "author": {
          "gitId": "-"
        },
        "content": "        :type node: astroid.node_classes.Compare"
      },
      {
        "lineNumber": 2300,
        "author": {
          "gitId": "-"
        },
        "content": "        :Example:"
      },
      {
        "lineNumber": 2301,
        "author": {
          "gitId": "-"
        },
        "content": "        val \u003d 786"
      },
      {
        "lineNumber": 2302,
        "author": {
          "gitId": "-"
        },
        "content": "        if val \u003d\u003d val:  # [comparison-with-itself]"
      },
      {
        "lineNumber": 2303,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 2304,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 2305,
        "author": {
          "gitId": "-"
        },
        "content": "        left_operand \u003d node.left"
      },
      {
        "lineNumber": 2306,
        "author": {
          "gitId": "-"
        },
        "content": "        right_operand \u003d node.ops[0][1]"
      },
      {
        "lineNumber": 2307,
        "author": {
          "gitId": "-"
        },
        "content": "        operator \u003d node.ops[0][0]"
      },
      {
        "lineNumber": 2308,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(left_operand, astroid.Const) and isinstance("
      },
      {
        "lineNumber": 2309,
        "author": {
          "gitId": "-"
        },
        "content": "            right_operand, astroid.Const"
      },
      {
        "lineNumber": 2310,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 2311,
        "author": {
          "gitId": "-"
        },
        "content": "            left_operand \u003d left_operand.value"
      },
      {
        "lineNumber": 2312,
        "author": {
          "gitId": "-"
        },
        "content": "            right_operand \u003d right_operand.value"
      },
      {
        "lineNumber": 2313,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(left_operand, astroid.Name) and isinstance("
      },
      {
        "lineNumber": 2314,
        "author": {
          "gitId": "-"
        },
        "content": "            right_operand, astroid.Name"
      },
      {
        "lineNumber": 2315,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 2316,
        "author": {
          "gitId": "-"
        },
        "content": "            left_operand \u003d left_operand.name"
      },
      {
        "lineNumber": 2317,
        "author": {
          "gitId": "-"
        },
        "content": "            right_operand \u003d right_operand.name"
      },
      {
        "lineNumber": 2318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2319,
        "author": {
          "gitId": "-"
        },
        "content": "        if left_operand \u003d\u003d right_operand:"
      },
      {
        "lineNumber": 2320,
        "author": {
          "gitId": "-"
        },
        "content": "            suggestion \u003d \"%s %s %s\" % (left_operand, operator, right_operand)"
      },
      {
        "lineNumber": 2321,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"comparison-with-itself\", node\u003dnode, args\u003d(suggestion,))"
      },
      {
        "lineNumber": 2322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2323,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_callable_comparison(self, node):"
      },
      {
        "lineNumber": 2324,
        "author": {
          "gitId": "-"
        },
        "content": "        operator \u003d node.ops[0][0]"
      },
      {
        "lineNumber": 2325,
        "author": {
          "gitId": "-"
        },
        "content": "        if operator not in COMPARISON_OPERATORS:"
      },
      {
        "lineNumber": 2326,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 2327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2328,
        "author": {
          "gitId": "-"
        },
        "content": "        bare_callables \u003d (astroid.FunctionDef, astroid.BoundMethod)"
      },
      {
        "lineNumber": 2329,
        "author": {
          "gitId": "-"
        },
        "content": "        left_operand, right_operand \u003d node.left, node.ops[0][1]"
      },
      {
        "lineNumber": 2330,
        "author": {
          "gitId": "-"
        },
        "content": "        # this message should be emitted only when there is comparison of bare callable"
      },
      {
        "lineNumber": 2331,
        "author": {
          "gitId": "-"
        },
        "content": "        # with non bare callable."
      },
      {
        "lineNumber": 2332,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 2333,
        "author": {
          "gitId": "-"
        },
        "content": "            sum("
      },
      {
        "lineNumber": 2334,
        "author": {
          "gitId": "-"
        },
        "content": "                1"
      },
      {
        "lineNumber": 2335,
        "author": {
          "gitId": "-"
        },
        "content": "                for operand in (left_operand, right_operand)"
      },
      {
        "lineNumber": 2336,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(utils.safe_infer(operand), bare_callables)"
      },
      {
        "lineNumber": 2337,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 2338,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003d\u003d 1"
      },
      {
        "lineNumber": 2339,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 2340,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"comparison-with-callable\", node\u003dnode)"
      },
      {
        "lineNumber": 2341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2342,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages("
      },
      {
        "lineNumber": 2343,
        "author": {
          "gitId": "-"
        },
        "content": "        \"singleton-comparison\","
      },
      {
        "lineNumber": 2344,
        "author": {
          "gitId": "-"
        },
        "content": "        \"misplaced-comparison-constant\","
      },
      {
        "lineNumber": 2345,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unidiomatic-typecheck\","
      },
      {
        "lineNumber": 2346,
        "author": {
          "gitId": "-"
        },
        "content": "        \"literal-comparison\","
      },
      {
        "lineNumber": 2347,
        "author": {
          "gitId": "-"
        },
        "content": "        \"comparison-with-itself\","
      },
      {
        "lineNumber": 2348,
        "author": {
          "gitId": "-"
        },
        "content": "        \"comparison-with-callable\","
      },
      {
        "lineNumber": 2349,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 2350,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_compare(self, node):"
      },
      {
        "lineNumber": 2351,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_callable_comparison(node)"
      },
      {
        "lineNumber": 2352,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_logical_tautology(node)"
      },
      {
        "lineNumber": 2353,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_unidiomatic_typecheck(node)"
      },
      {
        "lineNumber": 2354,
        "author": {
          "gitId": "-"
        },
        "content": "        # NOTE: this checker only works with binary comparisons like \u0027x \u003d\u003d 42\u0027"
      },
      {
        "lineNumber": 2355,
        "author": {
          "gitId": "-"
        },
        "content": "        # but not \u0027x \u003d\u003d y \u003d\u003d 42\u0027"
      },
      {
        "lineNumber": 2356,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(node.ops) !\u003d 1:"
      },
      {
        "lineNumber": 2357,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 2358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2359,
        "author": {
          "gitId": "-"
        },
        "content": "        left \u003d node.left"
      },
      {
        "lineNumber": 2360,
        "author": {
          "gitId": "-"
        },
        "content": "        operator, right \u003d node.ops[0]"
      },
      {
        "lineNumber": 2361,
        "author": {
          "gitId": "-"
        },
        "content": "        if operator in COMPARISON_OPERATORS and isinstance(left, astroid.Const):"
      },
      {
        "lineNumber": 2362,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_misplaced_constant(node, left, right, operator)"
      },
      {
        "lineNumber": 2363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2364,
        "author": {
          "gitId": "-"
        },
        "content": "        if operator \u003d\u003d \"\u003d\u003d\":"
      },
      {
        "lineNumber": 2365,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(left, astroid.Const):"
      },
      {
        "lineNumber": 2366,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_singleton_comparison(left, node)"
      },
      {
        "lineNumber": 2367,
        "author": {
          "gitId": "-"
        },
        "content": "            elif isinstance(right, astroid.Const):"
      },
      {
        "lineNumber": 2368,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_singleton_comparison(right, node)"
      },
      {
        "lineNumber": 2369,
        "author": {
          "gitId": "-"
        },
        "content": "        if operator \u003d\u003d \"!\u003d\":"
      },
      {
        "lineNumber": 2370,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(right, astroid.Const):"
      },
      {
        "lineNumber": 2371,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_singleton_comparison(right, node, negative_check\u003dTrue)"
      },
      {
        "lineNumber": 2372,
        "author": {
          "gitId": "-"
        },
        "content": "        if operator in (\"is\", \"is not\"):"
      },
      {
        "lineNumber": 2373,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_literal_comparison(right, node)"
      },
      {
        "lineNumber": 2374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2375,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_unidiomatic_typecheck(self, node):"
      },
      {
        "lineNumber": 2376,
        "author": {
          "gitId": "-"
        },
        "content": "        operator, right \u003d node.ops[0]"
      },
      {
        "lineNumber": 2377,
        "author": {
          "gitId": "-"
        },
        "content": "        if operator in TYPECHECK_COMPARISON_OPERATORS:"
      },
      {
        "lineNumber": 2378,
        "author": {
          "gitId": "-"
        },
        "content": "            left \u003d node.left"
      },
      {
        "lineNumber": 2379,
        "author": {
          "gitId": "-"
        },
        "content": "            if _is_one_arg_pos_call(left):"
      },
      {
        "lineNumber": 2380,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_type_x_is_y(node, left, operator, right)"
      },
      {
        "lineNumber": 2381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2382,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_type_x_is_y(self, node, left, operator, right):"
      },
      {
        "lineNumber": 2383,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check for expressions like type(x) \u003d\u003d Y.\"\"\""
      },
      {
        "lineNumber": 2384,
        "author": {
          "gitId": "-"
        },
        "content": "        left_func \u003d utils.safe_infer(left.func)"
      },
      {
        "lineNumber": 2385,
        "author": {
          "gitId": "-"
        },
        "content": "        if not ("
      },
      {
        "lineNumber": 2386,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(left_func, astroid.ClassDef) and left_func.qname() \u003d\u003d TYPE_QNAME"
      },
      {
        "lineNumber": 2387,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 2388,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 2389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2390,
        "author": {
          "gitId": "-"
        },
        "content": "        if operator in (\"is\", \"is not\") and _is_one_arg_pos_call(right):"
      },
      {
        "lineNumber": 2391,
        "author": {
          "gitId": "-"
        },
        "content": "            right_func \u003d utils.safe_infer(right.func)"
      },
      {
        "lineNumber": 2392,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 2393,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(right_func, astroid.ClassDef)"
      },
      {
        "lineNumber": 2394,
        "author": {
          "gitId": "-"
        },
        "content": "                and right_func.qname() \u003d\u003d TYPE_QNAME"
      },
      {
        "lineNumber": 2395,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 2396,
        "author": {
          "gitId": "-"
        },
        "content": "                # type(x) \u003d\u003d type(a)"
      },
      {
        "lineNumber": 2397,
        "author": {
          "gitId": "-"
        },
        "content": "                right_arg \u003d utils.safe_infer(right.args[0])"
      },
      {
        "lineNumber": 2398,
        "author": {
          "gitId": "-"
        },
        "content": "                if not isinstance(right_arg, LITERAL_NODE_TYPES):"
      },
      {
        "lineNumber": 2399,
        "author": {
          "gitId": "-"
        },
        "content": "                    # not e.g. type(x) \u003d\u003d type([])"
      },
      {
        "lineNumber": 2400,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 2401,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"unidiomatic-typecheck\", node\u003dnode)"
      },
      {
        "lineNumber": 2402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2404,
        "author": {
          "gitId": "-"
        },
        "content": "def register(linter):"
      },
      {
        "lineNumber": 2405,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"required method to auto register this checker\"\"\""
      },
      {
        "lineNumber": 2406,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(BasicErrorChecker(linter))"
      },
      {
        "lineNumber": 2407,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(BasicChecker(linter))"
      },
      {
        "lineNumber": 2408,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(NameChecker(linter))"
      },
      {
        "lineNumber": 2409,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(DocStringChecker(linter))"
      },
      {
        "lineNumber": 2410,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(PassChecker(linter))"
      },
      {
        "lineNumber": 2411,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(ComparisonChecker(linter))"
      }
    ],
    "authorContributionMap": {
      "Anubhav": 12,
      "Claudiu Popa": 18,
      "-": 2380,
      "Nick Drozd": 1
    }
  },
  {
    "path": "pylint/checkers/classes.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2006-2016 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2010 Maarten ter Huurne \u003cmaarten@treewalker.org\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012-2014 Google, Inc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012 FELD Boris \u003clothiraldan@gmail.com\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2013-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Michal Nowikowski \u003cgodfryd@gmail.com\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Brett Cannon \u003cbrett@python.org\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 David Pursehouse \u003cdavid.pursehouse@gmail.com\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Dmitry Pribysh \u003cdmand@yandex.ru\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016-2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Alexander Todorov \u003catodorov@otb.bg\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Anthony Foglia \u003cafoglia@users.noreply.github.com\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Florian Bruhin \u003cme@the-compiler.org\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Moises Lopez \u003cmoylop260@vauxoo.com\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Jakub Wilk \u003cjwilk@jwilk.net\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 hippo91 \u003cguillaume.peillex@gmail.com\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 ssolanki \u003csushobhitsolanki@gmail.com\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ashley Whetter \u003cashley@awhetter.co.uk\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Anthony Sottile \u003casottile@umich.edu\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ben Green \u003cbenhgreen@icloud.com\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ville Skyttä \u003cville.skytta@upcloud.com\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Nick Drozd \u003cnicholasdrozd@gmail.com\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"classes checker for Python code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import collections"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "from itertools import chain, zip_longest"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid import decorators, objects"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.bases import BUILTINS, Generator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.exceptions import DuplicateBasesError, InconsistentMroError"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.scoped_nodes import function_to_method"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers import BaseChecker"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers.utils import ("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    PYMETHODS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    SPECIAL_METHODS_PARAMS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    check_messages,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    class_is_abstract,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    decorated_with,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    decorated_with_property,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    has_known_bases,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    is_attr_private,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    is_attr_protected,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    is_builtin_object,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    is_comprehension,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    is_iterable,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    is_property_setter,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    is_property_setter_or_deleter,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    is_protocol_class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    node_frame_class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    overrides_a_method,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    safe_infer,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    unimplemented_abstract_methods,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.interfaces import IAstroidChecker"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.utils import get_global_option"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "NEXT_METHOD \u003d \"__next__\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "INVALID_BASE_CLASSES \u003d {\"bool\", \"range\", \"slice\", \"memoryview\"}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "BUILTIN_DECORATORS \u003d {\"builtins.property\", \"builtins.classmethod\"}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "# Dealing with useless override detection, with regard"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "# to parameters vs arguments"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "_CallSignature \u003d collections.namedtuple("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \"_CallSignature\", \"args kws starred_args starred_kws\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "_ParameterSignature \u003d collections.namedtuple("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \"_ParameterSignature\", \"args kwonlyargs varargs kwargs\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "def _signature_from_call(call):"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    kws \u003d {}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    args \u003d []"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    starred_kws \u003d []"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    starred_args \u003d []"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    for keyword in call.keywords or []:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        arg, value \u003d keyword.arg, keyword.value"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if arg is None and isinstance(value, astroid.Name):"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            # Starred node and we are interested only in names,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            # otherwise some transformation might occur for the parameter."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            starred_kws.append(value.name)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(value, astroid.Name):"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            kws[arg] \u003d value.name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            kws[arg] \u003d None"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    for arg in call.args:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(arg, astroid.Starred) and isinstance(arg.value, astroid.Name):"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            # Positional variadic and a name, otherwise some transformation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            # might have occurred."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            starred_args.append(arg.value.name)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(arg, astroid.Name):"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            args.append(arg.name)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            args.append(None)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    return _CallSignature(args, kws, starred_args, starred_kws)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "def _signature_from_arguments(arguments):"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    kwarg \u003d arguments.kwarg"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    vararg \u003d arguments.vararg"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    args \u003d [arg.name for arg in arguments.args if arg.name !\u003d \"self\"]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    kwonlyargs \u003d [arg.name for arg in arguments.kwonlyargs]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    return _ParameterSignature(args, kwonlyargs, vararg, kwarg)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "def _definition_equivalent_to_call(definition, call):"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Check if a definition signature is equivalent to a call.\"\"\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    if definition.kwargs:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        same_kw_variadics \u003d definition.kwargs in call.starred_kws"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        same_kw_variadics \u003d not call.starred_kws"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    if definition.varargs:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        same_args_variadics \u003d definition.varargs in call.starred_args"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        same_args_variadics \u003d not call.starred_args"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    same_kwonlyargs \u003d all(kw in call.kws for kw in definition.kwonlyargs)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    same_args \u003d definition.args \u003d\u003d call.args"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    no_additional_kwarg_arguments \u003d True"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    if call.kws:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        for keyword in call.kws:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            is_arg \u003d keyword in call.args"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            is_kwonly \u003d keyword in definition.kwonlyargs"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            if not is_arg and not is_kwonly:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                # Maybe this argument goes into **kwargs,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                # or it is an extraneous argument."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                # In any case, the signature is different than"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                # the call site, which stops our search."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                no_additional_kwarg_arguments \u003d False"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    return all("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            same_args,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            same_kwonlyargs,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            same_args_variadics,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            same_kw_variadics,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            no_additional_kwarg_arguments,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "# Deal with parameters overridding in two methods."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "def _positional_parameters(method):"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    positional \u003d method.args.args"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    if method.type in (\"classmethod\", \"method\"):"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        positional \u003d positional[1:]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    return positional"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_node_type(node, potential_types):"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    Return the type of the node if it exists in potential_types."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    Args:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        node (astroid.node): node to get the type of."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        potential_types (tuple): potential types of the node."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        type: type of the node or None."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    for potential_type in potential_types:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, potential_type):"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return potential_type"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    return None"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "def _check_arg_equality(node_a, node_b, attr_name):"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    Check equality of nodes based on the comparison of their attributes named attr_name."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    Args:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        node_a (astroid.node): first node to compare."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        node_b (astroid.node): second node to compare."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        attr_name (str): name of the nodes attribute to use for comparison."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        bool: True if node_a.attr_name \u003d\u003d node_b.attr_name, False otherwise."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    return getattr(node_a, attr_name) \u003d\u003d getattr(node_b, attr_name)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "def _has_different_parameters_default_value(original, overridden):"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    Check if original and overridden methods arguments have different default values"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    Return True if one of the overridden arguments has a default"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    value different from the default value of the original argument"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    If one of the method doesn\u0027t have argument (.args is None)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    if original.args is None or overridden.args is None:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    all_args \u003d chain(original.args, original.kwonlyargs)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    original_param_names \u003d [param.name for param in all_args]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    default_missing \u003d object()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    for param_name in original_param_names:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            original_default \u003d original.default_value(param_name)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.exceptions.NoDefault:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            original_default \u003d default_missing"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            overridden_default \u003d overridden.default_value(param_name)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.exceptions.NoDefault:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            overridden_default \u003d default_missing"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        default_list \u003d ["
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            arg \u003d\u003d default_missing for arg in (original_default, overridden_default)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        if any(default_list) and not all(default_list):"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            # Only one arg has no default value"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        astroid_type_compared_attr \u003d {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.Const: \"value\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.ClassDef: \"name\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.Tuple: \"elts\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.List: \"elts\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        handled_types \u003d tuple("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid_type for astroid_type in astroid_type_compared_attr"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        original_type \u003d _get_node_type(original_default, handled_types)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if original_type:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            #  We handle only astroid types that are inside the dict astroid_type_compared_attr"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(overridden_default, original_type):"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                #  Two args with same name but different types"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if not _check_arg_equality("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                original_default,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                overridden_default,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid_type_compared_attr[original_type],"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                # Two args with same type but different values"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "def _has_different_parameters(original, overridden, dummy_parameter_regex):"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    zipped \u003d zip_longest(original, overridden)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    for original_param, overridden_param in zipped:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        params \u003d (original_param, overridden_param)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        if not all(params):"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        names \u003d [param.name for param in params]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        if any(map(dummy_parameter_regex.match, names)):"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if original_param.name !\u003d overridden_param.name:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "def _different_parameters(original, overridden, dummy_parameter_regex):"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Determine if the two methods have different parameters"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    They are considered to have different parameters if:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "       * they have different positional parameters, including different names"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "       * one of the methods is having variadics, while the other is not"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "       * they have different keyword only parameters."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    original_parameters \u003d _positional_parameters(original)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    overridden_parameters \u003d _positional_parameters(overridden)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    different_positional \u003d _has_different_parameters("
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        original_parameters, overridden_parameters, dummy_parameter_regex"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    different_kwonly \u003d _has_different_parameters("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        original.args.kwonlyargs, overridden.args.kwonlyargs, dummy_parameter_regex"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    if original.name in PYMETHODS:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore the difference for special methods. If the parameter"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        # numbers are different, then that is going to be caught by"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        # unexpected-special-method-signature."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        # If the names are different, it doesn\u0027t matter, since they can\u0027t"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        # be used as keyword arguments anyway."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        different_positional \u003d different_kwonly \u003d False"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    # Both or none should have extra variadics, otherwise the method"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    # loses or gains capabilities that are not reflected into the parent method,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    # leading to potential inconsistencies in the code."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    different_kwarg \u003d ("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        sum(1 for param in (original.args.kwarg, overridden.args.kwarg) if not param)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d 1"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    different_vararg \u003d ("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        sum(1 for param in (original.args.vararg, overridden.args.vararg) if not param)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d 1"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    return any("
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        (different_positional, different_kwarg, different_vararg, different_kwonly)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_invalid_base_class(cls):"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    return cls.name in INVALID_BASE_CLASSES and is_builtin_object(cls)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "def _has_data_descriptor(cls, attr):"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d cls.getattr(attr)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    for attribute in attributes:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            for inferred in attribute.infer():"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(inferred, astroid.Instance):"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                    try:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                        inferred.getattr(\"__get__\")"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                        inferred.getattr(\"__set__\")"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                    except astroid.NotFoundError:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                        return True"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            # Can\u0027t infer, avoid emitting a false positive in this case."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "def _called_in_methods(func, klass, methods):"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Check if the func was called in any of the given methods,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    belonging to the *klass*. Returns True if so, False otherwise."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    if not isinstance(func, astroid.FunctionDef):"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    for method in methods:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d klass.getattr(method)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.NotFoundError:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        for infer_method in inferred:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            for call in infer_method.nodes_of_class(astroid.Call):"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "                    bound \u003d next(call.func.infer())"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                except (astroid.InferenceError, StopIteration):"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "                if not isinstance(bound, astroid.BoundMethod):"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                func_obj \u003d bound._proxied"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(func_obj, astroid.UnboundMethod):"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                    func_obj \u003d func_obj._proxied"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                if func_obj.name \u003d\u003d func.name:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "                    return True"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_attribute_property(name, klass):"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Check if the given attribute *name* is a property in the given *klass*."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    It will look for `property` calls or for functions"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    with the given name, decorated by `property` or `property`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    subclasses."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns ``True`` if the name is a property in the given klass,"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    ``False`` otherwise."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        attributes \u003d klass.getattr(name)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    except astroid.NotFoundError:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    property_name \u003d \"{}.property\".format(BUILTINS)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    for attr in attributes:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        if attr is astroid.Uninferable:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d next(attr.infer())"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(inferred, astroid.FunctionDef) and decorated_with_property("
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        if inferred.pytype() !\u003d property_name:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        cls \u003d node_frame_class(inferred)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        if cls \u003d\u003d klass.declared_metaclass():"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "def _has_bare_super_call(fundef_node):"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    for call in fundef_node.nodes_of_class(astroid.Call):"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        func \u003d call.func"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(func, astroid.Name) and func.name \u003d\u003d \"super\" and not call.args:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "def _safe_infer_call_result(node, caller, context\u003dNone):"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    Safely infer the return value of a function."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns None if inference failed or if there is some ambiguity (more than"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    one node has been inferred). Otherwise returns inferred value."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        inferit \u003d node.infer_call_result(caller, context\u003dcontext)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d next(inferit)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    except astroid.InferenceError:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        return None  # inference failed"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    except StopIteration:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        return None  # no values inferred"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        next(inferit)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        return None  # there is ambiguity on the inferred node"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    except astroid.InferenceError:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        return None  # there is some kind of ambiguity"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    except StopIteration:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        return value"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "def _has_same_layout_slots(slots, assigned_value):"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    inferred \u003d next(assigned_value.infer())"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(inferred, astroid.ClassDef):"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        other_slots \u003d inferred.slots()"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        if all("
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "            first_slot and second_slot and first_slot.value \u003d\u003d second_slot.value"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            for (first_slot, second_slot) in zip_longest(slots, other_slots)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "MSGS \u003d {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    \"F0202\": ("
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unable to check methods signature (%s / %s)\","
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        \"method-check-failed\","
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when Pylint has been unable to check methods signature \""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        \"compatibility for an unexpected reason. Please report this kind \""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        \"if you don\u0027t make sense of it.\","
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0202\": ("
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        \"An attribute defined in %s line %s hides this method\","
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        \"method-hidden\","
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class defines a method which is hidden by an \""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        \"instance attribute from an ancestor class or set by some \""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        \"client code.\","
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0203\": ("
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Access to member %r before its definition line %s\","
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        \"access-member-before-definition\","
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an instance member is accessed before it\u0027s actually assigned.\","
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0201\": ("
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Attribute %r defined outside __init__\","
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        \"attribute-defined-outside-init\","
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an instance attribute is defined outside the __init__ method.\","
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0212\": ("
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Access to a protected member %s of a client class\",  # E0214"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        \"protected-access\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a protected member (i.e. class member with a name \""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        \"beginning with an underscore) is access outside the class or a \""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        \"descendant of the class where it\u0027s defined.\","
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0211\": ("
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Method has no argument\","
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-method-argument\","
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a method which should have the bound instance as \""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        \"first argument has no argument defined.\","
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0213\": ("
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Method should have \"self\" as first argument\u0027,"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-self-argument\","
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Used when a method has an attribute different the \"self\" as \u0027"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        \"first argument. This is considered as an error since this is \""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        \"a so common convention that you shouldn\u0027t break it!\","
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0202\": ("
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Class method %s should have %s as first argument\","
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-classmethod-argument\","
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class method has a first argument named differently \""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        \"than the value specified in valid-classmethod-first-arg option \""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027(default to \"cls\"), recommended to easily differentiate them \u0027"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        \"from regular instance methods.\","
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0203\": ("
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Metaclass method %s should have %s as first argument\","
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-mcs-method-argument\","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a metaclass method has a first argument named \""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        \"differently than the value specified in valid-classmethod-first\""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027-arg option (default to \"cls\"), recommended to easily \u0027"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        \"differentiate them from regular instance methods.\","
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0204\": ("
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Metaclass class method %s should have %s as first argument\","
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-mcs-classmethod-argument\","
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a metaclass class method has a first argument named \""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        \"differently than the value specified in valid-metaclass-\""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027classmethod-first-arg option (default to \"mcs\"), recommended to \u0027"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        \"easily differentiate them from regular instance methods.\","
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0211\": ("
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Static method with %r as first argument\","
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-staticmethod-argument\","
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Used when a static method has \"self\" or a value specified in \u0027"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        \"valid-classmethod-first-arg option or \""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "        \"valid-metaclass-classmethod-first-arg option as first argument.\","
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    \"R0201\": ("
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Method could be a function\","
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-self-use\","
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a method doesn\u0027t use its bound instance, and so could \""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        \"be written as a function.\","
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0221\": ("
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Parameters differ from %s %r method\","
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        \"arguments-differ\","
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a method has a different number of arguments than in \""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        \"the implemented interface or in an overridden method.\","
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0222\": ("
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Signature differs from %s %r method\","
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        \"signature-differs\","
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a method signature is different than in the \""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        \"implemented interface or in an overridden method.\","
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0223\": ("
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Method %r is abstract in class %r but is not overridden\","
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        \"abstract-method\","
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an abstract method (i.e. raise NotImplementedError) is \""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        \"not overridden in concrete class.\","
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0231\": ("
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        \"__init__ method from base class %r is not called\","
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        \"super-init-not-called\","
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an ancestor class method has an __init__ method \""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        \"which is not called by a derived class.\","
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0232\": ("
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Class has no __init__ method\","
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-init\","
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class has no __init__ method, neither its parent classes.\","
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0233\": ("
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        \"__init__ method from a non direct base class %r is called\","
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        \"non-parent-init-called\","
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an __init__ method is called on a class which is not \""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        \"in the direct ancestors for the analysed class.\","
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0235\": ("
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Useless super delegation in method %r\","
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        \"useless-super-delegation\","
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used whenever we can detect that an overridden method is useless, \""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "        \"relying on super() delegation to do the same thing as another method \""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        \"from the MRO.\","
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0236\": ("
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Method %r was expected to be %r, found it instead as %r\","
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-overridden-method\","
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when we detect that a method was overridden as a property \""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        \"or the other way around, which could result in potential bugs at \""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        \"runtime.\","
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0236\": ("
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Invalid object %r in __slots__, must contain only non empty strings\","
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-slots-object\","
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an invalid (non-string) object occurs in __slots__.\","
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0237\": ("
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Assigning to attribute %r not defined in class slots\","
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        \"assigning-non-slot\","
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when assigning to an attribute not defined in the class slots.\","
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0238\": ("
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Invalid __slots__ object\","
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-slots\","
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an invalid __slots__ is found in class. \""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Only a string, an iterable or a sequence is permitted.\","
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0239\": ("
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Inheriting %r, which is not a class.\","
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        \"inherit-non-class\","
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class inherits from something which is not a class.\","
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0240\": ("
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Inconsistent method resolution order for class %r\","
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        \"inconsistent-mro\","
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class has an inconsistent method resolution order.\","
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0241\": ("
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Duplicate bases for class %r\","
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        \"duplicate-bases\","
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class has duplicate bases.\","
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0242\": ("
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Value %r in slots conflicts with class variable\","
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        \"class-variable-slots-conflict\","
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a value in __slots__ conflicts with a class variable, property or method.\","
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "    \"R0202\": ("
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Consider using a decorator instead of calling classmethod\","
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-classmethod-decorator\","
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class method is defined without using the decorator syntax.\","
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    \"R0203\": ("
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Consider using a decorator instead of calling staticmethod\","
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-staticmethod-decorator\","
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a static method is defined without using the decorator syntax.\","
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0205\": ("
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Class __slots__ should be a non-string iterable\","
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        \"single-string-used-for-slots\","
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class __slots__ is a simple string, rather than an iterable.\","
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    \"R0205\": ("
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Class %r inherits from object, can be safely removed from bases in python3\","
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        \"useless-object-inheritance\","
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a class inherit from object, which under python3 is implicit, \""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        \"hence can be safely removed from bases.\","
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    \"R0206\": ("
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Cannot have defined parameters for properties\","
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "        \"property-with-parameters\","
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when we detect that a property also has parameters, which are useless, \""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "        \"given that properties cannot be called with additional arguments.\","
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "def _scope_default():"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "    return collections.defaultdict(list)"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "class ScopeAccessMap:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Store the accessed variables per scope.\"\"\""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self):"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "        self._scopes \u003d collections.defaultdict(_scope_default)"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    def set_accessed(self, node):"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Set the given node as accessed.\"\"\""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "        frame \u003d node_frame_class(node)"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "        if frame is None:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "            # The node does not live in a class."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "        self._scopes[frame][node.attrname].append(node)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "    def accessed(self, scope):"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Get the accessed variables for the given scope.\"\"\""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._scopes.get(scope, {})"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "class ClassChecker(BaseChecker):"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"checks for :"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "    * methods without self as first argument"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    * overridden methods signature"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "    * access only to existent members via self"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    * attributes not defined in the __init__ method"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "    * unreachable code"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d (IAstroidChecker,)"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "    # configuration section name"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"classes\""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "    # messages"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d MSGS"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "    priority \u003d -2"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "    # configuration options"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ("
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "            \"defining-attr-methods\","
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (\"__init__\", \"__new__\", \"setUp\", \"__post_init__\"),"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cmethod names\u003e\","
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of method names used to declare (i.e. assign) \\"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "instance attributes.\","
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "            \"valid-classmethod-first-arg\","
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (\"cls\",),"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cargument names\u003e\","
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of valid names for the first argument in \\"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "a class method.\","
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "            \"valid-metaclass-classmethod-first-arg\","
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (\"cls\",),"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cargument names\u003e\","
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of valid names for the first argument in \\"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "a metaclass class method.\","
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "            \"exclude-protected\","
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": ("
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "                    # namedtuple public API."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"_asdict\","
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"_fields\","
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"_replace\","
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"_source\","
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"_make\","
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cprotected access exclusions\u003e\","
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": ("
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"List of member names, which should be excluded \""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"from the protected access warning.\""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, linter\u003dNone):"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        BaseChecker.__init__(self, linter)"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        self._accessed \u003d ScopeAccessMap()"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "        self._first_attrs \u003d []"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        self._meth_could_be_func \u003d None"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "    @decorators.cachedproperty"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "    def _dummy_rgx(self):"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        return get_global_option(self, \"dummy-variables-rgx\", default\u003dNone)"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "    @decorators.cachedproperty"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "    def _ignore_mixin(self):"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        return get_global_option(self, \"ignore-mixin-members\", default\u003dTrue)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages("
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "        \"abstract-method\","
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-init\","
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-slots\","
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        \"single-string-used-for-slots\","
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-slots-object\","
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        \"class-variable-slots-conflict\","
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "        \"inherit-non-class\","
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        \"useless-object-inheritance\","
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        \"inconsistent-mro\","
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "        \"duplicate-bases\","
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_classdef(self, node):"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"init visit variable _accessed"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_bases_classes(node)"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        # if not an exception or a metaclass"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.type \u003d\u003d \"class\" and has_known_bases(node):"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "                node.local_attr(\"__init__\")"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.NotFoundError:"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"no-init\", args\u003dnode, node\u003dnode)"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_slots(node)"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_proper_bases(node)"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_consistent_mro(node)"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_consistent_mro(self, node):"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Detect that a class has a consistent mro or duplicate bases.\"\"\""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "            node.mro()"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "        except InconsistentMroError:"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"inconsistent-mro\", args\u003dnode.name, node\u003dnode)"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "        except DuplicateBasesError:"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"duplicate-bases\", args\u003dnode.name, node\u003dnode)"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "        except NotImplementedError:"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "            # Old style class, there\u0027s no mro so don\u0027t do anything."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_proper_bases(self, node):"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        Detect that a class inherits something which is not"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        a class or a type."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        for base in node.bases:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "            ancestor \u003d safe_infer(base)"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "            if ancestor in (astroid.Uninferable, None):"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(ancestor, astroid.Instance) and ancestor.is_subtype_of("
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "                \"%s.type\" % (BUILTINS,)"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(ancestor, astroid.ClassDef) or _is_invalid_base_class("
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "                ancestor"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"inherit-non-class\", args\u003dbase.as_string(), node\u003dnode)"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "            if ancestor.name \u003d\u003d object.__name__:"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"useless-object-inheritance\", args\u003dnode.name, node\u003dnode"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_classdef(self, cnode):"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"close a class node:"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        check that instance attributes are defined in __init__ and check"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        access to existent members"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "        # check access to existent members on non metaclass classes"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._ignore_mixin and cnode.name[-5:].lower() \u003d\u003d \"mixin\":"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "            # We are in a mixin class. No need to try to figure out if"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "            # something is missing, since it is most likely that it will"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "            # miss."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        accessed \u003d self._accessed.accessed(cnode)"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        if cnode.type !\u003d \"metaclass\":"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_accessed_members(cnode, accessed)"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        # checks attributes are defined in an allowed method such as __init__"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self.linter.is_message_enabled(\"attribute-defined-outside-init\"):"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        defining_methods \u003d self.config.defining_attr_methods"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "        current_module \u003d cnode.root()"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        for attr, nodes in cnode.instance_attrs.items():"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "            # Exclude `__dict__` as it is already defined."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "            if attr \u003d\u003d \"__dict__\":"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "            # Skip nodes which are not in the current module and it may screw up"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "            # the output, while it\u0027s not worth it"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "            nodes \u003d ["
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "                n"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "                for n in nodes"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "                if not isinstance(n.statement(), (astroid.Delete, astroid.AugAssign))"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "                and n.root() is current_module"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "            if not nodes:"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "                continue  # error detected by typechecking"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "            # Check if any method attr is defined in is a defining method"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "            # or if we have the attribute defined in a setter."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "            frames \u003d (node.frame() for node in nodes)"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "            if any("
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "                frame.name in defining_methods or is_property_setter(frame)"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "                for frame in frames"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "            # check attribute is defined in a parent\u0027s __init__"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "            for parent in cnode.instance_attr_ancestors(attr):"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "                attr_defined \u003d False"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "                # check if any parent method attr is defined in is a defining method"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "                for node in parent.instance_attrs[attr]:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "                    if node.frame().name in defining_methods:"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "                        attr_defined \u003d True"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "                if attr_defined:"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "                    # we\u0027re done :)"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "                # check attribute is defined as a class attribute"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                    cnode.local_attr(attr)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "                except astroid.NotFoundError:"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "                    for node in nodes:"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "                        if node.frame().name not in defining_methods:"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "                            # If the attribute was set by a call in any"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "                            # of the defining methods, then don\u0027t emit"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "                            # the warning."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "                            if _called_in_methods("
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "                                node.frame(), cnode, defining_methods"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "                            ):"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "                                continue"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"attribute-defined-outside-init\", args\u003dattr, node\u003dnode"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check method arguments, overriding\"\"\""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "        # ignore actual functions"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        if not node.is_method():"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_useless_super_delegation(node)"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_property_with_parameters(node)"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "        klass \u003d node.parent.frame()"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "        self._meth_could_be_func \u003d True"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "        # check first argument is self if this is actually a method"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_first_arg_for_type(node, klass.type \u003d\u003d \"metaclass\")"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.name \u003d\u003d \"__init__\":"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_init(node)"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "        # check signature if the method overloads inherited method"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "        for overridden in klass.local_attr_ancestors(node.name):"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "            # get astroid for the searched method"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "                parent_function \u003d overridden[node.name]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "            except KeyError:"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "                # we have found the method but it\u0027s not in the local"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "                # dictionary."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "                # This may happen with astroid build from living objects"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(parent_function, astroid.FunctionDef):"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_signature(node, parent_function, \"overridden\", klass)"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_invalid_overridden_method(node, parent_function)"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "            break"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.decorators:"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "            for decorator in node.decorators.nodes:"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(decorator, astroid.Attribute) and decorator.attrname in ("
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"getter\","
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"setter\","
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"deleter\","
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "                    # attribute affectation will call this method, not hiding it"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(decorator, astroid.Name):"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "                    if decorator.name \u003d\u003d \"property\":"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "                        # attribute affectation will either call a setter or raise"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "                        # an attribute error, anyway not hiding the function"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "                # Infer the decorator and see if it returns something useful"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "                inferred \u003d safe_infer(decorator)"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "                if not inferred:"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(inferred, astroid.FunctionDef):"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Okay, it\u0027s a decorator, let\u0027s see what it can infer."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "                    try:"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "                        inferred \u003d next(inferred.infer_call_result(inferred))"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "                    except astroid.InferenceError:"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "                        isinstance(inferred, (astroid.Instance, astroid.ClassDef))"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "                        and inferred.getattr(\"__get__\")"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "                        and inferred.getattr(\"__set__\")"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "                except astroid.AttributeInferenceError:"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "        # check if the method is hidden by an attribute"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "            overridden \u003d klass.instance_attr(node.name)[0]"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            overridden_frame \u003d overridden.frame()"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(overridden_frame, astroid.FunctionDef)"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "                and overridden_frame.type \u003d\u003d \"method\""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "                overridden_frame \u003d overridden_frame.parent.frame()"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "            if not ("
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(overridden_frame, astroid.ClassDef)"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "                and klass.is_subtype_of(overridden_frame.qname())"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "            # If a subclass defined the method then it\u0027s not our fault."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "                mro \u003d klass.mro()"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "            except (InconsistentMroError, DuplicateBasesError):"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "                for subklass in mro[1 : mro.index(overridden_frame) + 1]:"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "                    for obj in subklass.lookup(node.name)[1]:"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "                        if isinstance(obj, astroid.FunctionDef):"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "                            return"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "            args \u003d (overridden.root().name, overridden.fromlineno)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"method-hidden\", args\u003dargs, node\u003dnode)"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.NotFoundError:"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "    visit_asyncfunctiondef \u003d visit_functiondef"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_useless_super_delegation(self, function):"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check if the given function node is an useless method override"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        We consider it *useless* if it uses the super() builtin, but having"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "        nothing additional whatsoever than not implementing the method at all."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        If the method uses super() to delegate an operation to the rest of the MRO,"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "        and if the method called is the same as the current one, the arguments"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "        passed to super() are the same as the parameters that were passed to"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        this method, then the method could be removed altogether, by letting"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        other implementation to take precedence."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "            not function.is_method()"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "            # With decorators is a change of use"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "            or function.decorators"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "        body \u003d function.body"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(body) !\u003d 1:"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "            # Multiple statements, which means this overridden method"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "            # could do multiple things we are not aware of."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        statement \u003d body[0]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(statement, (astroid.Expr, astroid.Return)):"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "            # Doing something else than what we are interested into."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "        call \u003d statement.value"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "            not isinstance(call, astroid.Call)"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "            # Not a super() attribute access."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "            or not isinstance(call.func, astroid.Attribute)"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "        # Should be a super call."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "            super_call \u003d next(call.func.expr.infer())"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(super_call, objects.Super):"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "        # The name should be the same."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "        if call.func.attrname !\u003d function.name:"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "        # Should be a super call with the MRO pointer being the"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "        # current class and the type being the current instance."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "        current_scope \u003d function.parent.scope()"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "            super_call.mro_pointer !\u003d current_scope"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "            or not isinstance(super_call.type, astroid.Instance)"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "            or super_call.type.name !\u003d current_scope.name"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "        #  Check values of default args"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "        klass \u003d function.parent.frame()"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        meth_node \u003d None"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "        for overridden in klass.local_attr_ancestors(function.name):"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "            # get astroid for the searched method"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "                meth_node \u003d overridden[function.name]"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "            except KeyError:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "                # we have found the method but it\u0027s not in the local"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "                # dictionary."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "                # This may happen with astroid build from living objects"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "                not isinstance(meth_node, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "                # If the method have an ancestor which is not a"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "                # function then it is legitimate to redefine it"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "                or _has_different_parameters_default_value("
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "                    meth_node.args, function.args"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "            break"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "        # Detect if the parameters are the same as the call\u0027s arguments."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "        params \u003d _signature_from_arguments(function.args)"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "        args \u003d _signature_from_call(call)"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "        if meth_node is not None:"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "            def form_annotations(annotations):"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "                return ["
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "                    annotation.as_string() for annotation in filter(None, annotations)"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "                ]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "            called_annotations \u003d form_annotations(function.args.annotations)"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "            overridden_annotations \u003d form_annotations(meth_node.args.annotations)"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "            if called_annotations and overridden_annotations:"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "                if called_annotations !\u003d overridden_annotations:"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "        if _definition_equivalent_to_call(params, args):"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "                \"useless-super-delegation\", node\u003dfunction, args\u003d(function.name,)"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_property_with_parameters(self, node):"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.args.args and len(node.args.args) \u003e 1 and decorated_with_property(node):"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"property-with-parameters\", node\u003dnode)"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_invalid_overridden_method(self, function_node, parent_function_node):"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        parent_is_property \u003d decorated_with_property("
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "            parent_function_node"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "        ) or is_property_setter_or_deleter(parent_function_node)"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        current_is_property \u003d decorated_with_property("
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "            function_node"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "        ) or is_property_setter_or_deleter(function_node)"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "        if parent_is_property and not current_is_property:"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "                \"invalid-overridden-method\","
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(function_node.name, \"property\", function_node.type),"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "                node\u003dfunction_node,"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "        elif not parent_is_property and current_is_property:"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "                \"invalid-overridden-method\","
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(function_node.name, \"method\", \"property\"),"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                node\u003dfunction_node,"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_slots(self, node):"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "        if \"__slots__\" not in node.locals:"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "        for slots in node.igetattr(\"__slots__\"):"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "            # check if __slots__ is a valid type"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "            if slots is astroid.Uninferable:"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "            if not is_iterable(slots) and not is_comprehension(slots):"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"invalid-slots\", node\u003dnode)"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(slots, astroid.Const):"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "                # a string, ignore the following checks"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"single-string-used-for-slots\", node\u003dnode)"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "            if not hasattr(slots, \"itered\"):"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "                # we can\u0027t obtain the values, maybe a .deque?"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(slots, astroid.Dict):"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "                values \u003d [item[0] for item in slots.items]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "                values \u003d slots.itered()"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "            if values is astroid.Uninferable:"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "            for elt in values:"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._check_slots_elt(elt, node)"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                except astroid.InferenceError:"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_slots_elt(self, elt, node):"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "        for inferred in elt.infer():"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred is astroid.Uninferable:"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(inferred, astroid.Const) or not isinstance("
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "                inferred.value, str"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"invalid-slots-object\", args\u003dinferred.as_string(), node\u003delt"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            if not inferred.value:"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"invalid-slots-object\", args\u003dinferred.as_string(), node\u003delt"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "            # Check if we have a conflict with a class variable."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "            class_variable \u003d node.locals.get(inferred.value)"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "            if class_variable:"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "                # Skip annotated assignments which don\u0027t conflict at all with slots."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "                if len(class_variable) \u003d\u003d 1:"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "                    parent \u003d class_variable[0].parent"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "                    if isinstance(parent, astroid.AnnAssign) and parent.value is None:"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"class-variable-slots-conflict\", args\u003d(inferred.value,), node\u003delt"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_functiondef(self, node):"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"on method node, check if this method couldn\u0027t be a function"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        ignore class, static and abstract methods, initializer,"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "        methods overridden from a parent class."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.is_method():"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.args.args is not None:"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "                self._first_attrs.pop()"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "            if not self.linter.is_message_enabled(\"no-self-use\"):"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "            class_node \u003d node.parent.frame()"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "                self._meth_could_be_func"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "                and node.type \u003d\u003d \"method\""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "                and node.name not in PYMETHODS"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "                and not ("
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "                    node.is_abstract()"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "                    or overrides_a_method(class_node, node.name)"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "                    or decorated_with_property(node)"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "                    or _has_bare_super_call(node)"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                    or is_protocol_class(class_node)"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"no-self-use\", node\u003dnode)"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_attribute(self, node):"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check if the getattr is an access to a class member"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "        if so, register it. Also check for access to protected"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "        class member from outside its class (but ignore __special__"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "        methods)"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check self"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._uses_mandatory_method_param(node):"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "            self._accessed.set_accessed(node)"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self.linter.is_message_enabled(\"protected-access\"):"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_protected_attribute_access(node)"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assignattr(self, node):"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance("
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "            node.assign_type(), astroid.AugAssign"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "        ) and self._uses_mandatory_method_param(node):"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "            self._accessed.set_accessed(node)"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_in_slots(node)"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_in_slots(self, node):"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" Check that the given AssignAttr node"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "        is defined in the class slots."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d safe_infer(node.expr)"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(inferred, astroid.Instance):"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "        klass \u003d inferred._proxied"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "        if not has_known_bases(klass):"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "        if \"__slots__\" not in klass.locals or not klass.newstyle:"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "        slots \u003d klass.slots()"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "        if slots is None:"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "        # If any ancestor doesn\u0027t use slots, the slots"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "        # defined for this class are superfluous."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "        if any("
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__slots__\" not in ancestor.locals and ancestor.name !\u003d \"object\""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "            for ancestor in klass.ancestors()"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "        if not any(slot.value \u003d\u003d node.attrname for slot in slots):"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "            # If we have a \u0027__dict__\u0027 in slots, then"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "            # assigning any name is valid."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "            if not any(slot.value \u003d\u003d \"__dict__\" for slot in slots):"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "                if _is_attribute_property(node.attrname, klass):"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Properties circumvent the slots mechanism,"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "                    # so we should not emit a warning for them."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "                if node.attrname in klass.locals and _has_data_descriptor("
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "                    klass, node.attrname"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Descriptors circumvent the slots mechanism as well."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "                if node.attrname \u003d\u003d \"__class__\" and _has_same_layout_slots("
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "                    slots, node.parent.value"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"assigning-non-slot\", args\u003d(node.attrname,), node\u003dnode)"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages("
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "        \"protected-access\", \"no-classmethod-decorator\", \"no-staticmethod-decorator\""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assign(self, assign_node):"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_classmethod_declaration(assign_node)"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d assign_node.targets[0]"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node, astroid.AssignAttr):"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._uses_mandatory_method_param(node):"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_protected_attribute_access(node)"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_classmethod_declaration(self, node):"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Checks for uses of classmethod() or staticmethod()"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "        When a @classmethod or @staticmethod decorator should be used instead."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "        A message will be emitted only if the assignment is at a class scope"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "        and only if the classmethod\u0027s argument belongs to the class where it"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "        is defined."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "        `node` is an assign node."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node.value, astroid.Call):"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "        # check the function called is \"classmethod\" or \"staticmethod\""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "        func \u003d node.value.func"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(func, astroid.Name) or func.name not in ("
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "            \"classmethod\","
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "            \"staticmethod\","
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "        msg \u003d ("
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "            \"no-classmethod-decorator\""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "            if func.name \u003d\u003d \"classmethod\""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "            else \"no-staticmethod-decorator\""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "        # assignment must be at a class scope"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "        parent_class \u003d node.scope()"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(parent_class, astroid.ClassDef):"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check if the arg passed to classmethod is a class member"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "        classmeth_arg \u003d node.value.args[0]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(classmeth_arg, astroid.Name):"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "        method_name \u003d classmeth_arg.name"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "        if any(method_name \u003d\u003d member.name for member in parent_class.mymethods()):"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(msg, node\u003dnode.targets[0])"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_protected_attribute_access(self, node):"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Given an attribute access node (set or get), check if attribute"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "        access is legitimate. Call _check_first_attr with node before calling"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "        this method. Valid cases are:"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "        * self._attr in a method or cls._attr in a classmethod. Checked by"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "        _check_first_attr."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "        * Klass._attr inside \"Klass\" class."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "        * Klass2._attr inside \"Klass\" class when Klass2 is a base class of"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "            Klass."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "        attrname \u003d node.attrname"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "            is_attr_protected(attrname)"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "            and attrname not in self.config.exclude_protected"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "            klass \u003d node_frame_class(node)"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "            # In classes, check we are not getting a parent method"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "            # through the class object or through super"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "            callee \u003d node.expr.as_string()"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "            # We are not in a class, no remaining valid case"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "            if klass is None:"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"protected-access\", node\u003dnode, args\u003dattrname)"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "            # If the expression begins with a call to super, that\u0027s ok."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(node.expr, astroid.Call)"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "                and isinstance(node.expr.func, astroid.Name)"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "                and node.expr.func.name \u003d\u003d \"super\""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "            # If the expression begins with a call to type(self), that\u0027s ok."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "            if self._is_type_self_call(node.expr):"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "            # We are in a class, one remaining valid cases, Klass._attr inside"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "            # Klass"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "            if not (callee \u003d\u003d klass.name or callee in klass.basenames):"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "                # Detect property assignments in the body of the class."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "                # This is acceptable:"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "                #"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "                # class A:"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "                #     b \u003d property(lambda: self._b)"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "                stmt \u003d node.parent.statement()"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(stmt, astroid.Assign)"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "                    and len(stmt.targets) \u003d\u003d 1"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "                    and isinstance(stmt.targets[0], astroid.AssignName)"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "                    name \u003d stmt.targets[0].name"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "                    if _is_attribute_property(name, klass):"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "                #  A licit use of protected member is inside a special method"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "                if not attrname.startswith("
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"__\""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "                ) and self._is_called_inside_special_method(node):"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"protected-access\", node\u003dnode, args\u003dattrname)"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_called_inside_special_method(node: astroid.node_classes.NodeNG) -\u003e bool:"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "        Returns true if the node is located inside a special (aka dunder) method"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "            frame_name \u003d node.frame().name"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "        except AttributeError:"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "        return frame_name and frame_name in PYMETHODS"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_type_self_call(self, expr):"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "        return ("
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(expr, astroid.Call)"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(expr.func, astroid.Name)"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "            and expr.func.name \u003d\u003d \"type\""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "            and len(expr.args) \u003d\u003d 1"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "            and self._is_mandatory_method_param(expr.args[0])"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_name(self, node):"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check if the name handle an access to a class member"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "        if so, register it"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._first_attrs and ("
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "            node.name \u003d\u003d self._first_attrs[-1] or not self._first_attrs[-1]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "            self._meth_could_be_func \u003d False"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_accessed_members(self, node, accessed):"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that accessed members are defined\"\"\""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "        excs \u003d (\"AttributeError\", \"Exception\", \"BaseException\")"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "        for attr, nodes in accessed.items():"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "                # is it a class attribute ?"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "                node.local_attr(attr)"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "                # yes, stop here"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.NotFoundError:"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "            # is it an instance attribute of a parent class ?"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "                next(node.instance_attr_ancestors(attr))"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "                # yes, stop here"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "            except StopIteration:"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "            # is it an instance attribute ?"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "                defstmts \u003d node.instance_attr(attr)"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.NotFoundError:"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "                # filter out augment assignment nodes"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "                defstmts \u003d [stmt for stmt in defstmts if stmt not in nodes]"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "                if not defstmts:"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "                    # only augment assignment for this node, no-member should be"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "                    # triggered by the typecheck checker"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "                # filter defstmts to only pick the first one when there are"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "                # several assignments in the same scope"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "                scope \u003d defstmts[0].scope()"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "                defstmts \u003d ["
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "                    stmt"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "                    for i, stmt in enumerate(defstmts)"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "                    if i \u003d\u003d 0 or stmt.scope() is not scope"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "                ]"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "                # if there are still more than one, don\u0027t attempt to be smarter"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "                # than we can be"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "                if len(defstmts) \u003d\u003d 1:"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "                    defstmt \u003d defstmts[0]"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "                    # check that if the node is accessed in the same method as"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "                    # it\u0027s defined, it\u0027s accessed after the initial assignment"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "                    frame \u003d defstmt.frame()"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "                    lno \u003d defstmt.fromlineno"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "                    for _node in nodes:"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "                        if ("
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "                            _node.frame() is frame"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "                            and _node.fromlineno \u003c lno"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "                            and not astroid.are_exclusive("
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "                                _node.statement(), defstmt, excs"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "                        ):"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"access-member-before-definition\","
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "                                node\u003d_node,"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "                                args\u003d(attr, lno),"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_first_arg_for_type(self, node, metaclass\u003d0):"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check the name of first argument, expect:"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "        * \u0027self\u0027 for a regular method"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "        * \u0027cls\u0027 for a class method or a metaclass regular method (actually"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "          valid-classmethod-first-arg value)"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "        * \u0027mcs\u0027 for a metaclass class method (actually"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "          valid-metaclass-classmethod-first-arg)"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "        * not one of the above for a static method"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "        # don\u0027t care about functions with unknown argument (builtins)"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.args.args is None:"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.args.posonlyargs:"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "            first_arg \u003d node.args.posonlyargs[0].name"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "        elif node.args.args:"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "            first_arg \u003d node.argnames()[0]"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "            first_arg \u003d None"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "        self._first_attrs.append(first_arg)"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "        first \u003d self._first_attrs[-1]"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "        # static method"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.type \u003d\u003d \"staticmethod\":"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "                first_arg \u003d\u003d \"self\""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "                or first_arg in self.config.valid_classmethod_first_arg"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "                or first_arg in self.config.valid_metaclass_classmethod_first_arg"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"bad-staticmethod-argument\", args\u003dfirst, node\u003dnode)"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "            self._first_attrs[-1] \u003d None"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "        # class / regular method with no args"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "        elif not node.args.args and not node.args.posonlyargs:"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"no-method-argument\", node\u003dnode)"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "        # metaclass"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "        elif metaclass:"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "            # metaclass __new__ or classmethod"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.type \u003d\u003d \"classmethod\":"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_first_arg_config("
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "                    first,"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.config.valid_metaclass_classmethod_first_arg,"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "                    node,"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"bad-mcs-classmethod-argument\","
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "                    node.name,"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "            # metaclass regular method"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_first_arg_config("
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "                    first,"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.config.valid_classmethod_first_arg,"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "                    node,"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"bad-mcs-method-argument\","
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "                    node.name,"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "        # regular class"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "        else:  # pylint: disable\u003delse-if-used"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "            # class method"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.type \u003d\u003d \"classmethod\" or node.name \u003d\u003d \"__class_getitem__\":"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_first_arg_config("
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "                    first,"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.config.valid_classmethod_first_arg,"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "                    node,"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"bad-classmethod-argument\","
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "                    node.name,"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "            # regular method without self as argument"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "            elif first !\u003d \"self\":"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"no-self-argument\", node\u003dnode)"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_first_arg_config(self, first, config, node, message, method_name):"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "        if first not in config:"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(config) \u003d\u003d 1:"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "                valid \u003d repr(config[0])"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                valid \u003d \", \".join(repr(v) for v in config[:-1])"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "                valid \u003d \"%s or %r\" % (valid, config[-1])"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(message, args\u003d(method_name, valid), node\u003dnode)"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_bases_classes(self, node):"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that the given class node implements abstract methods from"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "        base classes"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "        def is_abstract(method):"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "            return method.is_abstract(pass_is_abstract\u003dFalse)"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "        # check if this class abstract"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "        if class_is_abstract(node):"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "        methods \u003d sorted("
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "            unimplemented_abstract_methods(node, is_abstract).items(),"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "            key\u003dlambda item: item[0],"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, method in methods:"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "            owner \u003d method.parent.frame()"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "            if owner is node:"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "            # owner is not this class, it must be a parent class"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "            # check that the ancestor\u0027s method is not abstract"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "            if name in node.locals:"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "                # it is redefined as an attribute or with a descriptor"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"abstract-method\", node\u003dnode, args\u003d(name, owner.name))"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_init(self, node):"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that the __init__ method call super or ancestors\u0027__init__"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "        method (unless it is used for type hinting with `typing.overload`)"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self.linter.is_message_enabled("
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "            \"super-init-not-called\""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "        ) and not self.linter.is_message_enabled(\"non-parent-init-called\"):"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "        klass_node \u003d node.parent.frame()"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "        to_call \u003d _ancestors_to_call(klass_node)"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "        not_called_yet \u003d dict(to_call)"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "        for stmt in node.nodes_of_class(astroid.Call):"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "            expr \u003d stmt.func"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(expr, astroid.Attribute) or expr.attrname !\u003d \"__init__\":"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "            # skip the test if using super"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(expr.expr, astroid.Call)"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "                and isinstance(expr.expr.func, astroid.Name)"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "                and expr.expr.func.name \u003d\u003d \"super\""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "                for klass in expr.expr.infer():"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "                    if klass is astroid.Uninferable:"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "                    # The inferred klass can be super(), which was"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "                    # assigned to a variable and the `__init__`"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "                    # was called later."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "                    #"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "                    # base \u003d super()"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "                    # base.__init__(...)"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "                        isinstance(klass, astroid.Instance)"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "                        and isinstance(klass._proxied, astroid.ClassDef)"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "                        and is_builtin_object(klass._proxied)"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "                        and klass._proxied.name \u003d\u003d \"super\""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "                    if isinstance(klass, objects.Super):"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "                    try:"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "                        del not_called_yet[klass]"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "                    except KeyError:"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "                        if klass not in to_call:"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"non-parent-init-called\", node\u003dexpr, args\u003dklass.name"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.InferenceError:"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "        for klass, method in not_called_yet.items():"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "            if decorated_with(node, [\"typing.overload\"]):"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "            cls \u003d node_frame_class(method)"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "            if klass.name \u003d\u003d \"object\" or (cls and cls.name \u003d\u003d \"object\"):"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"super-init-not-called\", args\u003dklass.name, node\u003dnode)"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_signature(self, method1, refmethod, class_type, cls):"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that the signature of the two given methods match"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "        if not ("
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(method1, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(refmethod, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "                \"method-check-failed\", args\u003d(method1, refmethod), node\u003dmethod1"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d cls.instantiate_class()"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "        method1 \u003d function_to_method(method1, instance)"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "        refmethod \u003d function_to_method(refmethod, instance)"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t care about functions with unknown argument (builtins)."
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "        if method1.args.args is None or refmethod.args.args is None:"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore private to class methods."
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_attr_private(method1.name):"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore setters, they have an implicit extra argument,"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "        # which shouldn\u0027t be taken in consideration."
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_property_setter(method1):"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "        if _different_parameters("
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "            refmethod, method1, dummy_parameter_regex\u003dself._dummy_rgx"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "                \"arguments-differ\", args\u003d(class_type, method1.name), node\u003dmethod1"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "        elif len(method1.args.defaults) \u003c len(refmethod.args.defaults):"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "                \"signature-differs\", args\u003d(class_type, method1.name), node\u003dmethod1"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "    def _uses_mandatory_method_param(self, node):"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check that attribute lookup name use first attribute variable name"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "        Name is `self` for method, `cls` for classmethod and `mcs` for metaclass."
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._is_mandatory_method_param(node.expr)"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_mandatory_method_param(self, node):"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check if astroid.Name corresponds to first attribute variable name"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "        Name is `self` for method, `cls` for classmethod and `mcs` for metaclass."
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "        return ("
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "            self._first_attrs"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(node, astroid.Name)"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "            and node.name \u003d\u003d self._first_attrs[-1]"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "class SpecialMethodsChecker(BaseChecker):"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Checker which verifies that special methods"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "    are implemented correctly."
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d (IAstroidChecker,)"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"classes\""
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0301\": ("
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__iter__ returns non-iterator\","
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "            \"non-iterator-returned\","
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an __iter__ method returns something which is not an \""
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "            \"iterable (i.e. has no `%s` method)\" % NEXT_METHOD,"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "                \"old_names\": ["
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "                    (\"W0234\", \"old-non-iterator-returned-1\"),"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "                    (\"E0234\", \"old-non-iterator-returned-2\"),"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "                ]"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0302\": ("
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "            \"The special method %r expects %s param(s), %d %s given\","
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unexpected-special-method-signature\","
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when a special method was defined with an \""
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid number of parameters. If it has too few or \""
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "            \"too many, it might not work at all.\","
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"E0235\", \"bad-context-manager\")]},"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0303\": ("
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__len__ does not return non-negative integer\","
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-length-returned\","
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __len__ method returns something which is not a \""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "            \"non-negative integer\","
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0304\": ("
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__bool__ does not return bool\","
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-bool-returned\","
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __bool__ method returns something which is not a bool\","
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0305\": ("
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__index__ does not return int\","
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-index-returned\","
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an __index__ method returns something which is not \""
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "            \"an integer\","
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0306\": ("
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__repr__ does not return str\","
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-repr-returned\","
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __repr__ method returns something which is not a string\","
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0307\": ("
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__str__ does not return str\","
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-str-returned\","
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __str__ method returns something which is not a string\","
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0308\": ("
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__bytes__ does not return bytes\","
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-bytes-returned\","
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __bytes__ method returns something which is not bytes\","
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0309\": ("
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__hash__ does not return int\","
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-hash-returned\","
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __hash__ method returns something which is not an integer\","
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0310\": ("
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__length_hint__ does not return non-negative integer\","
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-length-hint-returned\","
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __length_hint__ method returns something which is not a \""
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "            \"non-negative integer\","
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0311\": ("
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__format__ does not return str\","
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-format-returned\","
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __format__ method returns something which is not a string\","
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0312\": ("
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__getnewargs__ does not return a tuple\","
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-getnewargs-returned\","
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __getnewargs__ method returns something which is not \""
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "            \"a tuple\","
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E0313\": ("
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__getnewargs_ex__ does not return a tuple containing (tuple, dict)\","
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-getnewargs-ex-returned\","
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __getnewargs_ex__ method returns something which is not \""
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "            \"of the form tuple(tuple, dict)\","
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "    priority \u003d -2"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, linter\u003dNone):"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "        BaseChecker.__init__(self, linter)"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "        self._protocol_map \u003d {"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__iter__\": self._check_iter,"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__len__\": self._check_len,"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__bool__\": self._check_bool,"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__index__\": self._check_index,"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__repr__\": self._check_repr,"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__str__\": self._check_str,"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__bytes__\": self._check_bytes,"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__hash__\": self._check_hash,"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__length_hint__\": self._check_length_hint,"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__format__\": self._check_format,"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__getnewargs__\": self._check_getnewargs,"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__getnewargs_ex__\": self._check_getnewargs_ex,"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages("
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unexpected-special-method-signature\","
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "        \"non-iterator-returned\","
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-length-returned\","
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-bool-returned\","
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-index-returned\","
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-repr-returned\","
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-str-returned\","
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-bytes-returned\","
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-hash-returned\","
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-length-hint-returned\","
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-format-returned\","
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-getnewargs-returned\","
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-getnewargs-ex-returned\","
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "        if not node.is_method():"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d _safe_infer_call_result(node, node)"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "        # Only want to check types that we are able to infer"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "        if inferred and node.name in self._protocol_map:"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "            self._protocol_map[node.name](node, inferred)"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.name in PYMETHODS:"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_unexpected_method_signature(node)"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": "    visit_asyncfunctiondef \u003d visit_functiondef"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_unexpected_method_signature(self, node):"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "        expected_params \u003d SPECIAL_METHODS_PARAMS[node.name]"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": "        if expected_params is None:"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "            # This can support a variable number of parameters."
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "        if not node.args.args and not node.args.vararg:"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": "            # Method has no parameter, will be caught"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "            # by no-method-argument."
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "        if decorated_with(node, [BUILTINS + \".staticmethod\"]):"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": "            # We expect to not take in consideration self."
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": "            all_args \u003d node.args.args"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "            all_args \u003d node.args.args[1:]"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": "        mandatory \u003d len(all_args) - len(node.args.defaults)"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "        optional \u003d len(node.args.defaults)"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": "        current_params \u003d mandatory + optional"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(expected_params, tuple):"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": "            # The expected number of parameters can be any value from this"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "            # tuple, although the user should implement the method"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": "            # to take all of them in consideration."
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": "            emit \u003d mandatory not in expected_params"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": "            expected_params \u003d \"between %d or %d\" % expected_params"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "            # If the number of mandatory parameters doesn\u0027t"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": "            # suffice, the expected parameters for this"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "-"
        },
        "content": "            # function will be deduced from the optional"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "-"
        },
        "content": "            # parameters."
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "-"
        },
        "content": "            rest \u003d expected_params - mandatory"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": "            if rest \u003d\u003d 0:"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "-"
        },
        "content": "                emit \u003d False"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "-"
        },
        "content": "            elif rest \u003c 0:"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "-"
        },
        "content": "                emit \u003d True"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": "            elif rest \u003e 0:"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "-"
        },
        "content": "                emit \u003d not ((optional - rest) \u003e\u003d 0 or node.args.vararg)"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "-"
        },
        "content": "        if emit:"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": "            verb \u003d \"was\" if current_params \u003c\u003d 1 else \"were\""
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "-"
        },
        "content": "                \"unexpected-special-method-signature\","
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(node.name, expected_params, current_params, verb),"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": "                node\u003dnode,"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_wrapped_type(node, type_):"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": "        return ("
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(node, astroid.Instance)"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "-"
        },
        "content": "            and node.name \u003d\u003d type_"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "            and not isinstance(node, astroid.Const)"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_int(node):"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": "        if SpecialMethodsChecker._is_wrapped_type(node, \"int\"):"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": "        return isinstance(node, astroid.Const) and isinstance(node.value, int)"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_str(node):"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": "        if SpecialMethodsChecker._is_wrapped_type(node, \"str\"):"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "-"
        },
        "content": "        return isinstance(node, astroid.Const) and isinstance(node.value, str)"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_bool(node):"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": "        if SpecialMethodsChecker._is_wrapped_type(node, \"bool\"):"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": "        return isinstance(node, astroid.Const) and isinstance(node.value, bool)"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_bytes(node):"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": "        if SpecialMethodsChecker._is_wrapped_type(node, \"bytes\"):"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": "        return isinstance(node, astroid.Const) and isinstance(node.value, bytes)"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_tuple(node):"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "        if SpecialMethodsChecker._is_wrapped_type(node, \"tuple\"):"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": "        return isinstance(node, astroid.Const) and isinstance(node.value, tuple)"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_dict(node):"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": "        if SpecialMethodsChecker._is_wrapped_type(node, \"dict\"):"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": "        return isinstance(node, astroid.Const) and isinstance(node.value, dict)"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_iterator(node):"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": "        if node is astroid.Uninferable:"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": "            # Just ignore Uninferable objects."
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, Generator):"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": "            # Generators can be itered."
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, astroid.Instance):"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": "                node.local_attr(NEXT_METHOD)"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.NotFoundError:"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(node, astroid.ClassDef):"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "            metaclass \u003d node.metaclass()"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": "            if metaclass and isinstance(metaclass, astroid.ClassDef):"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "                    metaclass.local_attr(NEXT_METHOD)"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": "                    return True"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": "                except astroid.NotFoundError:"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_iter(self, node, inferred):"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_iterator(inferred):"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"non-iterator-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_len(self, node, inferred):"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_int(inferred):"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-length-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(inferred, astroid.Const) and inferred.value \u003c 0:"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-length-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_bool(self, node, inferred):"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_bool(inferred):"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-bool-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_index(self, node, inferred):"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_int(inferred):"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-index-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_repr(self, node, inferred):"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_str(inferred):"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-repr-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_str(self, node, inferred):"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_str(inferred):"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-str-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_bytes(self, node, inferred):"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_bytes(inferred):"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-bytes-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_hash(self, node, inferred):"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_int(inferred):"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-hash-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_length_hint(self, node, inferred):"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_int(inferred):"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-length-hint-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(inferred, astroid.Const) and inferred.value \u003c 0:"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-length-hint-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_format(self, node, inferred):"
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_str(inferred):"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-format-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_getnewargs(self, node, inferred):"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_tuple(inferred):"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-getnewargs-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_getnewargs_ex(self, node, inferred):"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._is_tuple(inferred):"
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-getnewargs-ex-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(inferred, astroid.Tuple):"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "-"
        },
        "content": "            # If it\u0027s not an astroid.Tuple we can\u0027t analyze it further"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "-"
        },
        "content": "        found_error \u003d False"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(inferred.elts) !\u003d 2:"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "-"
        },
        "content": "            found_error \u003d True"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "-"
        },
        "content": "            for arg, check in ["
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "-"
        },
        "content": "                (inferred.elts[0], self._is_tuple),"
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "-"
        },
        "content": "                (inferred.elts[1], self._is_dict),"
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "-"
        },
        "content": "            ]:"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(arg, astroid.Call):"
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "-"
        },
        "content": "                    arg \u003d safe_infer(arg)"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "-"
        },
        "content": "                if arg and arg is not astroid.Uninferable:"
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not check(arg):"
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "-"
        },
        "content": "                        found_error \u003d True"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "-"
        },
        "content": "                        break"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "-"
        },
        "content": "        if found_error:"
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-getnewargs-ex-returned\", node\u003dnode)"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "-"
        },
        "content": "def _ancestors_to_call(klass_node, method\u003d\"__init__\"):"
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"return a dictionary where keys are the list of base classes providing"
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "-"
        },
        "content": "    the queried method, and so that should/may be called from the method node"
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "-"
        },
        "content": "    to_call \u003d {}"
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "-"
        },
        "content": "    for base_node in klass_node.ancestors(recurs\u003dFalse):"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "-"
        },
        "content": "            to_call[base_node] \u003d next(base_node.igetattr(method))"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "-"
        },
        "content": "    return to_call"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "-"
        },
        "content": "def register(linter):"
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"required method to auto register this checker \"\"\""
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(ClassChecker(linter))"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(SpecialMethodsChecker(linter))"
      }
    ],
    "authorContributionMap": {
      "-": 2046,
      "Nick Drozd": 1
    }
  },
  {
    "path": "pylint/checkers/format.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2006-2014 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012-2015 Google, Inc."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2013 moxian \u003caleftmail@inbox.ru\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 frost-nzcr4 \u003cfrost.nzcr4@jagmort.com\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Brett Cannon \u003cbrett@python.org\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Michal Nowikowski \u003cgodfryd@gmail.com\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Mike Frysinger \u003cvapier@gentoo.org\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Fabio Natali \u003cme@fabionatali.com\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Harut \u003cyes@harutune.name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Mihai Balint \u003cbalint.mihai@gmail.com\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Pavel Roskin \u003cproski@gnu.org\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Petr Pulc \u003cpetrpulc@gmail.com\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Moises Lopez \u003cmoylop260@vauxoo.com\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Ashley Whetter \u003cashley@awhetter.co.uk\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017-2018 Bryce Guinta \u003cbryce.paul.guinta@gmail.com\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 hippo91 \u003cguillaume.peillex@gmail.com\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Krzysztof Czapla \u003ck.czapla68@gmail.com\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 James M. Allen \u003cjames.m.allen@gmail.com\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 vinnyrose \u003cvinnyrose@users.noreply.github.com\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Bryce Guinta \u003cbryce.guinta@protonmail.com\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Mike Frysinger \u003cvapier@gmail.com\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 ssolanki \u003csushobhitsolanki@gmail.com\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Anthony Sottile \u003casottile@umich.edu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Fureigh \u003crhys.fureigh@gsa.gov\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Pierre Sassoulas \u003cpierre.sassoulas@wisebim.fr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Andreas Freimuth \u003candreas.freimuth@united-bits.de\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Jakub Wilk \u003cjwilk@jwilk.net\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"Python code format\u0027s checker."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "By default try to follow Guido\u0027s style guide :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.python.org/doc/essays/styleguide/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Some parts of the process_token method is based from The Tab Nanny std module."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import tokenize"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "from functools import reduce  # pylint: disable\u003dredefined-builtin"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "from typing import List"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid import nodes"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers import BaseTokenChecker"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers.utils import ("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    check_messages,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    is_overload_stub,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    is_protocol_class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    node_frame_class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.constants import WarningScope"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.interfaces import IAstroidChecker, IRawChecker, ITokenChecker"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.utils.pragma_parser import OPTION_PO, PragmaParserError, parse_pragma"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "_ASYNC_TOKEN \u003d \"async\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "_CONTINUATION_BLOCK_OPENERS \u003d ["
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \"elif\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \"except\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \"for\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \"if\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \"while\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \"def\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \"class\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \"with\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "_KEYWORD_TOKENS \u003d ["
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \"assert\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \"del\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \"elif\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"except\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \"for\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \"if\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \"in\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \"not\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \"raise\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \"return\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \"while\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \"yield\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \"with\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "_SPACED_OPERATORS \u003d ["
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u003d\u003d\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u003c\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u003e\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"!\u003d\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u003c\u003e\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u003c\u003d\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u003e\u003d\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    \"+\u003d\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-\u003d\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \"*\u003d\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \"**\u003d\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \"/\u003d\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \"//\u003d\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u0026\u003d\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \"|\u003d\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    \"^\u003d\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    \"%\u003d\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u003e\u003e\u003d\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\u003c\u003c\u003d\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "_OPENING_BRACKETS \u003d [\"(\", \"[\", \"{\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "_CLOSING_BRACKETS \u003d [\")\", \"]\", \"}\"]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "_TAB_LENGTH \u003d 8"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "_EOL \u003d frozenset([tokenize.NEWLINE, tokenize.NL, tokenize.COMMENT])"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "_JUNK_TOKENS \u003d (tokenize.COMMENT, tokenize.NL)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "# Whitespace checking policy constants"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "_MUST \u003d 0"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "_MUST_NOT \u003d 1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "_IGNORE \u003d 2"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "# Whitespace checking config constants"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "_DICT_SEPARATOR \u003d \"dict-separator\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "_TRAILING_COMMA \u003d \"trailing-comma\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "_EMPTY_LINE \u003d \"empty-line\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "_NO_SPACE_CHECK_CHOICES \u003d [_TRAILING_COMMA, _DICT_SEPARATOR, _EMPTY_LINE]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "_DEFAULT_NO_SPACE_CHECK_CHOICES \u003d [_TRAILING_COMMA, _DICT_SEPARATOR]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "MSGS \u003d {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0301\": ("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Line too long (%s/%s)\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \"line-too-long\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a line is longer than a given number of characters.\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0302\": ("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Too many lines in module (%s/%s)\",  # was W0302"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \"too-many-lines\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a module has too many lines, reducing its readability.\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0303\": ("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Trailing whitespace\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \"trailing-whitespace\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when there is whitespace between the end of a line and the newline.\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0304\": ("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Final newline missing\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        \"missing-final-newline\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when the last line in a file is missing a newline.\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0305\": ("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Trailing newlines\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        \"trailing-newlines\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when there are trailing blank lines in a file.\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0311\": ("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Bad indentation. Found %s %s, expected %s\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-indentation\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an unexpected number of indentation\u0027s tabulations or \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        \"spaces has been found.\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0330\": (\"Wrong %s indentation%s%s.\\n%s%s\", \"bad-continuation\", \"TODO\"),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0312\": ("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Found indentation with %ss instead of %ss\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        \"mixed-indentation\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when there are some mixed tabs and spaces in a module.\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0301\": ("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unnecessary semicolon\",  # was W0106"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unnecessary-semicolon\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Used when a statement is ended by a semi-colon (\";\"), which \u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        \"isn\u0027t necessary (that\u0027s python, not C ;).\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0321\": ("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        \"More than one statement on a single line\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        \"multiple-statements\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when more than on statement are found on the same line.\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        {\"scope\": WarningScope.NODE},"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0325\": ("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unnecessary parens after %r keyword\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        \"superfluous-parens\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a single item in parentheses follows an if, for, or \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        \"other keyword.\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0326\": ("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%s space %s %s %s\\n%s\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-whitespace\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a wrong number of spaces is used around an operator, \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            \"bracket or block opener.\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            \"old_names\": ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                (\"C0323\", \"no-space-after-operator\"),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                (\"C0324\", \"no-space-after-comma\"),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                (\"C0322\", \"no-space-before-operator\"),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0327\": ("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Mixed line endings LF and CRLF\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \"mixed-line-endings\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when there are mixed (LF and CRLF) newline signs in a file.\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    \"C0328\": ("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unexpected line ending format. There is \u0027%s\u0027 while it should be \u0027%s\u0027.\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unexpected-line-ending-format\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when there is different newline than expected.\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "def _underline_token(token):"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    length \u003d token[3][1] - token[2][1]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    offset \u003d token[2][1]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    referenced_line \u003d token[4]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    # If the referenced line does not end with a newline char, fix it"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    if referenced_line[-1] !\u003d \"\\n\":"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        referenced_line +\u003d \"\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    return referenced_line + (\" \" * offset) + (\"^\" * length)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "def _column_distance(token1, token2):"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    if token1 \u003d\u003d token2:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return 0"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    if token2[3] \u003c token1[3]:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        token1, token2 \u003d token2, token1"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    if token1[3][0] !\u003d token2[2][0]:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    return token2[2][1] - token1[3][1]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "def _last_token_on_line_is(tokens, line_end, token):"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    return ("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        line_end \u003e 0"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        and tokens.token(line_end - 1) \u003d\u003d token"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        or line_end \u003e 1"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        and tokens.token(line_end - 2) \u003d\u003d token"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        and tokens.type(line_end - 1) \u003d\u003d tokenize.COMMENT"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "def _token_followed_by_eol(tokens, position):"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    return ("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        tokens.type(position + 1) \u003d\u003d tokenize.NL"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        or tokens.type(position + 1) \u003d\u003d tokenize.COMMENT"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        and tokens.type(position + 2) \u003d\u003d tokenize.NL"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_indent_string(line):"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Return the indention string of the given line.\"\"\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    result \u003d \"\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    for char in line:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        if char in \" \\t\":"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            result +\u003d char"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            break"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    return result"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_indent_length(line):"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Return the length of the indentation on the given token\u0027s line.\"\"\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    result \u003d 0"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    for char in line:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        if char \u003d\u003d \" \":"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            result +\u003d 1"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        elif char \u003d\u003d \"\\t\":"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            result +\u003d _TAB_LENGTH"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            break"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    return result"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_indent_hint_line(bar_positions, bad_position):"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Return a line with |s for each of the positions in the given lists.\"\"\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    if not bar_positions:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\", \"\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    bar_positions \u003d [_get_indent_length(indent) for indent in bar_positions]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    bad_position \u003d _get_indent_length(bad_position)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    delta_message \u003d \"\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    markers \u003d [(pos, \"|\") for pos in bar_positions]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    if len(markers) \u003d\u003d 1:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        # if we have only one marker we\u0027ll provide an extra hint on how to fix"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        expected_position \u003d markers[0][0]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        delta \u003d abs(expected_position - bad_position)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        direction \u003d \"add\" if expected_position \u003e bad_position else \"remove\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        delta_message \u003d _CONTINUATION_HINT_MESSAGE % ("
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            direction,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            delta,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            \"s\" if delta \u003e 1 else \"\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    markers.append((bad_position, \"^\"))"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    markers.sort()"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    line \u003d [\" \"] * (markers[-1][0] + 1)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    for position, marker in markers:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        line[position] \u003d marker"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"\".join(line), delta_message"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "class _ContinuedIndent:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    __slots__ \u003d ("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        \"valid_outdent_strings\","
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        \"valid_continuation_strings\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        \"context_type\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        \"token\","
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        \"position\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__("
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        self,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        context_type,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        token,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        position,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        valid_outdent_strings,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        valid_continuation_strings,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    ):"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        self.valid_outdent_strings \u003d valid_outdent_strings"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        self.valid_continuation_strings \u003d valid_continuation_strings"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        self.context_type \u003d context_type"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        self.position \u003d position"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        self.token \u003d token"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "# The contexts for hanging indents."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "# A hanging indented dictionary value after :"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "HANGING_DICT_VALUE \u003d \"dict-value\""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "# Hanging indentation in an expression."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "HANGING \u003d \"hanging\""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "# Hanging indentation in a block header."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "HANGING_BLOCK \u003d \"hanging-block\""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "# Continued indentation inside an expression."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "CONTINUED \u003d \"continued\""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "# Continued indentation in a block header."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "CONTINUED_BLOCK \u003d \"continued-block\""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "SINGLE_LINE \u003d \"single\""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "WITH_BODY \u003d \"multi\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "_CONTINUATION_MSG_PARTS \u003d {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    HANGING_DICT_VALUE: (\"hanging\", \" in dict value\"),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    HANGING: (\"hanging\", \"\"),"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    HANGING_BLOCK: (\"hanging\", \" before block\"),"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    CONTINUED: (\"continued\", \"\"),"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    CONTINUED_BLOCK: (\"continued\", \" before block\"),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "_CONTINUATION_HINT_MESSAGE \u003d \" (%s %d space%s)\"  # Ex: (remove 2 spaces)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "def _Indentations(*args):"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Valid indentation strings for a continued line.\"\"\""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    return {a: None for a in args}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "def _BeforeBlockIndentations(single, with_body):"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Valid alternative indentation strings for continued lines before blocks."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    :param int single: Valid indentation string for statements on a single logical line."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    :param int with_body: Valid indentation string for statements on several lines."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    :returns: A dictionary mapping indent offsets to a string representing"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        whether the indent if for a line or block."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    :rtype: dict"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    return {single: SINGLE_LINE, with_body: WITH_BODY}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "class TokenWrapper:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"A wrapper for readable access to token information.\"\"\""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, tokens):"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        self._tokens \u003d tokens"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    def token(self, idx):"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._tokens[idx][1]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    def type(self, idx):"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._tokens[idx][0]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    def start_line(self, idx):"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._tokens[idx][2][0]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    def start_col(self, idx):"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._tokens[idx][2][1]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    def line(self, idx):"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._tokens[idx][4]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    def line_indent(self, idx):"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Get the string of TABs and Spaces used for indentation of the line of this token\"\"\""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        return _get_indent_string(self.line(idx))"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    def token_indent(self, idx):"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Get an indentation string for hanging indentation, consisting of the line-indent plus"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        a number of spaces to fill up to the column of this token."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        e.g. the token indent for foo"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        in \"\u003cTAB\u003e\u003cTAB\u003eprint(foo)\""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        is \"\u003cTAB\u003e\u003cTAB\u003e      \""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        line_indent \u003d self.line_indent(idx)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        return line_indent + \" \" * (self.start_col(idx) - len(line_indent))"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "class ContinuedLineState:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Tracker for continued indentation inside a logical line.\"\"\""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, tokens, config):"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        self._line_start \u003d -1"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        self._cont_stack \u003d []"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        self._is_block_opener \u003d False"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        self.retained_warnings \u003d []"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        self._config \u003d config"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        self._tokens \u003d TokenWrapper(tokens)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    @property"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    def has_content(self):"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        return bool(self._cont_stack)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    @property"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    def _block_indent_string(self):"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._config.indent_string.replace(\"\\\\t\", \"\\t\")"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    @property"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    def _continuation_string(self):"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._block_indent_string[0] * self._config.indent_after_paren"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    @property"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    def _continuation_size(self):"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._config.indent_after_paren"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    def handle_line_start(self, pos):"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Record the first non-junk token at the start of a line.\"\"\""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._line_start \u003e -1:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        check_token_position \u003d pos"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._tokens.token(pos) \u003d\u003d _ASYNC_TOKEN:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            check_token_position +\u003d 1"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        self._is_block_opener \u003d ("
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            self._tokens.token(check_token_position) in _CONTINUATION_BLOCK_OPENERS"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        self._line_start \u003d pos"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    def next_physical_line(self):"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Prepares the tracker for a new physical line (NL).\"\"\""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        self._line_start \u003d -1"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        self._is_block_opener \u003d False"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    def next_logical_line(self):"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Prepares the tracker for a new logical line (NEWLINE)."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        A new logical line only starts with block indentation."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        self.next_physical_line()"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        self.retained_warnings \u003d []"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        self._cont_stack \u003d []"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    def add_block_warning(self, token_position, state, valid_indentations):"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        self.retained_warnings.append((token_position, state, valid_indentations))"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    def get_valid_indentations(self, idx):"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Returns the valid offsets for the token at the given position.\"\"\""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        # The closing brace on a dict or the \u0027for\u0027 in a dict comprehension may"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        # reset two indent levels because the dict value is ended implicitly"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        stack_top \u003d -1"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "            self._tokens.token(idx) in (\"}\", \"for\")"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "            and self._cont_stack[-1].token \u003d\u003d \":\""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "            stack_top \u003d -2"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        indent \u003d self._cont_stack[stack_top]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._tokens.token(idx) in _CLOSING_BRACKETS:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "            valid_indentations \u003d indent.valid_outdent_strings"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "            valid_indentations \u003d indent.valid_continuation_strings"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        return indent, valid_indentations.copy()"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    def _hanging_indent_after_bracket(self, bracket, position):"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Extracts indentation information for a hanging indent"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        Case of hanging indent after a bracket (including parenthesis)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str bracket: bracket in question"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        :param int position: Position of bracket in self._tokens"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        :returns: the state and valid positions for hanging indentation"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        :rtype: _ContinuedIndent"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        indentation \u003d self._tokens.line_indent(position)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "            self._is_block_opener"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            and self._continuation_string \u003d\u003d self._block_indent_string"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            return _ContinuedIndent("
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                HANGING_BLOCK,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "                bracket,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                position,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "                _Indentations(indentation + self._continuation_string, indentation),"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                _BeforeBlockIndentations("
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "                    indentation + self._continuation_string,"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                    indentation + self._continuation_string * 2,"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        if bracket \u003d\u003d \":\":"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            # If the dict key was on the same line as the open brace, the new"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "            # correct indent should be relative to the key instead of the"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "            # current indent level"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "            paren_align \u003d self._cont_stack[-1].valid_outdent_strings"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "            next_align \u003d self._cont_stack[-1].valid_continuation_strings.copy()"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            next_align_keys \u003d list(next_align.keys())"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "            next_align[next_align_keys[0] + self._continuation_string] \u003d True"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "            # Note that the continuation of"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            # d \u003d {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "            #       \u0027a\u0027: \u0027b\u0027"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            #            \u0027c\u0027"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "            # }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "            # is handled by the special-casing for hanging continued string indents."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "            return _ContinuedIndent("
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "                HANGING_DICT_VALUE, bracket, position, paren_align, next_align"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        return _ContinuedIndent("
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "            HANGING,"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            bracket,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "            position,"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "            _Indentations(indentation, indentation + self._continuation_string),"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "            _Indentations(indentation + self._continuation_string),"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    def _continuation_inside_bracket(self, bracket, position):"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Extracts indentation information for a continued indent.\"\"\""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        indentation \u003d self._tokens.line_indent(position)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        token_indent \u003d self._tokens.token_indent(position)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        next_token_indent \u003d self._tokens.token_indent(position + 1)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "            self._is_block_opener"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "            and next_token_indent \u003d\u003d indentation + self._block_indent_string"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "            return _ContinuedIndent("
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "                CONTINUED_BLOCK,"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "                bracket,"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "                position,"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "                _Indentations(token_indent),"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "                _BeforeBlockIndentations("
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "                    next_token_indent, next_token_indent + self._continuation_string"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        return _ContinuedIndent("
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "            CONTINUED,"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "            bracket,"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "            position,"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            _Indentations(token_indent, next_token_indent),"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            _Indentations(next_token_indent),"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    def pop_token(self):"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        self._cont_stack.pop()"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "    def push_token(self, token, position):"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Pushes a new token for continued indentation on the stack."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        Tokens that can modify continued indentation offsets are:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "          * opening brackets"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "          * \u0027lambda\u0027"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "          * : inside dictionaries"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        push_token relies on the caller to filter out those"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        interesting tokens."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        :param int token: The concrete token"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        :param int position: The position of the token in the stream."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        if _token_followed_by_eol(self._tokens, position):"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "            self._cont_stack.append(self._hanging_indent_after_bracket(token, position))"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            self._cont_stack.append(self._continuation_inside_bracket(token, position))"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "class FormatChecker(BaseTokenChecker):"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"checks for :"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    * unauthorized constructions"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    * strict indentation"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    * line length"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d (ITokenChecker, IAstroidChecker, IRawChecker)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    # configuration section name"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"format\""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "    # messages"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d MSGS"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "    # configuration options"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "    # for available dict keys/values see the optik parser \u0027add_option\u0027 method"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ("
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            \"max-line-length\","
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": 100,"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"int\","
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cint\u003e\","
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Maximum number of characters on a single line.\","
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "            \"ignore-long-lines\","
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"regexp\","
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cregexp\u003e\","
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": r\"^\\s*(# )?\u003c?https?://\\S+\u003e?$\","
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": ("
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Regexp for a line that is allowed to be longer than \" \"the limit.\""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "            \"single-line-if-stmt\","
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": False,"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": ("
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Allow the body of an if to be on the same \""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"line as the test if there is no else.\""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "            \"single-line-class-stmt\","
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": False,"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": ("
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Allow the body of a class to be on the same \""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"line as the declaration if body contains \""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"single statement.\""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "            \"no-space-check\","
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": \",\".join(_DEFAULT_NO_SPACE_CHECK_CHOICES),"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \",\".join(_NO_SPACE_CHECK_CHOICES),"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"multiple_choice\","
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "                \"choices\": _NO_SPACE_CHECK_CHOICES,"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": ("
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"List of optional constructs for which whitespace \""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"checking is disabled. \""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"`\" + _DICT_SEPARATOR + \"` is used to allow tabulation \""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"in dicts, etc.: {1  : 1,\\\\n222: 2}. \""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"`\" + _TRAILING_COMMA + \"` allows a space between comma \""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"and closing bracket: (a, ). \""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"`\" + _EMPTY_LINE + \"` allows space-only lines.\""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "            \"max-module-lines\","
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": 1000,"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"int\","
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cint\u003e\","
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Maximum number of lines in a module.\","
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "            \"indent-string\","
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": \"    \","
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"non_empty_string\","
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cstring\u003e\","
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"String used as indentation unit. This is usually \""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027\"    \" (4 spaces) or \"\\\\t\" (1 tab).\u0027,"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "            \"indent-after-paren\","
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"int\","
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cint\u003e\","
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": 4,"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Number of spaces of indent required inside a hanging \""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "                \"or continued line.\","
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "            \"expected-line-ending-format\","
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"choice\","
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cempty or LF or CRLF\u003e\","
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": \"\","
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "                \"choices\": [\"\", \"LF\", \"CRLF\"],"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": ("
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Expected format of line ending, \""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"e.g. empty (any line ending), LF or CRLF.\""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, linter\u003dNone):"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        BaseTokenChecker.__init__(self, linter)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        self._lines \u003d None"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        self._visited_lines \u003d None"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bracket_stack \u003d [None]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    def _pop_token(self):"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bracket_stack.pop()"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        self._current_line.pop_token()"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "    def _push_token(self, token, idx):"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bracket_stack.append(token)"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        self._current_line.push_token(token, idx)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "    def new_line(self, tokens, line_end, line_start):"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"a new line has been encountered, process it if necessary\"\"\""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        if _last_token_on_line_is(tokens, line_end, \";\"):"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"unnecessary-semicolon\", line\u003dtokens.start_line(line_end))"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        line_num \u003d tokens.start_line(line_start)"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        line \u003d tokens.line(line_start)"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "        if tokens.type(line_start) not in _JUNK_TOKENS:"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "            self._lines[line_num] \u003d line.split(\"\\n\")[0]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "        self.check_lines(line, line_num)"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "    def process_module(self, _module):"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "        self._keywords_with_parens \u003d set()"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_keyword_parentheses(self, tokens, start):"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check that there are not unnecessary parens after a keyword."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "        Parens are unnecessary if there is exactly one balanced outer pair on a"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        line, and it is followed by a colon, and contains no commas (i.e. is not a"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        tuple)."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "        Args:"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        tokens: list of Tokens; the entire list of Tokens."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "        start: int; the position of the keyword in the token list."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        # If the next token is not a paren, we\u0027re fine."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._inside_brackets(\":\") and tokens[start][1] \u003d\u003d \"for\":"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "            self._pop_token()"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "        if tokens[start + 1][1] !\u003d \"(\":"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        found_and_or \u003d False"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        depth \u003d 0"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "        keyword_token \u003d str(tokens[start][1])"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        line_num \u003d tokens[start][2][0]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        for i in range(start, len(tokens) - 1):"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "            token \u003d tokens[i]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "            # If we hit a newline, then assume any parens were for continuation."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[0] \u003d\u003d tokenize.NL:"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[1] \u003d\u003d \"(\":"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "                depth +\u003d 1"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "            elif token[1] \u003d\u003d \")\":"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "                depth -\u003d 1"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "                if depth:"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                # \u0027)\u0027 can\u0027t happen after if (foo), since it would be a syntax error."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "                if tokens[i + 1][1] in (\":\", \")\", \"]\", \"}\", \"in\") or tokens[i + 1]["
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                    0"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "                ] in (tokenize.NEWLINE, tokenize.ENDMARKER, tokenize.COMMENT):"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "                    # The empty tuple () is always accepted."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "                    if i \u003d\u003d start + 2:"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "                    if keyword_token \u003d\u003d \"not\":"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "                        if not found_and_or:"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"superfluous-parens\", line\u003dline_num, args\u003dkeyword_token"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "                    elif keyword_token in (\"return\", \"yield\"):"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"superfluous-parens\", line\u003dline_num, args\u003dkeyword_token"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "                    elif keyword_token not in self._keywords_with_parens:"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "                        if not found_and_or:"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"superfluous-parens\", line\u003dline_num, args\u003dkeyword_token"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "            elif depth \u003d\u003d 1:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "                # This is a tuple, which is always acceptable."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "                if token[1] \u003d\u003d \",\":"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "                # \u0027and\u0027 and \u0027or\u0027 are the only boolean operators with lower precedence"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "                # than \u0027not\u0027, so parens are only required when they are found."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "                if token[1] in (\"and\", \"or\"):"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "                    found_and_or \u003d True"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "                # A yield inside an expression must always be in parentheses,"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "                # quit early without error."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "                elif token[1] \u003d\u003d \"yield\":"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "                # A generator expression always has a \u0027for\u0027 token in it, and"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "                # the \u0027for\u0027 token is only legal inside parens when it is in a"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "                # generator expression.  The parens are necessary here, so bail"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "                # without an error."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "                elif token[1] \u003d\u003d \"for\":"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "    def _opening_bracket(self, tokens, i):"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        self._push_token(tokens[i][1], i)"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        # Special case: ignore slices"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        if tokens[i][1] \u003d\u003d \"[\" and tokens[i + 1][1] \u003d\u003d \":\":"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        if i \u003e 0 and ("
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "            tokens[i - 1][0] \u003d\u003d tokenize.NAME"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "            and not (keyword.iskeyword(tokens[i - 1][1]))"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "            or tokens[i - 1][1] in _CLOSING_BRACKETS"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_space(tokens, i, (_MUST_NOT, _MUST_NOT))"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_space(tokens, i, (_IGNORE, _MUST_NOT))"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "    def _closing_bracket(self, tokens, i):"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._inside_brackets(\":\"):"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "            self._pop_token()"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        self._pop_token()"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "        # Special case: ignore slices"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        if tokens[i - 1][1] \u003d\u003d \":\" and tokens[i][1] \u003d\u003d \"]\":"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        policy_before \u003d _MUST_NOT"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        if tokens[i][1] in _CLOSING_BRACKETS and tokens[i - 1][1] \u003d\u003d \",\":"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "            if _TRAILING_COMMA in self.config.no_space_check:"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "                policy_before \u003d _IGNORE"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_space(tokens, i, (policy_before, _IGNORE))"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "    def _has_valid_type_annotation(self, tokens, i):"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Extended check of PEP-484 type hint presence\"\"\""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._inside_brackets(\"(\"):"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "        # token_info"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "        # type string start end line"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "        #  0      1     2    3    4"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "        bracket_level \u003d 0"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "        for token in tokens[i - 1 :: -1]:"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[1] \u003d\u003d \":\":"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[1] \u003d\u003d \"(\":"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "                return False"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[1] \u003d\u003d \"]\":"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "                bracket_level +\u003d 1"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "            elif token[1] \u003d\u003d \"[\":"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "                bracket_level -\u003d 1"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "            elif token[1] \u003d\u003d \",\":"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "                if not bracket_level:"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "                    return False"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "            elif token[1] in (\".\", \"...\"):"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "            elif token[0] not in (tokenize.NAME, tokenize.STRING, tokenize.NL):"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "                return False"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_equals_spacing(self, tokens, i):"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check the spacing of a single equals sign.\"\"\""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._has_valid_type_annotation(tokens, i):"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_space(tokens, i, (_MUST, _MUST))"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "        elif self._inside_brackets(\"(\") or self._inside_brackets(\"lambda\"):"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_space(tokens, i, (_MUST_NOT, _MUST_NOT))"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_space(tokens, i, (_MUST, _MUST))"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "    def _open_lambda(self, tokens, i):  # pylint:disable\u003dunused-argument"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "        self._push_token(\"lambda\", i)"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "    def _handle_colon(self, tokens, i):"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "        # Special case: ignore slices"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._inside_brackets(\"[\"):"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._inside_brackets(\"{\") and _DICT_SEPARATOR in self.config.no_space_check:"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "            policy \u003d (_IGNORE, _IGNORE)"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "            policy \u003d (_MUST_NOT, _MUST)"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_space(tokens, i, policy)"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._inside_brackets(\"lambda\"):"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "            self._pop_token()"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "        elif self._inside_brackets(\"{\"):"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "            self._push_token(\":\", i)"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "    def _handle_comma(self, tokens, i):"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "        # Only require a following whitespace if this is"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "        # not a hanging comma before a closing bracket."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        if tokens[i + 1][1] in _CLOSING_BRACKETS:"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_space(tokens, i, (_MUST_NOT, _IGNORE))"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_space(tokens, i, (_MUST_NOT, _MUST))"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._inside_brackets(\":\"):"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "            self._pop_token()"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_surrounded_by_space(self, tokens, i):"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check that a binary operator is surrounded by exactly one space.\"\"\""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_space(tokens, i, (_MUST, _MUST))"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_space(self, tokens, i, policies):"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        def _policy_string(policy):"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "            if policy \u003d\u003d _MUST:"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"Exactly one\", \"required\""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"No\", \"allowed\""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "        def _name_construct(token):"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[1] \u003d\u003d \",\":"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"comma\""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[1] \u003d\u003d \":\":"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "                return \":\""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[1] in \"()[]{}\":"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"bracket\""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "            if token[1] in (\"\u003c\", \"\u003e\", \"\u003c\u003d\", \"\u003e\u003d\", \"!\u003d\", \"\u003d\u003d\"):"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"comparison\""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "            if self._inside_brackets(\"(\"):"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"keyword argument assignment\""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"assignment\""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "        good_space \u003d [True, True]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "        token \u003d tokens[i]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "        pairs \u003d [(tokens[i - 1], token), (token, tokens[i + 1])]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "        for other_idx, (policy, token_pair) in enumerate(zip(policies, pairs)):"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "            if token_pair[other_idx][0] in _EOL or policy \u003d\u003d _IGNORE:"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "            distance \u003d _column_distance(*token_pair)"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "            if distance is None:"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "            good_space[other_idx] \u003d (policy \u003d\u003d _MUST and distance \u003d\u003d 1) or ("
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "                policy \u003d\u003d _MUST_NOT and distance \u003d\u003d 0"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "        warnings \u003d []"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        if not any(good_space) and policies[0] \u003d\u003d policies[1]:"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "            warnings.append((policies[0], \"around\"))"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "            for ok, policy, position in zip(good_space, policies, (\"before\", \"after\")):"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "                if not ok:"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "                    warnings.append((policy, position))"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        for policy, position in warnings:"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "            construct \u003d _name_construct(token)"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "            count, state \u003d _policy_string(policy)"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "                \"bad-whitespace\","
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "                line\u003dtoken[2][0],"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(count, state, position, construct, _underline_token(token)),"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "                col_offset\u003dtoken[2][1],"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "    def _inside_brackets(self, left):"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._bracket_stack[-1] \u003d\u003d left"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "    def _prepare_token_dispatcher(self):"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "        raw \u003d ["
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "            (_KEYWORD_TOKENS, self._check_keyword_parentheses),"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "            (_OPENING_BRACKETS, self._opening_bracket),"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "            (_CLOSING_BRACKETS, self._closing_bracket),"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "            ([\"\u003d\"], self._check_equals_spacing),"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "            (_SPACED_OPERATORS, self._check_surrounded_by_space),"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "            ([\",\"], self._handle_comma),"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "            ([\":\"], self._handle_colon),"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "            ([\"lambda\"], self._open_lambda),"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "        dispatch \u003d {}"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "        for tokens, handler in raw:"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "            for token in tokens:"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "                dispatch[token] \u003d handler"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "        return dispatch"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "    def process_tokens(self, tokens):"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"process tokens and search for :"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "         _ non strict indentation (i.e. not always using the \u003cindent\u003e parameter as"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "           indent unit)"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "         _ too long lines (i.e. longer than \u003cmax_chars\u003e)"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "         _ optionally bad construct (if given, bad_construct must be a compiled"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "           regular expression)."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bracket_stack \u003d [None]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "        indents \u003d [0]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "        check_equal \u003d False"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        line_num \u003d 0"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        self._lines \u003d {}"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "        self._visited_lines \u003d {}"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "        token_handlers \u003d self._prepare_token_dispatcher()"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        self._last_line_ending \u003d None"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "        last_blank_line_num \u003d 0"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        self._current_line \u003d ContinuedLineState(tokens, self.config)"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "        for idx, (tok_type, token, start, _, line) in enumerate(tokens):"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "            if start[0] !\u003d line_num:"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "                line_num \u003d start[0]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "                # A tokenizer oddity: if an indented line contains a multi-line"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "                # docstring, the line member of the INDENT token does not contain"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "                # the full line; therefore we check the next token on the line."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "                if tok_type \u003d\u003d tokenize.INDENT:"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.new_line(TokenWrapper(tokens), idx - 1, idx + 1)"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.new_line(TokenWrapper(tokens), idx - 1, idx)"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "            if tok_type \u003d\u003d tokenize.NEWLINE:"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "                # a program statement, or ENDMARKER, will eventually follow,"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "                # after some (possibly empty) run of tokens of the form"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "                #     (NL | COMMENT)* (INDENT | DEDENT+)?"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "                # If an INDENT appears, setting check_equal is wrong, and will"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "                # be undone when we see the INDENT."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "                check_equal \u003d True"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "                self._process_retained_warnings(TokenWrapper(tokens), idx)"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "                self._current_line.next_logical_line()"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_line_ending(token, line_num)"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "            elif tok_type \u003d\u003d tokenize.INDENT:"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "                check_equal \u003d False"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "                self.check_indent_level(token, indents[-1] + 1, line_num)"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "                indents.append(indents[-1] + 1)"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "            elif tok_type \u003d\u003d tokenize.DEDENT:"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "                # there\u0027s nothing we need to check here!  what\u0027s important is"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "                # that when the run of DEDENTs ends, the indentation of the"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "                # program statement (or ENDMARKER) that triggered the run is"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "                # equal to what\u0027s left at the top of the indents stack"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "                check_equal \u003d True"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "                if len(indents) \u003e 1:"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "                    del indents[-1]"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "            elif tok_type \u003d\u003d tokenize.NL:"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "                if not line.strip(\"\\r\\n\"):"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "                    last_blank_line_num \u003d line_num"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_continued_indentation(TokenWrapper(tokens), idx + 1)"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "                self._current_line.next_physical_line()"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "            elif tok_type not in (tokenize.COMMENT, tokenize.ENCODING):"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "                self._current_line.handle_line_start(idx)"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "                # This is the first concrete token following a NEWLINE, so it"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "                # must be the first token of the next program statement, or an"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "                # ENDMARKER; the \"line\" argument exposes the leading whitespace"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "                # for this statement; in the case of ENDMARKER, line is an empty"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "                # string, so will properly match the empty string with which the"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "                # \"indents\" stack was seeded"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "                if check_equal:"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "                    check_equal \u003d False"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.check_indent_level(line, indents[-1], line_num)"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "            if tok_type \u003d\u003d tokenize.NUMBER and token.endswith(\"l\"):"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"lowercase-l-suffix\", line\u003dline_num)"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "                handler \u003d token_handlers[token]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "            except KeyError:"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "                handler(tokens, idx)"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "        line_num -\u003d 1  # to be ok with \"wc -l\""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "        if line_num \u003e self.config.max_module_lines:"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "            # Get the line where the too-many-lines (or its message id)"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "            # was disabled or default to 1."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "            message_definition \u003d self.linter.msgs_store.get_message_definitions("
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "                \"too-many-lines\""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "            )[0]"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "            names \u003d (message_definition.msgid, \"too-many-lines\")"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "            line \u003d next(filter(None, map(self.linter._pragma_lineno.get, names)), 1)"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "                \"too-many-lines\","
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(line_num, self.config.max_module_lines),"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "                line\u003dline,"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "        # See if there are any trailing lines.  Do not complain about empty"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "        # files like __init__.py markers."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "        if line_num \u003d\u003d last_blank_line_num and line_num \u003e 0:"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"trailing-newlines\", line\u003dline_num)"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_line_ending(self, line_ending, line_num):"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "        # check if line endings are mixed"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._last_line_ending is not None:"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "            # line_ending \u003d\u003d \"\" indicates a synthetic newline added at"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "            # the end of a file that does not, in fact, end with a"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "            # newline."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "            if line_ending and line_ending !\u003d self._last_line_ending:"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"mixed-line-endings\", line\u003dline_num)"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "        self._last_line_ending \u003d line_ending"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "        # check if line ending is as expected"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "        expected \u003d self.config.expected_line_ending_format"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "        if expected:"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "            # reduce multiple \\n\\n\\n\\n to one \\n"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "            line_ending \u003d reduce(lambda x, y: x + y if x !\u003d y else x, line_ending, \"\")"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "            line_ending \u003d \"LF\" if line_ending \u003d\u003d \"\\n\" else \"CRLF\""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "            if line_ending !\u003d expected:"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"unexpected-line-ending-format\","
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "                    args\u003d(line_ending, expected),"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "                    line\u003dline_num,"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "    def _process_retained_warnings(self, tokens, current_pos):"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "        single_line_block_stmt \u003d not _last_token_on_line_is(tokens, current_pos, \":\")"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "        for indent_pos, state, indentations in self._current_line.retained_warnings:"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "            block_type \u003d indentations[tokens.token_indent(indent_pos)]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "            hints \u003d {k: v for k, v in indentations.items() if v !\u003d block_type}"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "            if single_line_block_stmt and block_type \u003d\u003d WITH_BODY:"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                self._add_continuation_message(state, hints, tokens, indent_pos)"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "            elif not single_line_block_stmt and block_type \u003d\u003d SINGLE_LINE:"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "                self._add_continuation_message(state, hints, tokens, indent_pos)"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_continued_indentation(self, tokens, next_idx):"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "        def same_token_around_nl(token_type):"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "            return ("
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "                tokens.type(next_idx) \u003d\u003d token_type"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "                and tokens.type(next_idx - 2) \u003d\u003d token_type"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "        # Do not issue any warnings if the next line is empty."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._current_line.has_content or tokens.type(next_idx) \u003d\u003d tokenize.NL:"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "        state, valid_indentations \u003d self._current_line.get_valid_indentations(next_idx)"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        # Special handling for hanging comments and strings. If the last line ended"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "        # with a comment (string) and the new line contains only a comment, the line"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "        # may also be indented to the start of the previous token."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "        if same_token_around_nl(tokenize.COMMENT) or same_token_around_nl("
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "            tokenize.STRING"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "            valid_indentations[tokens.token_indent(next_idx - 2)] \u003d True"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "        # We can only decide if the indentation of a continued line before opening"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "        # a new block is valid once we know of the body of the block is on the"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "        # same line as the block opener. Since the token processing is single-pass,"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "        # emitting those warnings is delayed until the block opener is processed."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "            state.context_type in (HANGING_BLOCK, CONTINUED_BLOCK)"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "            and tokens.token_indent(next_idx) in valid_indentations"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "            self._current_line.add_block_warning(next_idx, state, valid_indentations)"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        elif tokens.token_indent(next_idx) not in valid_indentations:"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "            length_indentation \u003d len(tokens.token_indent(next_idx))"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "            if not any("
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "                length_indentation \u003d\u003d 2 * len(indentation)"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "                for indentation in valid_indentations"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "                self._add_continuation_message("
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "                    state, valid_indentations, tokens, next_idx"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "    def _add_continuation_message(self, state, indentations, tokens, position):"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "        readable_type, readable_position \u003d _CONTINUATION_MSG_PARTS[state.context_type]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "        hint_line, delta_message \u003d _get_indent_hint_line("
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "            indentations, tokens.token_indent(position)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message("
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "            \"bad-continuation\","
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "            line\u003dtokens.start_line(position),"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "            args\u003d("
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "                readable_type,"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "                readable_position,"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "                delta_message,"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "                tokens.line(position),"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "                hint_line,"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"multiple-statements\")"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_default(self, node):"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check the node line number and check it if not yet done\"\"\""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "        if not node.is_statement:"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        if not node.root().pure_python:"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        prev_sibl \u003d node.previous_sibling()"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "        if prev_sibl is not None:"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "            prev_line \u003d prev_sibl.fromlineno"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "        # The line on which a finally: occurs in a try/finally"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "        # is not directly represented in the AST. We infer it"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "        # by taking the last line of the body and adding 1, which"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "        # should be the line of finally:"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "        elif ("
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "            isinstance(node.parent, nodes.TryFinally) and node in node.parent.finalbody"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "            prev_line \u003d node.parent.body[0].tolineno + 1"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "            prev_line \u003d node.parent.statement().fromlineno"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "        line \u003d node.fromlineno"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "        assert line, node"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "        if prev_line \u003d\u003d line and self._visited_lines.get(line) !\u003d 2:"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_multi_statement_line(node, line)"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "        if line in self._visited_lines:"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "            tolineno \u003d node.blockstart_tolineno"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "        except AttributeError:"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "            tolineno \u003d node.tolineno"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tolineno, node"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "        lines \u003d []"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "        for line in range(line, tolineno + 1):"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "            self._visited_lines[line] \u003d 1"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "                lines.append(self._lines[line].rstrip())"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "            except KeyError:"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "                lines.append(\"\")"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_multi_statement_line(self, node, line):"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check for lines containing multiple statements.\"\"\""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "        # Do not warn about multiple nested context managers"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "        # in with statements."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, nodes.With):"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "        # For try... except... finally..., the two nodes"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "        # appear to be on the same line due to how the AST is built."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, nodes.TryExcept) and isinstance("
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "            node.parent, nodes.TryFinally"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(node.parent, nodes.If)"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "            and not node.parent.orelse"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "            and self.config.single_line_if_stmt"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(node.parent, nodes.ClassDef)"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "            and len(node.parent.body) \u003d\u003d 1"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "            and self.config.single_line_class_stmt"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "        # Function overloads that use ``Ellipsis`` are exempted."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, nodes.Expr) and ("
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(node.value, nodes.Ellipsis)"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "            or (isinstance(node.value, nodes.Const) and node.value.value is Ellipsis)"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "            frame \u003d node.frame()"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "            if is_overload_stub(frame) or is_protocol_class(node_frame_class(frame)):"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"multiple-statements\", node\u003dnode)"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "        self._visited_lines[line] \u003d 2"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "    def check_line_ending(self, line: str, i: int) -\u003e None:"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "        Check that the final newline is not missing and that there is no trailing whitespace."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "        if not line.endswith(\"\\n\"):"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"missing-final-newline\", line\u003di)"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "            # exclude \\f (formfeed) from the rstrip"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "            stripped_line \u003d line.rstrip(\"\\t\\n\\r\\v \")"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "            if not stripped_line and _EMPTY_LINE in self.config.no_space_check:"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "                # allow empty lines"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "            elif line[len(stripped_line) :] not in (\"\\n\", \"\\r\\n\"):"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"trailing-whitespace\", line\u003di, col_offset\u003dlen(stripped_line)"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "    def check_line_length(self, line: str, i: int) -\u003e None:"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "        Check that the line length is less than the authorized value"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "        max_chars \u003d self.config.max_line_length"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "        ignore_long_line \u003d self.config.ignore_long_lines"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "        line \u003d line.rstrip()"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(line) \u003e max_chars and not ignore_long_line.search(line):"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"line-too-long\", line\u003di, args\u003d(len(line), max_chars))"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "    def remove_pylint_option_from_lines(options_pattern_obj) -\u003e str:"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "        Remove the `# pylint ...` pattern from lines"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "        lines \u003d options_pattern_obj.string"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "        purged_lines \u003d ("
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "            lines[: options_pattern_obj.start(1)].rstrip()"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "            + lines[options_pattern_obj.end(1) :]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "        return purged_lines"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "    def is_line_length_check_activated(pylint_pattern_match_object) -\u003e bool:"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "        Return true if the line length check is activated"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "            for pragma in parse_pragma(pylint_pattern_match_object.group(2)):"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "                if pragma.action \u003d\u003d \"disable\" and \"line-too-long\" in pragma.messages:"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "                    return False"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "        except PragmaParserError:"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "            # Printing usefull informations dealing with this error is done in lint.py"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "    def specific_splitlines(lines: str) -\u003e List[str]:"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "        Split lines according to universal newlines except those in a specific sets"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "        unsplit_ends \u003d {"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\v\","
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\x0b\","
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\f\","
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\x0c\","
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\x1c\","
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\x1d\","
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\x1e\","
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\x85\","
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\u2028\","
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\u2029\","
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "        res \u003d []"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "        buffer \u003d \"\""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "        for atomic_line in lines.splitlines(True):"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "            if atomic_line[-1] not in unsplit_ends:"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "                res.append(buffer + atomic_line)"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "                buffer \u003d \"\""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "                buffer +\u003d atomic_line"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "        return res"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "    def check_lines(self, lines: str, lineno: int) -\u003e None:"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "        Check lines have :"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "            - a final newline"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "            - no trailing whitespace"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "            - less than a maximum number of characters"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "        #  By default, check the line length"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "        check_l_length \u003d True"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "        # Line length check may be deactivated through `pylint: disable` comment"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "        mobj \u003d OPTION_PO.search(lines)"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "        if mobj:"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "            check_l_length \u003d self.is_line_length_check_activated(mobj)"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "            # The \u0027pylint: disable whatever\u0027 should not be taken into account for line length count"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "            lines \u003d self.remove_pylint_option_from_lines(mobj)"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "        for line in self.specific_splitlines(lines):"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "            if check_l_length:"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "                self.check_line_length(line, lineno)"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "            self.check_line_ending(line, lineno)"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "            lineno +\u003d 1"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "    def check_indent_level(self, string, expected, line_num):"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"return the indent level of the string"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "        indent \u003d self.config.indent_string"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "        if indent \u003d\u003d \"\\\\t\":  # \\t is not interpreted in the configuration file"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "            indent \u003d \"\\t\""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "        level \u003d 0"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "        unit_size \u003d len(indent)"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "        while string[:unit_size] \u003d\u003d indent:"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "            string \u003d string[unit_size:]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "            level +\u003d 1"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "        suppl \u003d \"\""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "        while string and string[0] in \" \\t\":"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "            if string[0] !\u003d indent[0]:"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "                if string[0] \u003d\u003d \"\\t\":"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "                    args \u003d (\"tab\", \"space\")"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "                    args \u003d (\"space\", \"tab\")"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"mixed-indentation\", args\u003dargs, line\u003dline_num)"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "                return level"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "            suppl +\u003d string[0]"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "            string \u003d string[1:]"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "        if level !\u003d expected or suppl:"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "            i_type \u003d \"spaces\""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "            if indent[0] \u003d\u003d \"\\t\":"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "                i_type \u003d \"tabs\""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "                \"bad-indentation\","
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "                line\u003dline_num,"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(level * unit_size + len(suppl), i_type, expected * unit_size),"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "def register(linter):"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"required method to auto register this checker \"\"\""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(FormatChecker(linter))"
      }
    ],
    "authorContributionMap": {
      "-": 1383,
      "Nick Drozd": 2
    }
  },
  {
    "path": "pylint/checkers/python3.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014-2015 Brett Cannon \u003cbrett@python.org\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Simu Toni \u003csimutoni@gmail.com\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Pavel Roskin \u003cproski@gnu.org\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Cosmin Poieana \u003ccmin@ropython.org\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Viorel Stirbu \u003cviorels@gmail.com\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016, 2018 Jakub Wilk \u003cjwilk@jwilk.net\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016-2017 Roy Williams \u003croy.williams.iii@gmail.com\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Roy Williams \u003crwilliams@lyft.com\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Erik \u003cerik.eriksson@yahoo.com\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Ville Skyttä \u003cville.skytta@iki.fi\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Daniel Miller \u003cmillerdev@gmail.com\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 hippo91 \u003cguillaume.peillex@gmail.com\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 ahirnish \u003cahirnish@gmail.com\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Sushobhit \u003c31987769+sushobhit27@users.noreply.github.com\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Anthony Sottile \u003casottile@umich.edu\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ashley Whetter \u003cashley@awhetter.co.uk\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ville Skyttä \u003cville.skytta@upcloud.com\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 gaurikholkar \u003cf2013002@goa.bits-pilani.ac.in\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"Check Python 2 code for Python 2/3 source-compatible issues.\"\"\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import itertools"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import re"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import tokenize"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "from collections import namedtuple"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid import bases"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint import checkers, interfaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers import utils"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers.utils import find_try_except_wrapper_node, node_ignores_exception"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.constants import WarningScope"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.interfaces import INFERENCE, INFERENCE_FAILURE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "_ZERO \u003d re.compile(\"^0+$\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_old_octal(literal):"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    if _ZERO.match(literal):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    if re.match(r\"0\\d+\", literal):"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            int(literal, 8)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        except ValueError:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    return None"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "def _inferred_value_is_dict(value):"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(value, astroid.Dict):"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    return isinstance(value, astroid.Instance) and \"dict\" in value.basenames"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "def _infer_if_relevant_attr(node, whitelist):"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    return node.expr.infer() if node.attrname in whitelist else []"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_builtin(node):"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    return getattr(node, \"name\", None) in (\"__builtin__\", \"builtins\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_ACCEPTS_ITERATOR \u003d {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \"iter\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \"list\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tuple\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \"sorted\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \"set\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \"sum\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \"any\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \"all\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"enumerate\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \"dict\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \"filter\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \"reversed\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \"max\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \"min\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \"frozenset\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \"OrderedDict\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ATTRIBUTES_ACCEPTS_ITERATOR \u003d {\"join\", \"from_iterable\"}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "_BUILTIN_METHOD_ACCEPTS_ITERATOR \u003d {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \"builtins.list.extend\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \"builtins.dict.update\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \"builtins.set.update\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "DICT_METHODS \u003d {\"items\", \"keys\", \"values\"}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "def _in_iterating_context(node):"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Check if the node is being used as an iterator."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    Definition is taken from lib2to3.fixer_util.in_special_context()."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    parent \u003d node.parent"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    # Since a call can\u0027t be the loop variant we only need to know if the node\u0027s"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    # parent is a \u0027for\u0027 loop to know it\u0027s being used as the iterator for the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    # loop."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(parent, astroid.For):"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    # Need to make sure the use of the node is in the iterator part of the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    # comprehension."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(parent, astroid.Comprehension):"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if parent.iter \u003d\u003d node:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    # Various built-ins can take in an iterable or list and lead to the same"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    # value."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    elif isinstance(parent, astroid.Call):"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(parent.func, astroid.Name):"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if parent.func.name in _ACCEPTS_ITERATOR:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(parent.func, astroid.Attribute):"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if parent.func.attrname in ATTRIBUTES_ACCEPTS_ITERATOR:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d utils.safe_infer(parent.func)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if inferred:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred.qname() in _BUILTIN_METHOD_ACCEPTS_ITERATOR:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            root \u003d inferred.root()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            if root and root.name \u003d\u003d \"itertools\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    # If the call is in an unpacking, there\u0027s no need to warn,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    # since it can be considered iterating."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    elif isinstance(parent, astroid.Assign) and isinstance("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        parent.targets[0], (astroid.List, astroid.Tuple)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    ):"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(parent.targets[0].elts) \u003e 1:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    # If the call is in a containment check, we consider that to"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    # be an iterating context"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    elif ("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        isinstance(parent, astroid.Compare)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        and len(parent.ops) \u003d\u003d 1"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Athos Ribeiro"
        },
        "content": "        and parent.ops[0][0] in [\"in\", \"not in\"]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    ):"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    # Also if it\u0027s an `yield from`, that\u0027s fair"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    elif isinstance(parent, astroid.YieldFrom):"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(parent, astroid.Starred):"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_conditional_import(node):"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Checks if an import node is in the context of a conditional."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    parent \u003d node.parent"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    return isinstance("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        parent, (astroid.TryExcept, astroid.ExceptHandler, astroid.If, astroid.IfExp)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Branch \u003d namedtuple(\"Branch\", [\"node\", \"is_py2_only\"])"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "class Python3Checker(checkers.BaseChecker):"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d interfaces.IAstroidChecker"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    enabled \u003d False"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"python3\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        # Errors for what will syntactically break in Python 3, warnings for"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        # everything else."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1601\": ("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            \"print statement used\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            \"print-statement\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a print statement is used \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(`print` is a function in Python 3)\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1602\": ("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Parameter unpacking specified\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            \"parameter-unpacking\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when parameter unpacking is specified for a function\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(Python 3 doesn\u0027t allow it)\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1603\": ("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Implicit unpacking of exceptions is not supported in Python 3\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unpacking-in-except\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Python3 will not allow implicit unpacking of \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            \"exceptions in except clauses. \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            \"See http://www.python.org/dev/peps/pep-3110/\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"W0712\", \"old-unpacking-in-except\")]},"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1604\": ("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use raise ErrorClass(args) instead of raise ErrorClass, args.\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            \"old-raise-syntax\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the alternate raise syntax \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\u0027raise foo, bar\u0027 is used \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            \"instead of \u0027raise foo(bar)\u0027.\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"W0121\", \"old-old-raise-syntax\")]},"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1605\": ("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use of the `` operator\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            \"backtick\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when the deprecated \"``\" (backtick) operator is used \u0027"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            \"instead  of the str() function.\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"scope\": WarningScope.NODE, \"old_names\": [(\"W0333\", \"old-backtick\")]},"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1609\": ("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Import * only allowed at module level\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            \"import-star-module-level\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the import star syntax is used somewhere \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            \"else than the module level.\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"maxversion\": (3, 0)},"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1601\": ("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            \"apply built-in referenced\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            \"apply-builtin\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the apply built-in function is referenced \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1602\": ("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            \"basestring built-in referenced\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            \"basestring-builtin\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the basestring built-in function is referenced \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1603\": ("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            \"buffer built-in referenced\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            \"buffer-builtin\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the buffer built-in function is referenced \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1604\": ("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            \"cmp built-in referenced\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            \"cmp-builtin\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the cmp built-in function is referenced \""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1605\": ("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            \"coerce built-in referenced\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            \"coerce-builtin\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the coerce built-in function is referenced \""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1606\": ("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            \"execfile built-in referenced\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            \"execfile-builtin\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the execfile built-in function is referenced \""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1607\": ("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            \"file built-in referenced\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            \"file-builtin\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the file built-in function is referenced \""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1608\": ("
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            \"long built-in referenced\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            \"long-builtin\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the long built-in function is referenced \""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1609\": ("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            \"raw_input built-in referenced\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            \"raw_input-builtin\","
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the raw_input built-in function is referenced \""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1610\": ("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            \"reduce built-in referenced\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            \"reduce-builtin\","
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the reduce built-in function is referenced \""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1611\": ("
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            \"StandardError built-in referenced\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            \"standarderror-builtin\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the StandardError built-in function is referenced \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1612\": ("
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unicode built-in referenced\","
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unicode-builtin\","
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the unicode built-in function is referenced \""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1613\": ("
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            \"xrange built-in referenced\","
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            \"xrange-builtin\","
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the xrange built-in function is referenced \""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3)\","
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1614\": ("
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__coerce__ method defined\","
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            \"coerce-method\","
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __coerce__ method is defined \""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1615\": ("
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__delslice__ method defined\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            \"delslice-method\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __delslice__ method is defined \""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1616\": ("
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__getslice__ method defined\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            \"getslice-method\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __getslice__ method is defined \""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1617\": ("
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__setslice__ method defined\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            \"setslice-method\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __setslice__ method is defined \""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1618\": ("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            \"import missing `from __future__ import absolute_import`\","
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            \"no-absolute-import\","
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an import is not accompanied by \""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            \"``from __future__ import absolute_import`` \""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(default behaviour in Python 3)\","
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1619\": ("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            \"division w/o __future__ statement\","
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            \"old-division\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used for non-floor division w/o a float literal or \""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            \"``from __future__ import division`` \""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(Python 3 returns a float for int division unconditionally)\","
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1620\": ("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Calling a dict.iter*() method\","
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict-iter-method\","
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used for calls to dict.iterkeys(), itervalues() or iteritems() \""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(Python 3 lacks these methods)\","
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1621\": ("
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Calling a dict.view*() method\","
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict-view-method\","
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used for calls to dict.viewkeys(), viewvalues() or viewitems() \""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(Python 3 lacks these methods)\","
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1622\": ("
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Called a next() method on an object\","
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            \"next-method-called\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an object\u0027s next() method is called \""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(Python 3 uses the next() built-in function)\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1623\": ("
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Assigning to a class\u0027s __metaclass__ attribute\","
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            \"metaclass-assignment\","
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a metaclass is specified by assigning to __metaclass__ \""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(Python 3 specifies the metaclass as a class statement argument)\","
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1624\": ("
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Indexing exceptions will not work on Python 3\","
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            \"indexing-exception\","
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Indexing exceptions will not work on Python 3. Use \""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            \"`exception.args[index]` instead.\","
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"W0713\", \"old-indexing-exception\")]},"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1625\": ("
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Raising a string exception\","
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            \"raising-string\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a string exception is raised. This will not \""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            \"work on Python 3.\","
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"W0701\", \"old-raising-string\")]},"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1626\": ("
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            \"reload built-in referenced\","
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            \"reload-builtin\","
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the reload built-in function is referenced \""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(missing from Python 3). You can use instead imp.reload \""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            \"or importlib.reload.\","
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1627\": ("
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__oct__ method defined\","
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            \"oct-method\","
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an __oct__ method is defined \""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1628\": ("
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__hex__ method defined\","
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            \"hex-method\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __hex__ method is defined (method is not used by Python 3)\","
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1629\": ("
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__nonzero__ method defined\","
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            \"nonzero-method\","
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __nonzero__ method is defined \""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1630\": ("
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__cmp__ method defined\","
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            \"cmp-method\","
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __cmp__ method is defined (method is not used by Python 3)\","
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        # \u0027W1631\u0027: replaced by W1636"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1632\": ("
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            \"input built-in referenced\","
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            \"input-builtin\","
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the input built-in is referenced \""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(backwards-incompatible semantics in Python 3)\","
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1633\": ("
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            \"round built-in referenced\","
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            \"round-builtin\","
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the round built-in is referenced \""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(backwards-incompatible semantics in Python 3)\","
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1634\": ("
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            \"intern built-in referenced\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            \"intern-builtin\","
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the intern built-in is referenced \""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(Moved to sys.intern in Python 3)\","
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1635\": ("
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unichr built-in referenced\","
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unichr-builtin\","
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the unichr built-in is referenced (Use chr in Python 3)\","
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1636\": ("
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "            \"map built-in referenced when not iterating\","
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "            \"map-builtin-not-iterating\","
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the map built-in is referenced in a non-iterating \""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "            \"context (returns an iterator in Python 3)\","
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"W1631\", \"implicit-map-evaluation\")]},"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1637\": ("
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            \"zip built-in referenced when not iterating\","
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            \"zip-builtin-not-iterating\","
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the zip built-in is referenced in a non-iterating \""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "            \"context (returns an iterator in Python 3)\","
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1638\": ("
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "            \"range built-in referenced when not iterating\","
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            \"range-builtin-not-iterating\","
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the range built-in is referenced in a non-iterating \""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "            \"context (returns a range in Python 3)\","
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1639\": ("
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            \"filter built-in referenced when not iterating\","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            \"filter-builtin-not-iterating\","
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the filter built-in is referenced in a non-iterating \""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "            \"context (returns an iterator in Python 3)\","
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1640\": ("
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using the cmp argument for list.sort / sorted\","
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "            \"using-cmp-argument\","
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using the cmp argument for list.sort or the sorted \""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            \"builtin should be avoided, since it was removed in \""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Python 3. Using either `key` or `functools.cmp_to_key` \""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "            \"should be preferred.\","
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1641\": ("
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Implementing __eq__ without also implementing __hash__\","
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "            \"eq-without-hash\","
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a class implements __eq__ but not __hash__.  In Python 2, objects \""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "            \"get object.__hash__ as the default implementation, in Python 3 objects get \""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "            \"None as their default __hash__ implementation if they also implement __eq__.\","
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1642\": ("
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__div__ method defined\","
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            \"div-method\","
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __div__ method is defined.  Using `__truediv__` and setting\""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__div__ \u003d __truediv__ should be preferred.\""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1643\": ("
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__idiv__ method defined\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "            \"idiv-method\","
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an __idiv__ method is defined.  Using `__itruediv__` and setting\""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__idiv__ \u003d __itruediv__ should be preferred.\""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1644\": ("
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__rdiv__ method defined\","
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "            \"rdiv-method\","
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a __rdiv__ method is defined.  Using `__rtruediv__` and setting\""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__rdiv__ \u003d __rtruediv__ should be preferred.\""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(method is not used by Python 3)\","
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1645\": ("
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Exception.message removed in Python 3\","
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "            \"exception-message-attribute\","
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when the message attribute is accessed on an Exception.  Use \""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "            \"str(exception) instead.\","
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1646\": ("
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "            \"non-text encoding used in str.decode\","
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "            \"invalid-str-codec\","
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when using str.encode or str.decode with a non-text encoding.  Use \""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "            \"codecs module to handle arbitrary codecs.\","
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1647\": ("
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            \"sys.maxint removed in Python 3\","
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "            \"sys-max-int\","
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when accessing sys.maxint.  Use sys.maxsize instead.\","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1648\": ("
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Module moved in Python 3\","
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            \"bad-python3-import\","
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when importing a module that no longer exists in Python 3.\","
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1649\": ("
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Accessing a deprecated function on the string module\","
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-string-function\","
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when accessing a string function that has been deprecated in Python 3.\","
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1650\": ("
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using str.translate with deprecated deletechars parameters\","
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-str-translate-call\","
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when using the deprecated deletechars parameters from str.translate.  Use \""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            \"re.sub to remove the desired characters \","
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1651\": ("
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Accessing a deprecated function on the itertools module\","
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-itertools-function\","
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when accessing a function on itertools that has been removed in Python 3.\","
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1652\": ("
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Accessing a deprecated fields on the types module\","
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-types-field\","
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when accessing a field on types that has been removed in Python 3.\","
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1653\": ("
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            \"next method defined\","
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "            \"next-method-defined\","
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a next method is defined that would be an iterator in Python 2 but \""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "            \"is treated as a normal function in Python 3.\","
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1654\": ("
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict.items referenced when not iterating\","
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict-items-not-iterating\","
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when dict.items is referenced in a non-iterating \""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "            \"context (returns an iterator in Python 3)\","
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1655\": ("
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict.keys referenced when not iterating\","
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict-keys-not-iterating\","
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when dict.keys is referenced in a non-iterating \""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "            \"context (returns an iterator in Python 3)\","
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1656\": ("
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict.values referenced when not iterating\","
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict-values-not-iterating\","
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when dict.values is referenced in a non-iterating \""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "            \"context (returns an iterator in Python 3)\","
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1657\": ("
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Accessing a removed attribute on the operator module\","
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-operator-function\","
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when accessing a field on operator module that has been \""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "            \"removed in Python 3.\","
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1658\": ("
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Accessing a removed attribute on the urllib module\","
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-urllib-function\","
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when accessing a field on urllib module that has been \""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "            \"removed or moved in Python 3.\","
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1659\": ("
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Accessing a removed xreadlines attribute\","
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            \"xreadlines-attribute\","
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when accessing the xreadlines() function on a file stream, \""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "            \"removed in Python 3.\","
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1660\": ("
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Accessing a removed attribute on the sys module\","
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-sys-function\","
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when accessing a field on sys module that has been \""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "            \"removed in Python 3.\","
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1661\": ("
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using an exception object that was bound by an except handler\","
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "            \"exception-escape\","
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when using an exception, that was bound in an except \""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "            \"handler, outside of the except handler. On Python 3 these \""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            \"exceptions will be deleted once they get out \""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "            \"of the except handler.\","
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1662\": ("
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using a variable that was bound inside a comprehension\","
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            \"comprehension-escape\","
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Emitted when using a variable, that was bound in a comprehension \""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "            \"handler, outside of the comprehension itself. On Python 3 these \""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "            \"variables will be deleted outside of the \""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "            \"comprehension.\","
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    _bad_builtins \u003d frozenset("
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        ["
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "            \"apply\","
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "            \"basestring\","
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "            \"buffer\","
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "            \"cmp\","
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "            \"coerce\","
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            \"execfile\","
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "            \"file\","
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "            \"input\",  # Not missing, but incompatible semantics"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "            \"intern\","
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "            \"long\","
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "            \"raw_input\","
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "            \"reduce\","
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            \"round\",  # Not missing, but incompatible semantics"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "            \"StandardError\","
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unichr\","
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            \"unicode\","
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "            \"xrange\","
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "            \"reload\","
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    _unused_magic_methods \u003d frozenset("
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        ["
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__coerce__\","
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__delslice__\","
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__getslice__\","
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__setslice__\","
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__oct__\","
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__hex__\","
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__nonzero__\","
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__cmp__\","
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__div__\","
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__idiv__\","
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "            \"__rdiv__\","
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    _invalid_encodings \u003d frozenset("
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        ["
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            \"base64_codec\","
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "            \"base64\","
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "            \"base_64\","
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "            \"bz2_codec\","
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "            \"bz2\","
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "            \"hex_codec\","
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "            \"hex\","
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "            \"quopri_codec\","
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "            \"quopri\","
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "            \"quotedprintable\","
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "            \"quoted_printable\","
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "            \"uu_codec\","
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "            \"uu\","
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "            \"zlib_codec\","
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "            \"zlib\","
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "            \"zip\","
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            \"rot13\","
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "            \"rot_13\","
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "    _bad_python3_module_map \u003d {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        \"sys-max-int\": {\"sys\": frozenset([\"maxint\"])},"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        \"deprecated-itertools-function\": {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "            \"itertools\": frozenset("
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "                [\"izip\", \"ifilter\", \"imap\", \"izip_longest\", \"ifilterfalse\"]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        \"deprecated-types-field\": {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "            \"types\": frozenset("
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "                ["
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"EllipsisType\","
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"XRangeType\","
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"ComplexType\","
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"StringType\","
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"TypeType\","
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"LongType\","
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"UnicodeType\","
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"ClassType\","
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"BufferType\","
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"StringTypes\","
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"NotImplementedType\","
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"NoneType\","
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"InstanceType\","
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"FloatType\","
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"SliceType\","
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"UnboundMethodType\","
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"ObjectType\","
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"IntType\","
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"TupleType\","
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"ListType\","
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"DictType\","
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"FileType\","
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"DictionaryType\","
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"BooleanType\","
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"DictProxyType\","
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "                ]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-python3-import\": frozenset("
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "            ["
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                \"anydbm\","
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "                \"BaseHTTPServer\","
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "                \"__builtin__\","
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                \"CGIHTTPServer\","
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                \"ConfigParser\","
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "                \"copy_reg\","
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "                \"cPickle\","
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "                \"cStringIO\","
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Cookie\","
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "                \"cookielib\","
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "                \"dbhash\","
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "                \"dumbdbm\","
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "                \"dumbdb\","
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Dialog\","
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "                \"DocXMLRPCServer\","
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FileDialog\","
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FixTk\","
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "                \"gdbm\","
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "                \"htmlentitydefs\","
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "                \"HTMLParser\","
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "                \"httplib\","
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "                \"markupbase\","
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Queue\","
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "                \"repr\","
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "                \"robotparser\","
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "                \"ScrolledText\","
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "                \"SimpleDialog\","
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "                \"SimpleHTTPServer\","
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "                \"SimpleXMLRPCServer\","
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "                \"StringIO\","
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "                \"dummy_thread\","
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "                \"SocketServer\","
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "                \"test.test_support\","
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Tkinter\","
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Tix\","
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Tkconstants\","
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "                \"tkColorChooser\","
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "                \"tkCommonDialog\","
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Tkdnd\","
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "                \"tkFileDialog\","
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "                \"tkFont\","
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "                \"tkMessageBox\","
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "                \"tkSimpleDialog\","
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "                \"UserList\","
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "                \"UserString\","
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "                \"whichdb\","
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "                \"_winreg\","
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "                \"xmlrpclib\","
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "                \"audiodev\","
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Bastion\","
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "                \"bsddb185\","
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "                \"bsddb3\","
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Canvas\","
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "                \"cfmfile\","
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "                \"cl\","
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "                \"commands\","
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "                \"compiler\","
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "                \"dircache\","
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "                \"dl\","
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "                \"exception\","
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "                \"fpformat\","
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "                \"htmllib\","
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "                \"ihooks\","
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "                \"imageop\","
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "                \"imputil\","
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "                \"linuxaudiodev\","
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "                \"md5\","
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "                \"mhlib\","
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "                \"mimetools\","
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "                \"MimeWriter\","
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "                \"mimify\","
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "                \"multifile\","
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "                \"mutex\","
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "                \"new\","
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                \"popen2\","
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "                \"posixfile\","
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                \"pure\","
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "                \"rexec\","
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "                \"rfc822\","
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sets\","
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sha\","
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sgmllib\","
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sre\","
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "                \"stringold\","
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sunaudio\","
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sv\","
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "                \"test.testall\","
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "                \"thread\","
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "                \"timing\","
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "                \"toaiff\","
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "                \"user\","
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "                \"urllib2\","
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "                \"urlparse\","
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        \"deprecated-string-function\": {"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "            \"string\": frozenset("
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "                ["
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"maketrans\","
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"atof\","
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"atoi\","
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"atol\","
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"capitalize\","
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"expandtabs\","
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"find\","
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"rfind\","
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"index\","
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"rindex\","
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"count\","
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"lower\","
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"letters\","
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"split\","
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"rsplit\","
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splitfields\","
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"join\","
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"joinfields\","
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"lstrip\","
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"rstrip\","
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"strip\","
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"swapcase\","
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"translate\","
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"upper\","
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"ljust\","
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"rjust\","
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"center\","
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"zfill\","
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"replace\","
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"lowercase\","
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"letters\","
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"uppercase\","
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"atol_error\","
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"atof_error\","
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"atoi_error\","
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"index_error\","
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "                ]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        \"deprecated-operator-function\": {\"operator\": frozenset({\"div\"})},"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        \"deprecated-urllib-function\": {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "            \"urllib\": frozenset("
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"addbase\","
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"addclosehook\","
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"addinfo\","
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"addinfourl\","
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"always_safe\","
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"basejoin\","
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"ftpcache\","
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"ftperrors\","
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"ftpwrapper\","
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"getproxies\","
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"getproxies_environment\","
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"getproxies_macosx_sysconf\","
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"main\","
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"noheaders\","
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"pathname2url\","
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"proxy_bypass\","
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"proxy_bypass_environment\","
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"proxy_bypass_macosx_sysconf\","
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"quote\","
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"quote_plus\","
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"reporthook\","
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splitattr\","
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splithost\","
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splitnport\","
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splitpasswd\","
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splitport\","
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splitquery\","
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splittag\","
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splittype\","
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splituser\","
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"splitvalue\","
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"unquote\","
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"unquote_plus\","
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"unwrap\","
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"url2pathname\","
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"urlcleanup\","
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"urlencode\","
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"urlopen\","
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"urlretrieve\","
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "        \"deprecated-sys-function\": {\"sys\": frozenset({\"exc_clear\"})},"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "    _deprecated_attrs \u003d frozenset("
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "        itertools.chain.from_iterable("
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "            attr"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "            for module_map in _bad_python3_module_map.values()"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(module_map, dict)"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "            for attr in module_map.values()"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "    _relevant_call_attrs \u003d ("
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "        DICT_METHODS | _deprecated_attrs | {\"encode\", \"decode\", \"translate\"}"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "    _python_2_tests \u003d frozenset("
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        ["
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid.extract_node(x).repr_tree()"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "            for x in ["
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sys.version_info[0] \u003d\u003d 2\","
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sys.version_info[0] \u003c 3\","
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sys.version_info \u003d\u003d (2, 7)\","
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sys.version_info \u003c\u003d (2, 7)\","
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "                \"sys.version_info \u003c (3, 0)\","
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, *args, **kwargs):"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "        self._future_division \u003d False"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        self._future_absolute_import \u003d False"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        self._modules_warned_about \u003d set()"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        self._branch_stack \u003d []"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "        super(Python3Checker, self).__init__(*args, **kwargs)"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "    # pylint: disable\u003dkeyword-arg-before-vararg, arguments-differ"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "    def add_message(self, msg_id, always_warn\u003dFalse, *args, **kwargs):"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "        if always_warn or not ("
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            self._branch_stack and self._branch_stack[-1].is_py2_only"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "            super(Python3Checker, self).add_message(msg_id, *args, **kwargs)"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_py2_test(self, node):"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.test, astroid.Attribute) and isinstance("
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "            node.test.expr, astroid.Name"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.test.expr.name \u003d\u003d \"six\" and node.test.attrname \u003d\u003d \"PY2\":"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "        elif ("
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(node.test, astroid.Compare)"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "            and node.test.repr_tree() in self._python_2_tests"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_if(self, node):"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "        self._branch_stack.append(Branch(node, self._is_py2_test(node)))"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_if(self, node):"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "        assert self._branch_stack.pop().node \u003d\u003d node"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_ifexp(self, node):"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        self._branch_stack.append(Branch(node, self._is_py2_test(node)))"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_ifexp(self, node):"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "        assert self._branch_stack.pop().node \u003d\u003d node"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_module(self, node):  # pylint: disable\u003dunused-argument"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Clear checker state after previous module.\"\"\""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "        self._future_division \u003d False"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "        self._future_absolute_import \u003d False"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.is_method():"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.name in self._unused_magic_methods:"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "                method_name \u003d node.name"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "                if node.name.startswith(\"__\"):"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "                    method_name \u003d node.name[2:-2]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(method_name + \"-method\", node\u003dnode)"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "            elif node.name \u003d\u003d \"next\":"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "                # If there is a method named `next` declared, if it is invokable"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "                # with zero arguments then it implements the Iterator protocol."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "                # This means if the method is an instance method or a"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "                # classmethod 1 argument should cause a failure, if it is a"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "                # staticmethod 0 arguments should cause a failure."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "                failing_arg_count \u003d 1"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "                if utils.decorated_with(node, [bases.BUILTINS + \".staticmethod\"]):"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "                    failing_arg_count \u003d 0"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "                if len(node.args.args) \u003d\u003d failing_arg_count:"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"next-method-defined\", node\u003dnode)"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"parameter-unpacking\")"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_arguments(self, node):"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "        for arg in node.args:"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(arg, astroid.Tuple):"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"parameter-unpacking\", node\u003darg)"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"comprehension-escape\")"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_listcomp(self, node):"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "        names \u003d {"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "            generator.target.name"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "            for generator in node.generators"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(generator.target, astroid.AssignName)"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "        scope \u003d node.parent.scope()"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        scope_names \u003d scope.nodes_of_class(astroid.Name, skip_klass\u003dastroid.FunctionDef)"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        has_redefined_assign_name \u003d any("
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "            assign_name"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "            for assign_name in scope.nodes_of_class("
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.AssignName, skip_klass\u003dastroid.FunctionDef"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "            if assign_name.name in names and assign_name.lineno \u003e node.lineno"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "        if has_redefined_assign_name:"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "        emitted_for_names \u003d set()"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "        scope_names \u003d list(scope_names)"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        for scope_name in scope_names:"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "                scope_name.name not in names"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "                or scope_name.lineno \u003c\u003d node.lineno"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "                or scope_name.name in emitted_for_names"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "                or scope_name.scope() \u003d\u003d node"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "            emitted_for_names.add(scope_name.name)"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"comprehension-escape\", node\u003dscope_name)"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_name(self, node):"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Detect when a \"bad\" built-in is referenced.\"\"\""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "        found_node, _ \u003d node.lookup(node.name)"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "        if not _is_builtin(found_node):"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.name not in self._bad_builtins:"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "        if node_ignores_exception(node) or isinstance("
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "            find_try_except_wrapper_node(node), astroid.ExceptHandler"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d node.name.lower() + \"-builtin\""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(message, node\u003dnode)"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"print-statement\")"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_print(self, node):"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"print-statement\", node\u003dnode, always_warn\u003dTrue)"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "    def _warn_if_deprecated(self, node, module, attributes, report_on_modules\u003dTrue):"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "        for message, module_map in self._bad_python3_module_map.items():"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "            if module in module_map and module not in self._modules_warned_about:"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(module_map, frozenset):"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "                    if report_on_modules:"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "                        self._modules_warned_about.add(module)"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(message, node\u003dnode)"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "                elif attributes and module_map[module].intersection(attributes):"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(message, node\u003dnode)"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_importfrom(self, node):"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.modname \u003d\u003d \"__future__\":"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "            for name, _ in node.names:"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "                if name \u003d\u003d \"division\":"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._future_division \u003d True"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "                elif name \u003d\u003d \"absolute_import\":"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._future_absolute_import \u003d True"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "            if not self._future_absolute_import:"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "                if self.linter.is_message_enabled(\"no-absolute-import\"):"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._future_absolute_import \u003d True"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "            if not _is_conditional_import(node) and not node.level:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "                self._warn_if_deprecated(node, node.modname, {x[0] for x in node.names})"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.names[0][0] \u003d\u003d \"*\":"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "            if self.linter.is_message_enabled(\"import-star-module-level\"):"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "                if not isinstance(node.scope(), astroid.Module):"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"import-star-module-level\", node\u003dnode)"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_import(self, node):"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._future_absolute_import:"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "            if self.linter.is_message_enabled(\"no-absolute-import\"):"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "                self._future_absolute_import \u003d True"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "        if not _is_conditional_import(node):"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "            for name, _ in node.names:"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "                self._warn_if_deprecated(node, name, None)"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"metaclass-assignment\")"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_classdef(self, node):"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "        if \"__metaclass__\" in node.locals:"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"metaclass-assignment\", node\u003dnode)"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "        locals_and_methods \u003d set(node.locals).union(x.name for x in node.mymethods())"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "        if \"__eq__\" in locals_and_methods and \"__hash__\" not in locals_and_methods:"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"eq-without-hash\", node\u003dnode)"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"old-division\")"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_binop(self, node):"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._future_division and node.op \u003d\u003d \"/\":"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "            for arg in (node.left, node.right):"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "                inferred \u003d utils.safe_infer(arg)"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "                # If we can infer the object and that object is not an int, bail out."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "                if inferred and not ("
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "                    ("
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "                        isinstance(inferred, astroid.Const)"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "                        and isinstance(inferred.value, int)"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "                    or ("
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "                        isinstance(inferred, astroid.Instance)"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "                        and inferred.name \u003d\u003d \"int\""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"old-division\", node\u003dnode)"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_cmp_argument(self, node):"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check that the `cmp` argument is used"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "        kwargs \u003d []"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.func, astroid.Attribute) and node.func.attrname \u003d\u003d \"sort\":"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d utils.safe_infer(node.func.expr)"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "            if not inferred:"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "            builtins_list \u003d \"{}.list\".format(bases.BUILTINS)"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(inferred, astroid.List) or inferred.qname() \u003d\u003d builtins_list:"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "                kwargs \u003d node.keywords"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(node.func, astroid.Name) and node.func.name \u003d\u003d \"sorted\":"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d utils.safe_infer(node.func)"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "            if not inferred:"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "            builtins_sorted \u003d \"{}.sorted\".format(bases.BUILTINS)"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred.qname() \u003d\u003d builtins_sorted:"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "                kwargs \u003d node.keywords"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "        for kwarg in kwargs or []:"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "            if kwarg.arg \u003d\u003d \"cmp\":"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"using-cmp-argument\", node\u003dnode)"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_constant_string_or_name(node):"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, astroid.Const):"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "            return isinstance(node.value, str)"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        return isinstance(node, astroid.Name)"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_none(node):"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "        return isinstance(node, astroid.Const) and node.value is None"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "    def _has_only_n_positional_args(node, number_of_args):"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "        return len(node.args) \u003d\u003d number_of_args and all(node.args) and not node.keywords"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "    def _could_be_string(inferred_types):"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        confidence \u003d INFERENCE if inferred_types else INFERENCE_FAILURE"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "        for inferred_type in inferred_types:"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred_type is astroid.Uninferable:"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                confidence \u003d INFERENCE_FAILURE"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "            elif not ("
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(inferred_type, astroid.Const)"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "                and isinstance(inferred_type.value, str)"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "                return None"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "        return confidence"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_call(self, node):"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_cmp_argument(node)"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.func, astroid.Attribute):"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred_types \u003d set()"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "                for inferred_receiver in _infer_if_relevant_attr("
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "                    node.func, self._relevant_call_attrs"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "                    if inferred_receiver is astroid.Uninferable:"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "                    inferred_types.add(inferred_receiver)"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "                    if isinstance(inferred_receiver, astroid.Module):"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "                        self._warn_if_deprecated("
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "                            node,"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "                            inferred_receiver.name,"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "                            {node.func.attrname},"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "                            report_on_modules\u003dFalse,"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "                        _inferred_value_is_dict(inferred_receiver)"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "                        and node.func.attrname in DICT_METHODS"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "                        if not _in_iterating_context(node):"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "                            checker \u003d \"dict-{}-not-iterating\".format(node.func.attrname)"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message(checker, node\u003dnode)"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.InferenceError:"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.args:"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "                is_str_confidence \u003d self._could_be_string(inferred_types)"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "                if is_str_confidence:"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "                        node.func.attrname in (\"encode\", \"decode\")"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "                        and len(node.args) \u003e\u003d 1"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "                        and node.args[0]"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "                        first_arg \u003d node.args[0]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "                        self._validate_encoding(first_arg, node)"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "                        node.func.attrname \u003d\u003d \"translate\""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "                        and self._has_only_n_positional_args(node, 2)"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "                        and self._is_none(node.args[0])"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "                        and self._is_constant_string_or_name(node.args[1])"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                        # The above statement looking for calls of the form:"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "                        #"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "                        # foo.translate(None, \u0027abc123\u0027)"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "                        #"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "                        # or"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "                        #"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "                        # foo.translate(None, some_variable)"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "                        #"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "                        # This check is somewhat broad and _may_ have some false positives, but"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "                        # after checking several large codebases it did not have any false"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "                        # positives while finding several real issues.  This call pattern seems"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "                        # rare enough that the trade off is worth it."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"deprecated-str-translate-call\","
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "                            node\u003dnode,"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "                            confidence\u003dis_str_confidence,"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.keywords:"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.func.attrname \u003d\u003d \"next\":"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"next-method-called\", node\u003dnode)"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "            elif node.func.attrname in (\"iterkeys\", \"itervalues\", \"iteritems\"):"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"dict-iter-method\", node\u003dnode)"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "            elif node.func.attrname in (\"viewkeys\", \"viewvalues\", \"viewitems\"):"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"dict-view-method\", node\u003dnode)"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(node.func, astroid.Name):"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "            found_node \u003d node.func.lookup(node.func.name)[0]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "            if _is_builtin(found_node):"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "                if node.func.name in (\"filter\", \"map\", \"range\", \"zip\"):"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not _in_iterating_context(node):"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "                        checker \u003d \"{}-builtin-not-iterating\".format(node.func.name)"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(checker, node\u003dnode)"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "                if node.func.name \u003d\u003d \"open\" and node.keywords:"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "                    kwargs \u003d node.keywords"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "                    for kwarg in kwargs or []:"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "                        if kwarg.arg \u003d\u003d \"encoding\":"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "                            self._validate_encoding(kwarg.value, node)"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "                            break"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "    def _validate_encoding(self, encoding, node):"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(encoding, astroid.Const):"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "            value \u003d encoding.value"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "            if value in self._invalid_encodings:"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"invalid-str-codec\", node\u003dnode)"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"indexing-exception\")"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_subscript(self, node):"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" Look for indexing exceptions. \"\"\""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "            for inferred in node.value.infer():"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "                if not isinstance(inferred, astroid.Instance):"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "                if utils.inherit_from_std_ex(inferred):"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"indexing-exception\", node\u003dnode)"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assignattr(self, node):"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.assign_type(), astroid.AugAssign):"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "            self.visit_attribute(node)"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_delattr(self, node):"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "        self.visit_attribute(node)"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"exception-message-attribute\", \"xreadlines-attribute\")"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_attribute(self, node):"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Look for removed attributes\"\"\""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.attrname \u003d\u003d \"xreadlines\":"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"xreadlines-attribute\", node\u003dnode)"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "        exception_message \u003d \"message\""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "            for inferred in _infer_if_relevant_attr("
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "                node, self._deprecated_attrs | {exception_message}"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(inferred, astroid.Instance) and utils.inherit_from_std_ex("
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "                    inferred"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "                    if node.attrname \u003d\u003d exception_message:"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Exceptions with .message clearly defined are an exception"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "                        if exception_message in inferred.instance_attrs:"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "                            continue"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(\"exception-message-attribute\", node\u003dnode)"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(inferred, astroid.Module):"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "                    self._warn_if_deprecated("
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "                        node, inferred.name, {node.attrname}, report_on_modules\u003dFalse"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"unpacking-in-except\", \"comprehension-escape\")"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_excepthandler(self, node):"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Visit an except handler block and check for exception unpacking.\"\"\""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "        def _is_used_in_except_block(node, block):"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "            current \u003d node"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "            while current and current is not block:"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "                current \u003d current.parent"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "            return current is not None"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.name, (astroid.Tuple, astroid.List)):"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"unpacking-in-except\", node\u003dnode)"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "        if not node.name:"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "        # Find any names"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "        scope \u003d node.parent.scope()"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "        scope_names \u003d scope.nodes_of_class(astroid.Name, skip_klass\u003dastroid.FunctionDef)"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        scope_names \u003d list(scope_names)"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "        potential_leaked_names \u003d ["
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "            scope_name"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "            for scope_name in scope_names"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "            if scope_name.name \u003d\u003d node.name.name"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "            and scope_name.lineno \u003e node.lineno"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "            and not _is_used_in_except_block(scope_name, node)"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "        reassignments_for_same_name \u003d {"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "            assign_name.lineno"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "            for assign_name in scope.nodes_of_class("
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.AssignName, skip_klass\u003dastroid.FunctionDef"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "            if assign_name.name \u003d\u003d node.name.name"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "        for leaked_name in potential_leaked_names:"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "            if any("
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "                node.lineno \u003c elem \u003c leaked_name.lineno"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "                for elem in reassignments_for_same_name"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"exception-escape\", node\u003dleaked_name)"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"backtick\")"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_repr(self, node):"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"backtick\", node\u003dnode)"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"raising-string\", \"old-raise-syntax\")"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_raise(self, node):"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Visit a raise statement and check for raising"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "        strings or old-raise-syntax."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore empty raise."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.exc is None:"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "        expr \u003d node.exc"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._check_raise_value(node, expr):"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "            value \u003d next(astroid.unpack_infer(expr))"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_raise_value(node, value)"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_raise_value(self, node, expr):"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(expr, astroid.Const):"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "            value \u003d expr.value"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(value, str):"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"raising-string\", node\u003dnode)"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "class Python3TokenChecker(checkers.BaseTokenChecker):"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d interfaces.ITokenChecker"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"python3\""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "    enabled \u003d False"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1606\": ("
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use of long suffix\","
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "            \"long-suffix\","
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when \"l\" or \"L\" is used to mark a long integer. \u0027"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "            \"This will not work in Python 3, since `int` and `long` \""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "            \"types have merged.\","
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"maxversion\": (3, 0)},"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1607\": ("
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use of the \u003c\u003e operator\","
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "            \"old-ne-operator\","
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027Used when the deprecated \"\u003c\u003e\" operator is used instead \u0027"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027of \"!\u003d\". This is removed in Python 3.\u0027,"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"maxversion\": (3, 0), \"old_names\": [(\"W0331\", \"old-old-ne-operator\")]},"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1608\": ("
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use of old octal literal\","
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "            \"old-octal-literal\","
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when encountering the old octal syntax, \""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "            \"removed in Python 3. To use the new syntax, \""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "            \"prepend 0o on the number.\","
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"maxversion\": (3, 0)},"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1610\": ("
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Non-ascii bytes literals not supported in 3.x\","
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "            \"non-ascii-bytes-literal\","
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when non-ascii bytes literals are found in a program. \""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "            \"They are no longer supported in Python 3.\","
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"maxversion\": (3, 0)},"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "    def process_tokens(self, tokens):"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "        for idx, (tok_type, token, start, _, _) in enumerate(tokens):"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "            if tok_type \u003d\u003d tokenize.NUMBER:"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "                if token.lower().endswith(\"l\"):"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "                    # This has a different semantic than lowercase-l-suffix."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"long-suffix\", line\u003dstart[0])"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "                elif _is_old_octal(token):"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"old-octal-literal\", line\u003dstart[0])"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "            if tokens[idx][1] \u003d\u003d \"\u003c\u003e\":"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"old-ne-operator\", line\u003dtokens[idx][2][0])"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "            if tok_type \u003d\u003d tokenize.STRING and token.startswith(\"b\"):"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "                if any(elem for elem in token if ord(elem) \u003e 127):"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"non-ascii-bytes-literal\", line\u003dstart[0])"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "def register(linter):"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(Python3Checker(linter))"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(Python3TokenChecker(linter))"
      }
    ],
    "authorContributionMap": {
      "Athos Ribeiro": 1,
      "-": 1413,
      "Nick Drozd": 1
    }
  },
  {
    "path": "pylint/checkers/strings.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2009 Charles Hebert \u003ccharles.hebert@logilab.fr\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2010-2014 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2010 Daniel Harding \u003cdharding@gmail.com\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012-2014 Google, Inc."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2013-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Brett Cannon \u003cbrett@python.org\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Rene Zhang \u003crz99@cornell.edu\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016, 2018 Jakub Wilk \u003cjwilk@jwilk.net\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Peter Dawyndt \u003cPeter.Dawyndt@UGent.be\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Ville Skyttä \u003cville.skytta@iki.fi\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Nick Drozd \u003cnicholasdrozd@gmail.com\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Anthony Sottile \u003casottile@umich.edu\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"Checker for string formatting operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import builtins"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "import collections"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "import re"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import tokenize"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "from typing import Counter, Iterable"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.arguments import CallSite"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.node_classes import Const"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers import BaseChecker, BaseTokenChecker, utils"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers.utils import check_messages"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.interfaces import IAstroidChecker, IRawChecker, ITokenChecker"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "_AST_NODE_STR_TYPES \u003d (\"__builtin__.unicode\", \"__builtin__.str\", \"builtins.str\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "# Prefixes for both strings and bytes literals per"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "# https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "_PREFIXES \u003d {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"r\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"u\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"R\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"U\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"f\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"F\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"fr\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"Fr\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"fR\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"FR\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"rf\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"rF\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"Rf\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"RF\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"b\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"B\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"br\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"Br\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"bR\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"BR\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"rb\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"rB\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"Rb\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"RB\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "SINGLE_QUOTED_REGEX \u003d re.compile(\"(%s)?\u0027\u0027\u0027\" % \"|\".join(_PREFIXES))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "DOUBLE_QUOTED_REGEX \u003d re.compile(\u0027(%s)?\"\"\"\u0027 % \"|\".join(_PREFIXES))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "QUOTE_DELIMITER_REGEX \u003d re.compile(\"(%s)?(\\\"|\u0027)\" % \"|\".join(_PREFIXES), re.DOTALL)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "MSGS \u003d {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1300\": ("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unsupported format character %r (%#02x) at index %d\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-format-character\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an unsupported format character is used in a format string.\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1301\": ("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Format string ends in middle of conversion specifier\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \"truncated-format-string\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a format string terminates before the end of a \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \"conversion specifier.\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1302\": ("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Mixing named and unnamed conversion specifiers in format string\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \"mixed-format-string\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a format string contains both named (e.g. \u0027%(foo)d\u0027) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \"and unnamed (e.g. \u0027%d\u0027) conversion specifiers.  This is also \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \"used when a named conversion specifier contains * for the \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minimum field width and/or precision.\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1303\": ("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Expected mapping for format string, not %s\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \"format-needs-mapping\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a format string that uses named conversion specifiers \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \"is used with an argument that is not a mapping.\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1300\": ("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Format string dictionary key should be a string, not %s\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-format-string-key\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a format string that uses named conversion specifiers \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \"is used with a dictionary whose keys are not all strings.\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1301\": ("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unused key %r in format string dictionary\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-format-string-key\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a format string that uses named conversion specifiers \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        \"is used with a dictionary that contains keys not required by the \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        \"format string.\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1304\": ("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Missing key %r in format string dictionary\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        \"missing-format-string-key\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a format string that uses named conversion specifiers \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        \"is used with a dictionary that doesn\u0027t contain all the keys \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        \"required by the format string.\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1305\": ("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Too many arguments for format string\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        \"too-many-format-args\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a format string that uses unnamed conversion \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        \"specifiers is given too many arguments.\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1306\": ("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Not enough arguments for format string\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        \"too-few-format-args\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a format string that uses unnamed conversion \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \"specifiers is given too few arguments\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1307\": ("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Argument %r does not match format type %r\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-string-format-type\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a type required by format string \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \"is not suitable for actual argument type\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1310\": ("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Suspicious argument in %s.%s call\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-str-strip-call\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \"The argument to a str.{l,r,}strip call contains a duplicate character, \","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1302\": ("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Invalid format string\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-format-string\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a PEP 3101 format string is invalid.\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1303\": ("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Missing keyword argument %r for format string\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        \"missing-format-argument-key\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a PEP 3101 format string that uses named fields \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        \"doesn\u0027t receive one or more required keywords.\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1304\": ("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unused format argument %r\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-format-string-argument\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a PEP 3101 format string that uses named \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        \"fields is used with an argument that \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        \"is not required by the format string.\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1305\": ("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Format string contains both automatic field numbering \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        \"and manual field specification\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        \"format-combined-specification\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a PEP 3101 format string contains both automatic \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        \"field numbering (e.g. \u0027{}\u0027) and manual field \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        \"specification (e.g. \u0027{0}\u0027).\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1306\": ("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Missing format attribute %r in format specifier %r\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        \"missing-format-attribute\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a PEP 3101 format string uses an \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        \"attribute specifier ({0.length}), but the argument \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        \"passed for formatting doesn\u0027t have that attribute.\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1307\": ("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Using invalid lookup key %r in format specifier %r\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-format-index\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a PEP 3101 format string uses a lookup specifier \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        \"({a[1]}), but the argument passed for formatting \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        \"doesn\u0027t contain or doesn\u0027t have that key as an attribute.\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1308\": ("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Duplicate string formatting argument %r, consider passing as named argument\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        \"duplicate-string-formatting-argument\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when we detect that a string formatting is \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        \"repeating an argument instead of using named string arguments\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1309\": ("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Using an f-string that does not have any interpolated variables\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        \"f-string-without-interpolation\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when we detect an f-string that does not use any interpolation variables, \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        \"in which case it can be either a normal string or a bug in the code.\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "OTHER_NODES \u003d ("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    astroid.Const,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    astroid.List,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    astroid.Lambda,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    astroid.FunctionDef,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    astroid.ListComp,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    astroid.SetComp,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    astroid.GeneratorExp,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "BUILTINS_STR \u003d builtins.__name__ + \".str\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "BUILTINS_FLOAT \u003d builtins.__name__ + \".float\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "BUILTINS_INT \u003d builtins.__name__ + \".int\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "def get_access_path(key, parts):"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Given a list of format specifiers, returns"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    the final access path (e.g. a.b.c[0][1])."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    path \u003d []"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    for is_attribute, specifier in parts:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_attribute:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            path.append(\".{}\".format(specifier))"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            path.append(\"[{!r}]\".format(specifier))"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    return str(key) + \"\".join(path)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "def arg_matches_format_type(arg_type, format_type):"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    if format_type in \"sr\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        # All types can be printed with %s and %r"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(arg_type, astroid.Instance):"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        arg_type \u003d arg_type.pytype()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if arg_type \u003d\u003d BUILTINS_STR:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return format_type \u003d\u003d \"c\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if arg_type \u003d\u003d BUILTINS_FLOAT:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return format_type in \"deEfFgGn%\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        if arg_type \u003d\u003d BUILTINS_INT:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            # Integers allow all types"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    return True"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "class StringFormatChecker(BaseChecker):"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Checks string formatting operations to ensure that the format string"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    is valid and the arguments match the format string."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d (IAstroidChecker,)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"string\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d MSGS"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    # pylint: disable\u003dtoo-many-branches"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-format-character\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        \"truncated-format-string\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        \"mixed-format-string\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-format-string-key\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        \"missing-format-string-key\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-format-string-key\","
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-string-format-type\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        \"format-needs-mapping\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        \"too-many-format-args\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        \"too-few-format-args\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-string-format-type\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_binop(self, node):"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.op !\u003d \"%\":"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        left \u003d node.left"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        args \u003d node.right"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        if not (isinstance(left, astroid.Const) and isinstance(left.value, str)):"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        format_string \u003d left.value"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                required_keys,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                required_num_args,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                required_key_types,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                required_arg_types,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            ) \u003d utils.parse_format_string(format_string)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        except utils.UnsupportedFormatCharacter as exc:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            formatted \u003d format_string[exc.index]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                \"bad-format-character\","
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                node\u003dnode,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(formatted, ord(formatted), exc.index),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        except utils.IncompleteFormatString:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"truncated-format-string\", node\u003dnode)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        if required_keys and required_num_args:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            # The format string uses both named and unnamed format"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            # specifiers."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"mixed-format-string\", node\u003dnode)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        elif required_keys:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            # The format string uses only named format specifiers."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            # Check that the RHS of the % operator is a mapping object"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            # that contains precisely the set of keys required by the"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            # format string."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(args, astroid.Dict):"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                keys \u003d set()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                unknown_keys \u003d False"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                for k, _ in args.items:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                    if isinstance(k, astroid.Const):"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                        key \u003d k.value"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                        if isinstance(key, str):"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                            keys.add(key)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                        else:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"bad-format-string-key\", node\u003dnode, args\u003dkey"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                        # One of the keys was something other than a"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                        # constant.  Since we can\u0027t tell what it is,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                        # suppress checks for missing keys in the"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                        # dictionary."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                        unknown_keys \u003d True"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                if not unknown_keys:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                    for key in required_keys:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                        if key not in keys:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"missing-format-string-key\", node\u003dnode, args\u003dkey"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                for key in keys:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                    if key not in required_keys:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"unused-format-string-key\", node\u003dnode, args\u003dkey"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                for key, arg in args.items:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not isinstance(key, astroid.Const):"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                    format_type \u003d required_key_types.get(key.value, None)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                    arg_type \u003d utils.safe_infer(arg)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                        format_type is not None"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                        and arg_type not in (None, astroid.Uninferable)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                        and not arg_matches_format_type(arg_type, format_type)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"bad-string-format-type\","
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                            node\u003dnode,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                            args\u003d(arg_type.pytype(), format_type),"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            elif isinstance(args, (OTHER_NODES, astroid.Tuple)):"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                type_name \u003d type(args).__name__"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"format-needs-mapping\", node\u003dnode, args\u003dtype_name)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            # else:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            # The RHS of the format specifier is a name or"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            # expression.  It may be a mapping object, so"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            # there\u0027s nothing we can check."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            # The format string uses only unnamed format specifiers."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            # Check that the number of arguments passed to the RHS of"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            # the % operator matches the number required by the format"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            # string."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            args_elts \u003d ()"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(args, astroid.Tuple):"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                rhs_tuple \u003d utils.safe_infer(args)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                num_args \u003d None"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                if hasattr(rhs_tuple, \"elts\"):"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "                    args_elts \u003d rhs_tuple.elts"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                    num_args \u003d len(args_elts)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            elif isinstance(args, (OTHER_NODES, (astroid.Dict, astroid.DictComp))):"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                args_elts \u003d [args]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                num_args \u003d 1"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                # The RHS of the format specifier is a name or"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                # expression.  It could be a tuple of unknown size, so"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                # there\u0027s nothing we can check."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                num_args \u003d None"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            if num_args is not None:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "                if num_args \u003e required_num_args:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"too-many-format-args\", node\u003dnode)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                elif num_args \u003c required_num_args:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"too-few-format-args\", node\u003dnode)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                for arg, format_type in zip(args_elts, required_arg_types):"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not arg:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                    arg_type \u003d utils.safe_infer(arg)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                    if arg_type not in ("
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                        None,"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                        astroid.Uninferable,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                    ) and not arg_matches_format_type(arg_type, format_type):"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"bad-string-format-type\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                            node\u003dnode,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                            args\u003d(arg_type.pytype(), format_type),"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"f-string-without-interpolation\")"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_joinedstr(self, node):"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.parent, astroid.FormattedValue):"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        for value in node.values:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(value, astroid.FormattedValue):"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"f-string-without-interpolation\", node\u003dnode)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(*MSGS)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_call(self, node):"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        func \u003d utils.safe_infer(node.func)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(func, astroid.BoundMethod)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(func.bound, astroid.Instance)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            and func.bound.name in (\"str\", \"unicode\", \"bytes\")"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            if func.name in (\"strip\", \"lstrip\", \"rstrip\") and node.args:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                arg \u003d utils.safe_infer(node.args[0])"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                if not isinstance(arg, astroid.Const) or not isinstance(arg.value, str):"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                if len(arg.value) !\u003d len(set(arg.value)):"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"bad-str-strip-call\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "                        node\u003dnode,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                        args\u003d(func.bound.name, func.name),"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            elif func.name \u003d\u003d \"format\":"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_new_format(node, func)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    def _detect_vacuous_formatting(self, node, positional_arguments):"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        counter \u003d collections.Counter("
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "            arg.name for arg in positional_arguments if isinstance(arg, astroid.Name)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, count in counter.items():"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "            if count \u003d\u003d 1:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "                \"duplicate-string-formatting-argument\", node\u003dnode, args\u003d(name,)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_new_format(self, node, func):"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check the new string formatting. \"\"\""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        # Skip ormat nodes which don\u0027t have an explicit string on the"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        # left side of the format operation."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        # We do this because our inference engine can\u0027t properly handle"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        # redefinitions of the original string."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        # Note that there may not be any left side at all, if the format method"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        # has been assigned to another variable. See issue 351. For example:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        #"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        #    fmt \u003d \u0027some string {}\u0027.format"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        #    fmt(\u0027arg\u0027)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.func, astroid.Attribute) and not isinstance("
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            node.func.expr, astroid.Const"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.starargs or node.kwargs:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            strnode \u003d next(func.bound.infer())"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        if not (isinstance(strnode, astroid.Const) and isinstance(strnode.value, str)):"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            call_site \u003d CallSite.from_call(node)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "            fields, num_args, manual_pos \u003d utils.parse_format_method_string("
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                strnode.value"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        except utils.IncompleteFormatString:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"bad-format-string\", node\u003dnode)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        positional_arguments \u003d call_site.positional_arguments"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        named_arguments \u003d call_site.keyword_arguments"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        named_fields \u003d {field[0] for field in fields if isinstance(field[0], str)}"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        if num_args and manual_pos:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"format-combined-specification\", node\u003dnode)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        check_args \u003d False"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        # Consider \"{[0]} {[1]}\" as num_args."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        num_args +\u003d sum(1 for field in named_fields if field \u003d\u003d \"\")"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        if named_fields:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "            for field in named_fields:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "                if field and field not in named_arguments:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"missing-format-argument-key\", node\u003dnode, args\u003d(field,)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            for field in named_arguments:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "                if field not in named_fields:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"unused-format-string-argument\", node\u003dnode, args\u003d(field,)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "            # num_args can be 0 if manual_pos is not."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "            num_args \u003d num_args or manual_pos"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "            if positional_arguments or num_args:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "                empty \u003d any(True for field in named_fields if field \u003d\u003d \"\")"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "                if named_arguments or empty:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Verify the required number of positional arguments"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "                    # only if the .format got at least one keyword argument."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "                    # This means that the format strings accepts both"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "                    # positional and named fields and we should warn"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "                    # when one of the them is missing or is extra."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "                    check_args \u003d True"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            check_args \u003d True"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        if check_args:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "            # num_args can be 0 if manual_pos is not."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            num_args \u003d num_args or manual_pos"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(positional_arguments) \u003e num_args:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"too-many-format-args\", node\u003dnode)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "            elif len(positional_arguments) \u003c num_args:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"too-few-format-args\", node\u003dnode)"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        self._detect_vacuous_formatting(node, positional_arguments)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_new_format_specifiers(node, fields, named_arguments)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_new_format_specifiers(self, node, fields, named):"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        Check attribute and index access in the format"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        string (\"{0.a}\" and \"{0[a]}\")."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        for key, specifiers in fields:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            # Obtain the argument. If it can\u0027t be obtained"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "            # or inferred, skip this check."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            if key \u003d\u003d \"\":"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "                # {[0]} will have an unnamed argument, defaulting"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "                # to 0. It will not be present in `named`, so use the value"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "                # 0 for it."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "                key \u003d 0"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(key, numbers.Number):"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "                    argname \u003d utils.get_argument_from_call(node, key)"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "                except utils.NoSuchArgumentError:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "                if key not in named:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "                argname \u003d named[key]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "            if argname in (astroid.Uninferable, None):"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "                argument \u003d utils.safe_infer(argname)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.InferenceError:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "            if not specifiers or not argument:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "                # No need to check this key if it doesn\u0027t"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "                # use attribute / item access"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "            if argument.parent and isinstance(argument.parent, astroid.Arguments):"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "                # Ignore any object coming from an argument,"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "                # because we can\u0027t infer its value properly."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "            previous \u003d argument"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "            parsed \u003d []"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "            for is_attribute, specifier in specifiers:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "                if previous is astroid.Uninferable:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "                parsed.append((is_attribute, specifier))"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "                if is_attribute:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "                    try:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "                        previous \u003d previous.getattr(specifier)[0]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "                    except astroid.NotFoundError:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "                        if ("
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "                            hasattr(previous, \"has_dynamic_getattr\")"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "                            and previous.has_dynamic_getattr()"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "                        ):"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "                            # Don\u0027t warn if the object has a custom __getattr__"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "                            break"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "                        path \u003d get_access_path(key, parsed)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"missing-format-attribute\","
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "                            args\u003d(specifier, path),"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "                            node\u003dnode,"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "                        break"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "                    warn_error \u003d False"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "                    if hasattr(previous, \"getitem\"):"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "                        try:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "                            previous \u003d previous.getitem(astroid.Const(specifier))"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "                        except ("
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "                            astroid.AstroidIndexError,"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "                            astroid.AstroidTypeError,"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "                            astroid.AttributeInferenceError,"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "                        ):"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "                            warn_error \u003d True"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "                        except astroid.InferenceError:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "                            break"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "                        if previous is astroid.Uninferable:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "                            break"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "                        try:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "                            # Lookup __getitem__ in the current node,"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "                            # but skip further checks, because we can\u0027t"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "                            # retrieve the looked object"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "                            previous.getattr(\"__getitem__\")"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "                            break"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "                        except astroid.NotFoundError:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "                            warn_error \u003d True"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "                    if warn_error:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "                        path \u003d get_access_path(key, parsed)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"invalid-format-index\", args\u003d(specifier, path), node\u003dnode"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "                        break"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "                    previous \u003d next(previous.infer())"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "                except astroid.InferenceError:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "                    # can\u0027t check further if we can\u0027t infer it"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "class StringConstantChecker(BaseTokenChecker):"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Check string literals\"\"\""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d (IAstroidChecker, ITokenChecker, IRawChecker)"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"string\""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1401\": ("
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Anomalous backslash in string: \u0027%s\u0027. \""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            \"String constant might be missing an r prefix.\","
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "            \"anomalous-backslash-in-string\","
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a backslash is in a literal string but not as an escape.\","
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1402\": ("
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Anomalous Unicode escape in byte string: \u0027%s\u0027. \""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            \"String constant might be missing an r or u prefix.\","
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "            \"anomalous-unicode-escape-in-string\","
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when an escape like \\\\u is encountered in a byte \""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "            \"string where it has no effect.\","
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        \"W1404\": ("
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Implicit string concatenation found in %s\","
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "            \"implicit-str-concat\","
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "            \"String literals are implicitly concatenated in a \""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "            \"literal iterable definition : \""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "            \"maybe a comma is missing ?\","
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            {\"old_names\": [(\"W1403\", \"implicit-str-concat-in-sequence\")]},"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        \"W1405\": ("
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            \"Quote delimiter %s is inconsistent with the rest of the file\","
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            \"inconsistent-quotes\","
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            \"Quote delimiters are not used consistently throughout a module \""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            \"(with allowances made for avoiding unnecessary escaping).\","
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ("
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "            \"check-str-concat-over-line-jumps\","
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": False,"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"This flag controls whether the \""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "                \"implicit-str-concat should generate a warning \""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "                \"on implicit string concatenation in sequences defined over \""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "                \"several lines.\","
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        ("
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            \"check-quote-consistency\","
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                \"default\": False,"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                \"help\": \"This flag controls whether inconsistent-quotes generates a \""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                \"warning when the character used as a quote delimiter is used \""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                \"inconsistently within a module.\","
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            },"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "    # Characters that have a special meaning after a backslash in either"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    # Unicode or byte strings."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "    ESCAPE_CHARACTERS \u003d \"abfnrtvx\\n\\r\\t\\\\\u0027\\\"01234567\""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "    # Characters that have a special meaning after a backslash but only in"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "    # Unicode strings."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "    UNICODE_ESCAPE_CHARACTERS \u003d \"uUN\""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, *args, **kwargs):"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "        super(StringConstantChecker, self).__init__(*args, **kwargs)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "        self.string_tokens \u003d {}  # token position -\u003e (token value, next token)"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "    def process_module(self, module):"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "        self._unicode_literals \u003d \"unicode_literals\" in module.future_imports"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "    def process_tokens(self, tokens):"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        encoding \u003d \"ascii\""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "        for i, (tok_type, token, start, _, line) in enumerate(tokens):"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "            if tok_type \u003d\u003d tokenize.ENCODING:"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "                # this is always the first token processed"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "                encoding \u003d token"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "            elif tok_type \u003d\u003d tokenize.STRING:"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "                # \u0027token\u0027 is the whole un-parsed token; we can look at the start"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "                # of it to see whether it\u0027s a raw or unicode string etc."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "                self.process_string_token(token, start[0])"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "                # We figure the next token, ignoring comments \u0026 newlines:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                j \u003d i + 1"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "                while j \u003c len(tokens) and tokens[j].type in ("
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "                    tokenize.NEWLINE,"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                    tokenize.NL,"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                    tokenize.COMMENT,"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "                    j +\u003d 1"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "                next_token \u003d tokens[j] if j \u003c len(tokens) else None"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "                if encoding !\u003d \"ascii\":"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "                    # We convert `tokenize` character count into a byte count,"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "                    # to match with astroid `.col_offset`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "                    start \u003d (start[0], len(line[: start[1]].encode(encoding)))"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "                self.string_tokens[start] \u003d (str_eval(token), next_token)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        if self.config.check_quote_consistency:"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            self.check_for_consistent_string_delimiters(tokens)"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"implicit-str-concat\")"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_list(self, node):"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        self.check_for_concatenated_strings(node.elts, \"list\")"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"implicit-str-concat\")"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_set(self, node):"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        self.check_for_concatenated_strings(node.elts, \"set\")"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"implicit-str-concat\")"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_tuple(self, node):"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        self.check_for_concatenated_strings(node.elts, \"tuple\")"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assign(self, node):"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.value, astroid.Const) and isinstance(node.value.value, str):"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "            self.check_for_concatenated_strings([node.value], \"assignment\")"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    def check_for_consistent_string_delimiters("
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        self, tokens: Iterable[tokenize.TokenInfo]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    ) -\u003e None:"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        \"\"\"Adds a message for each string using inconsistent quote delimiters."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        Quote delimiters are used inconsistently if \" and \u0027 are mixed in a module\u0027s"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        shortstrings without having done so to avoid escaping an internal quote"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        character."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        Args:"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "          tokens: The tokens to be checked against for consistent usage."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        string_delimiters \u003d collections.Counter()  # type: Counter[str]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        # First, figure out which quote character predominates in the module"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        for tok_type, token, _, _, _ in tokens:"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            if tok_type \u003d\u003d tokenize.STRING and _is_quote_delimiter_chosen_freely(token):"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                string_delimiters[_get_quote_delimiter(token)] +\u003d 1"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        if len(string_delimiters) \u003e 1:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            # Ties are broken arbitrarily"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            most_common_delimiter \u003d string_delimiters.most_common(1)[0][0]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "            for tok_type, token, start, _, _ in tokens:"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                if tok_type !\u003d tokenize.STRING:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                quote_delimiter \u003d _get_quote_delimiter(token)"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                    _is_quote_delimiter_chosen_freely(token)"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                    and quote_delimiter !\u003d most_common_delimiter"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                        \"inconsistent-quotes\", line\u003dstart[0], args\u003d(quote_delimiter,)"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "    def check_for_concatenated_strings(self, elements, iterable_type):"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "        for elt in elements:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "            if not (isinstance(elt, Const) and elt.pytype() in _AST_NODE_STR_TYPES):"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "            if elt.col_offset \u003c 0:"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "                # This can happen in case of escaped newlines"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "            if (elt.lineno, elt.col_offset) not in self.string_tokens:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "                # This may happen with Latin1 encoding"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                # cf. https://github.com/PyCQA/pylint/issues/2610"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "            matching_token, next_token \u003d self.string_tokens["
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "                (elt.lineno, elt.col_offset)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "            # We detect string concatenation: the AST Const is the"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "            # combination of 2 string tokens"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "            if matching_token !\u003d elt.value and next_token is not None:"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "                if next_token.type \u003d\u003d tokenize.STRING and ("
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "                    next_token.start[0] \u003d\u003d elt.lineno"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "                    or self.config.check_str_concat_over_line_jumps"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"implicit-str-concat\", line\u003delt.lineno, args\u003d(iterable_type,)"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "    def process_string_token(self, token, start_row):"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        quote_char \u003d None"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d None"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        for index, char in enumerate(token):"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "            if char in \"\u0027\\\"\":"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "                quote_char \u003d char"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        if quote_char is None:"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "        prefix \u003d token[:index].lower()  # markers like u, b, r."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "        after_prefix \u003d token[index:]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "        if after_prefix[:3] \u003d\u003d after_prefix[-3:] \u003d\u003d 3 * quote_char:"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "            string_body \u003d after_prefix[3:-3]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "            string_body \u003d after_prefix[1:-1]  # Chop off quotes"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "        # No special checks on raw strings at the moment."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        if \"r\" not in prefix:"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "            self.process_non_raw_string_token(prefix, string_body, start_row)"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "    def process_non_raw_string_token(self, prefix, string_body, start_row):"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check for bad escapes in a non-raw string."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "        prefix: lowercase string of eg \u0027ur\u0027 string prefix markers."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        string_body: the un-parsed body of the string, not including the quote"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        marks."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        start_row: integer line number in the source."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "        # Walk through the string; if we see a backslash then escape the next"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        # character, and skip over it.  If we see a non-escaped character,"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "        # alert, and continue."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "        #"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "        # Accept a backslash when it escapes a backslash, or a quote, or"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "        # end-of-line, or one of the letters that introduce a special escape"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "        # sequence \u003chttp://docs.python.org/reference/lexical_analysis.html\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        #"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d 0"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "        while True:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d string_body.find(\"\\\\\", index)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "            if index \u003d\u003d -1:"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "            # There must be a next character; having a backslash at the end"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "            # of the string would be a SyntaxError."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "            next_char \u003d string_body[index + 1]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "            match \u003d string_body[index : index + 2]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "            if next_char in self.UNICODE_ESCAPE_CHARACTERS:"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "                if \"u\" in prefix:"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "                elif \"b\" not in prefix:"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass  # unicode by default"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"anomalous-unicode-escape-in-string\","
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "                        line\u003dstart_row,"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "                        args\u003d(match,),"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "                        col_offset\u003dindex,"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "            elif next_char not in self.ESCAPE_CHARACTERS:"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"anomalous-backslash-in-string\","
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "                    line\u003dstart_row,"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "                    args\u003d(match,),"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                    col_offset\u003dindex,"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "            # Whether it was a valid escape or not, backslash followed by"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "            # another character can always be consumed whole: the second"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "            # character can never be the start of a new backslash escape."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "            index +\u003d 2"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "def register(linter):"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"required method to auto register this checker \"\"\""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(StringFormatChecker(linter))"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(StringConstantChecker(linter))"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "def str_eval(token):"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "    Mostly replicate `ast.literal_eval(token)` manually to avoid any performance hit."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "    This supports f-strings, contrary to `ast.literal_eval`."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "    We have to support all string literal notations:"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "    https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "    if token[0:2].lower() in (\"fr\", \"rf\"):"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "        token \u003d token[2:]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "    elif token[0].lower() in (\"r\", \"u\", \"f\"):"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "        token \u003d token[1:]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "    if token[0:3] in (\u0027\"\"\"\u0027, \"\u0027\u0027\u0027\"):"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "        return token[3:-3]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "    return token[1:-1]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "def _is_long_string(string_token: str) -\u003e bool:"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"\"\"Is this string token a \"longstring\" (is it triple-quoted)?"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    Long strings are triple-quoted as defined in"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    This function only checks characters up through the open quotes.  Because it\u0027s meant"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    to be applied only to tokens that represent string literals, it doesn\u0027t bother to"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    check for close-quotes (demonstrating that the literal is a well-formed string)."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    Args:"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        string_token: The string token to be parsed."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    Returns:"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        A boolean representing whether or not this token matches a longstring"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        regex."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    return bool("
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        SINGLE_QUOTED_REGEX.match(string_token)"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        or DOUBLE_QUOTED_REGEX.match(string_token)"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    )"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "def _get_quote_delimiter(string_token: str) -\u003e str:"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"\"\"Returns the quote character used to delimit this token string."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    This function does little checking for whether the token is a well-formed"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    string."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    Args:"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        string_token: The token to be parsed."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    Returns:"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        A string containing solely the first quote delimiter character in the passed"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        string."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    Raises:"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "      ValueError: No quote delimiter characters are present."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    match \u003d QUOTE_DELIMITER_REGEX.match(string_token)"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    if not match:"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        raise ValueError(\"string token %s is not a well-formed string\" % string_token)"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    return match.group(2)"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "def _is_quote_delimiter_chosen_freely(string_token: str) -\u003e bool:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"\"\"Was there a non-awkward option for the quote delimiter?"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    Args:"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        string_token: The quoted string whose delimiters are to be checked."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    Returns:"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        Whether there was a choice in this token\u0027s quote character that would"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        not have involved backslash-escaping an interior quote character.  Long"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        strings are excepted from this analysis under the assumption that their"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        quote characters are set by policy."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    quote_delimiter \u003d _get_quote_delimiter(string_token)"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    unchosen_delimiter \u003d \u0027\"\u0027 if quote_delimiter \u003d\u003d \"\u0027\" else \"\u0027\""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    return bool("
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        quote_delimiter"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        and not _is_long_string(string_token)"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "        and unchosen_delimiter not in str_eval(string_token)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    )"
      }
    ],
    "authorContributionMap": {
      "Claudiu Popa": 6,
      "-": 787,
      "Wes Turner": 149
    }
  },
  {
    "path": "pylint/checkers/typecheck.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2006-2014 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2009 James Lingard \u003cjchl@aristanetworks.com\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012-2014 Google, Inc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 David Shea \u003cdshea@redhat.com\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Steven Myint \u003chg@stevenmyint.com\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Holger Peters \u003cemail@holger-peters.de\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Anentropic \u003cego@anentropic.com\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Dmitry Pribysh \u003cdmand@yandex.ru\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Rene Zhang \u003crz99@cornell.edu\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Radu Ciorba \u003cradu@devrandom.ro\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Alexander Todorov \u003catodorov@otb.bg\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Ashley Whetter \u003cashley@awhetter.co.uk\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Jürgen Hermann \u003cjh@web.de\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Jakub Wilk \u003cjwilk@jwilk.net\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Filipe Brandenburger \u003cfilbranden@google.com\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017-2018 hippo91 \u003cguillaume.peillex@gmail.com\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Derek Gustafson \u003cdegustaf@gmail.com\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Ville Skyttä \u003cville.skytta@iki.fi\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Nick Drozd \u003cnicholasdrozd@gmail.com\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Mike Frysinger \u003cvapier@gmail.com\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ben Green \u003cbenhgreen@icloud.com\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Konstantin \u003cGithub@pheanex.de\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Justin Li \u003cjustinnhli@users.noreply.github.com\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Bryce Guinta \u003cbryce.paul.guinta@gmail.com\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "# Copyright (c) 2019 Andy Palmer \u003ccontactninezerozeronine@gmail.com\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"try to find more bugs in the code using astroid inference capabilities"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import builtins"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import fnmatch"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import heapq"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import itertools"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import operator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import re"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import shlex"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import sys"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import types"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "from collections import deque"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "from collections.abc import Sequence"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "from functools import singledispatch"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid.arguments"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid.context"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid.nodes"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid import bases, decorators, exceptions, modutils, objects"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.interpreter import dunder_lookup"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers import BaseChecker, utils"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers.utils import ("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    check_messages,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    decorated_with,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    decorated_with_property,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    has_known_bases,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    is_builtin_object,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    is_comprehension,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    is_inside_abstract_class,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    is_iterable,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    is_mapping,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    is_overload_stub,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    is_super,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    node_ignores_exception,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    safe_infer,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    supports_delitem,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    supports_getitem,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    supports_membership_test,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    supports_setitem,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.interfaces import INFERENCE, IAstroidChecker"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.utils import get_global_option"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "BUILTINS \u003d builtins.__name__"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "STR_FORMAT \u003d {\"%s.str.format\" % BUILTINS}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ASYNCIO_COROUTINE \u003d \"asyncio.coroutines.coroutine\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "def _unflatten(iterable):"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    for index, elem in enumerate(iterable):"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(elem, Sequence) and not isinstance(elem, str):"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            for single_elem in _unflatten(elem):"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                yield single_elem"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        elif elem and not index:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            # We\u0027re interested only in the first element."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            yield elem"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "def _flatten_container(iterable):"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    # Flatten nested containers into a single iterable"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    for item in iterable:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(item, (list, tuple, types.GeneratorType)):"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            yield from _flatten_container(item)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            yield item"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_owner_ignored(owner, attrname, ignored_classes, ignored_modules):"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Check if the given owner should be ignored"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    This will verify if the owner\u0027s module is in *ignored_modules*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    or the owner\u0027s module fully qualified name is in *ignored_modules*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    or if the *ignored_modules* contains a pattern which catches"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    the fully qualified name of the module."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    Also, similar checks are done for the owner itself, if its name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    matches any name from the *ignored_classes* or if its qualified"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    name can be found in *ignored_classes*."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    ignored_modules \u003d set(ignored_modules)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    module_name \u003d owner.root().name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    module_qname \u003d owner.root().qname()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    for ignore in ignored_modules:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        # Try to match the module name / fully qualified name directly"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if module_qname in ignored_modules or module_name in ignored_modules:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        # Try to see if the ignores pattern match against the module name."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if fnmatch.fnmatch(module_qname, ignore):"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        # Otherwise we might have a root module name being ignored,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        # and the qualified owner has more levels of depth."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        parts \u003d deque(module_name.split(\".\"))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        current_module \u003d \"\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        while parts:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            part \u003d parts.popleft()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            if not current_module:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                current_module \u003d part"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                current_module +\u003d \".{}\".format(part)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            if current_module in ignored_modules:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    # Match against ignored classes."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ignored_classes \u003d set(ignored_classes)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    if hasattr(owner, \"qname\"):"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        qname \u003d owner.qname()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        qname \u003d \"\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    return any(ignore in (attrname, qname) for ignore in ignored_classes)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "@singledispatch"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "def _node_names(node):"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    if not hasattr(node, \"locals\"):"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return []"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    return node.locals.keys()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "@_node_names.register(astroid.ClassDef)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "@_node_names.register(astroid.Instance)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "def _(node):"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    values \u003d itertools.chain(node.instance_attrs.keys(), node.locals.keys())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        mro \u003d node.mro()[1:]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    except (NotImplementedError, TypeError):"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        mro \u003d node.ancestors()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    other_values \u003d [value for cls in mro for value in _node_names(cls)]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    return itertools.chain(values, other_values)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "def _string_distance(seq1, seq2):"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    seq2_length \u003d len(seq2)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    row \u003d list(range(1, seq2_length + 1)) + [0]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    for seq1_index, seq1_char in enumerate(seq1):"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        last_row \u003d row"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        row \u003d [0] * seq2_length + [seq1_index + 1]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        for seq2_index, seq2_char in enumerate(seq2):"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            row[seq2_index] \u003d min("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                last_row[seq2_index] + 1,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                row[seq2_index - 1] + 1,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                last_row[seq2_index - 1] + (seq1_char !\u003d seq2_char),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return row[seq2_length - 1]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "def _similar_names(owner, attrname, distance_threshold, max_choices):"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Given an owner and a name, try to find similar names"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    The similar names are searched given a distance metric and only"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    a given number of choices will be returned."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    possible_names \u003d []"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    names \u003d _node_names(owner)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    for name in names:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if name \u003d\u003d attrname:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        distance \u003d _string_distance(attrname, name)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if distance \u003c\u003d distance_threshold:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            possible_names.append((name, distance))"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    # Now get back the values with a minimum, up to the given"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    # limit or choices."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    picked \u003d ["
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        name"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        for (name, _) in heapq.nsmallest("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            max_choices, possible_names, key\u003doperator.itemgetter(1)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    return sorted(picked)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "def _missing_member_hint(owner, attrname, distance_threshold, max_choices):"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    names \u003d _similar_names(owner, attrname, distance_threshold, max_choices)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    if not names:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        # No similar name."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    names \u003d list(map(repr, names))"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    if len(names) \u003d\u003d 1:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        names \u003d \", \".join(names)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        names \u003d \"one of {} or {}\".format(\", \".join(names[:-1]), names[-1])"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"; maybe {}?\".format(names)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "MSGS \u003d {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1101\": ("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%s %r has no %r member%s\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-member\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a variable is accessed for an unexistent member.\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        {\"old_names\": [(\"E1103\", \"maybe-no-member\")]},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    \"I1101\": ("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%s %r has no %r member%s, but source is unavailable. Consider \""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        \"adding this module to extension-pkg-whitelist if you want \""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        \"to perform analysis based on run-time introspection of living objects.\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        \"c-extension-no-member\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a variable is accessed for non-existent member of C \""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        \"extension. Due to unavailability of source static analysis is impossible, \""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        \"but it may be performed by introspecting living objects in run-time.\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1102\": ("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%s is not callable\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        \"not-callable\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an object being called has been inferred to a non \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        \"callable object.\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1111\": ("
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Assigning result of a function call, where the function has no return\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        \"assignment-from-no-return\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an assignment is done on a function call but the \""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        \"inferred function doesn\u0027t return anything.\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1120\": ("
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        \"No value for argument %s in %s call\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-value-for-parameter\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a function call passes too few arguments.\","
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1121\": ("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Too many positional arguments for %s call\","
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        \"too-many-function-args\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a function call passes too many positional arguments.\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1123\": ("
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unexpected keyword argument %r in %s call\","
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unexpected-keyword-arg\","
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a function call passes a keyword argument that \""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        \"doesn\u0027t correspond to one of the function\u0027s parameter names.\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1124\": ("
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Argument %r passed by position and keyword in %s call\","
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        \"redundant-keyword-arg\","
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a function call would result in assigning multiple \""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        \"values to a function parameter, one value from a positional \""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        \"argument and one from a keyword argument.\","
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1125\": ("
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Missing mandatory keyword argument %r in %s call\","
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        \"missing-kwoa\","
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a function call does not pass a mandatory\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            \" keyword-only argument.\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1126\": ("
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Sequence index is not an int, slice, or instance with __index__\","
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-sequence-index\","
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a sequence type is indexed with an invalid type. \""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Valid types are ints, slices, and objects with an __index__ \""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        \"method.\","
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1127\": ("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Slice index is not an int, None, or instance with __index__\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-slice-index\","
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a slice index is not an integer, None, or an object \""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        \"with an __index__ method.\","
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1128\": ("
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Assigning result of a function call, where the function returns None\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        \"assignment-from-none\","
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an assignment is done on a function call but the \""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        \"inferred function returns nothing but None.\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        {\"old_names\": [(\"W1111\", \"old-assignment-from-none\")]},"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1129\": ("
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Context manager \u0027%s\u0027 doesn\u0027t implement __enter__ and __exit__.\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        \"not-context-manager\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an instance in a with statement doesn\u0027t implement \""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        \"the context manager protocol(__enter__/__exit__).\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1130\": ("
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%s\","
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-unary-operand-type\","
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when a unary operand is used on an object which does not \""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        \"support this type of operation.\","
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1131\": ("
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%s\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unsupported-binary-operation\","
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when a binary arithmetic operation between two \""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        \"operands is not supported.\","
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1132\": ("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Got multiple values for keyword argument %r in function call\","
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        \"repeated-keyword\","
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when a function call got multiple values for a keyword.\","
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1135\": ("
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Value \u0027%s\u0027 doesn\u0027t support membership test\","
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unsupported-membership-test\","
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when an instance in membership test expression doesn\u0027t \""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        \"implement membership protocol (__contains__/__iter__/__getitem__).\","
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1136\": ("
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Value \u0027%s\u0027 is unsubscriptable\","
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unsubscriptable-object\","
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when a subscripted value doesn\u0027t support subscription \""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        \"(i.e. doesn\u0027t define __getitem__ method or __class_getitem__ for a class).\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1137\": ("
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%r does not support item assignment\","
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unsupported-assignment-operation\","
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when an object does not support item assignment \""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        \"(i.e. doesn\u0027t define __setitem__ method).\","
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1138\": ("
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%r does not support item deletion\","
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unsupported-delete-operation\","
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when an object does not support item deletion \""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        \"(i.e. doesn\u0027t define __delitem__ method).\","
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1139\": ("
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Invalid metaclass %r used\","
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-metaclass\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted whenever we can detect that a class is using, \""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        \"as a metaclass, something which might be invalid for using as \""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        \"a metaclass.\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1140\": ("
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Dict key is unhashable\","
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unhashable-dict-key\","
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when a dict key is not hashable \""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        \"(i.e. doesn\u0027t define __hash__ method).\","
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E1141\": ("
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unpacking a dictionary in iteration without calling .items()\","
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        \"dict-iter-missing-items\","
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted when trying to iterate through a dict without calling .items()\","
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1113\": ("
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Keyword argument before variable positional arguments list \""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        \"in the definition of %s function\","
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        \"keyword-arg-before-vararg\","
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        \"When defining a keyword argument before variable positional arguments, one can \""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        \"end up in having multiple values passed for the aforementioned parameter in \""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        \"case the method is called with keyword arguments.\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W1114\": ("
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Positional arguments appear to be out of order\","
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        \"arguments-out-of-order\","
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Emitted  when the caller\u0027s argument names fully match the parameter \""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        \"names in the function signature but do not have the same order.\","
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    \"W1115\": ("
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"Non-string value assigned to __name__\","
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"non-str-assignment-to-dunder-name\","
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"Emitted when a non-string vaue is assigned to __name__\","
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "# builtin sequence types in Python 2 and 3."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "SEQUENCE_TYPES \u003d {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    \"str\","
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    \"unicode\","
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    \"list\","
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tuple\","
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    \"bytearray\","
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    \"xrange\","
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    \"range\","
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    \"bytes\","
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    \"memoryview\","
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "def _emit_no_member(node, owner, owner_name, ignored_mixins\u003dTrue, ignored_none\u003dTrue):"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Try to see if no-member should be emitted for the given owner."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    The following cases are ignored:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        * the owner is a function and it has decorators."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        * the owner is an instance and it has __getattr__, __getattribute__ implemented"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        * the module is explicitly ignored from no-member checks"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        * the owner is a class and the name can be found in its metaclass."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        * The access node is protected by an except handler, which handles"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "          AttributeError, Exception or bare except."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    # pylint: disable\u003dtoo-many-return-statements"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    if node_ignores_exception(node, AttributeError):"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    if ignored_none and isinstance(owner, astroid.Const) and owner.value is None:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    if is_super(owner) or getattr(owner, \"type\", None) \u003d\u003d \"metaclass\":"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    if owner_name and ignored_mixins and owner_name[-5:].lower() \u003d\u003d \"mixin\":"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(owner, astroid.FunctionDef) and owner.decorators:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(owner, (astroid.Instance, astroid.ClassDef)):"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        if owner.has_dynamic_getattr():"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            # Issue #2565: Don\u0027t ignore enums, as they have a `__getattr__` but it\u0027s not"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "            # invoked at this point."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "                metaclass \u003d owner.metaclass()"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            except exceptions.MroError:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "                return False"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            if metaclass:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "                return metaclass.qname() \u003d\u003d \"enum.EnumMeta\""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        if not has_known_bases(owner):"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        # Exclude typed annotations, since these might actually exist"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        # at some point during the runtime of the program."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        attribute \u003d owner.locals.get(node.attrname, [None])[0]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            attribute"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(attribute, astroid.AssignName)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(attribute.parent, astroid.AnnAssign)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(owner, objects.Super):"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        # Verify if we are dealing with an invalid Super object."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        # If it is invalid, then there\u0027s no point in checking that"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        # it has the required attribute. Also, don\u0027t fail if the"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        # MRO is invalid."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            owner.super_mro()"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        except (exceptions.MroError, exceptions.SuperError):"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        if not all(map(has_known_bases, owner.type.mro())):"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(owner, astroid.Module):"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "            owner.getattr(\"__getattr__\")"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.NotFoundError:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    if owner_name and node.attrname.startswith(\"_\" + owner_name):"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        # Test if an attribute has been mangled (\u0027private\u0027 attribute)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        unmangled_name \u003d node.attrname.split(\"_\" + owner_name)[-1]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            if owner.getattr(unmangled_name, context\u003dNone) is not None:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "                return False"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.NotFoundError:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    return True"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "def _determine_callable(callable_obj):"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    # Ordering is important, since BoundMethod is a subclass of UnboundMethod,"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    # and Function inherits Lambda."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    parameters \u003d 0"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    if hasattr(callable_obj, \"implicit_parameters\"):"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        parameters \u003d callable_obj.implicit_parameters()"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(callable_obj, astroid.BoundMethod):"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        # Bound methods have an extra implicit \u0027self\u0027 argument."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        return callable_obj, parameters, callable_obj.type"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(callable_obj, astroid.UnboundMethod):"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        return callable_obj, parameters, \"unbound method\""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(callable_obj, astroid.FunctionDef):"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        return callable_obj, parameters, callable_obj.type"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(callable_obj, astroid.Lambda):"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        return callable_obj, parameters, \"lambda\""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(callable_obj, astroid.ClassDef):"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        # Class instantiation, lookup __new__ instead."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        # If we only find object.__new__, we can safely check __init__"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        # instead. If __new__ belongs to builtins, then we look"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        # again for __init__ in the locals, since we won\u0027t have"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        # argument information for the builtin __new__ function."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            # Use the last definition of __new__."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "            new \u003d callable_obj.local_attr(\"__new__\")[-1]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        except exceptions.NotFoundError:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "            new \u003d None"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        from_object \u003d new and new.parent.scope().name \u003d\u003d \"object\""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        from_builtins \u003d new and new.root().name in sys.builtin_module_names"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "        if not new or from_object or from_builtins:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "                # Use the last definition of __init__."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "                callable_obj \u003d callable_obj.local_attr(\"__init__\")[-1]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "            except exceptions.NotFoundError:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "                # do nothing, covered by no-init."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "                raise ValueError"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "            callable_obj \u003d new"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(callable_obj, astroid.FunctionDef):"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "            raise ValueError"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        # both have an extra implicit \u0027cls\u0027/\u0027self\u0027 argument."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        return callable_obj, parameters, \"constructor\""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    raise ValueError"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "def _has_parent_of_type(node, node_type, statement):"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Check if the given node has a parent of the given type.\"\"\""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "    parent \u003d node.parent"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "    while not isinstance(parent, node_type) and statement.parent_of(parent):"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        parent \u003d parent.parent"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    return isinstance(parent, node_type)"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "def _no_context_variadic_keywords(node, scope):"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "    statement \u003d node.statement()"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    variadics \u003d ()"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(scope, astroid.Lambda) and not isinstance(scope, astroid.FunctionDef):"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        variadics \u003d list(node.keywords or []) + node.kwargs"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "    elif isinstance(statement, (astroid.Return, astroid.Expr)) and isinstance("
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        statement.value, astroid.Call"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "    ):"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        call \u003d statement.value"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        variadics \u003d list(call.keywords or []) + call.kwargs"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "    return _no_context_variadic(node, scope.args.kwarg, astroid.Keyword, variadics)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "def _no_context_variadic_positional(node, scope):"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    variadics \u003d ()"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(scope, astroid.Lambda) and not isinstance(scope, astroid.FunctionDef):"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        variadics \u003d node.starargs + node.kwargs"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        statement \u003d node.statement()"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(statement, (astroid.Expr, astroid.Return)) and isinstance("
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "            statement.value, astroid.Call"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "            call \u003d statement.value"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            variadics \u003d call.starargs + call.kwargs"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    return _no_context_variadic(node, scope.args.vararg, astroid.Starred, variadics)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "def _no_context_variadic(node, variadic_name, variadic_type, variadics):"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Verify if the given call node has variadic nodes without context"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "    This is a workaround for handling cases of nested call functions"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "    which don\u0027t have the specific call context at hand."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    Variadic arguments (variable positional arguments and variable"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "    keyword arguments) are inferred, inherently wrong, by astroid"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "    as a Tuple, respectively a Dict with empty elements."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "    This can lead pylint to believe that a function call receives"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "    too few arguments."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    scope \u003d node.scope()"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    is_in_lambda_scope \u003d not isinstance(scope, astroid.FunctionDef) and isinstance("
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        scope, astroid.Lambda"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    statement \u003d node.statement()"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    for name in statement.nodes_of_class(astroid.Name):"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        if name.name !\u003d variadic_name:"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d safe_infer(name)"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(inferred, (astroid.List, astroid.Tuple)):"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "            length \u003d len(inferred.elts)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(inferred, astroid.Dict):"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "            length \u003d len(inferred.items)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_in_lambda_scope and isinstance(inferred.parent, astroid.Arguments):"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "            # The statement of the variadic will be the assignment itself,"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "            # so we need to go the lambda instead"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred_statement \u003d inferred.parent.parent"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred_statement \u003d inferred.statement()"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        if not length and isinstance(inferred_statement, astroid.Lambda):"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            is_in_starred_context \u003d _has_parent_of_type(node, variadic_type, statement)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "            used_as_starred_argument \u003d any("
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "                variadic.value \u003d\u003d name or variadic.value.parent_of(name)"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "                for variadic in variadics"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "            if is_in_starred_context or used_as_starred_argument:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_invalid_metaclass(metaclass):"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        mro \u003d metaclass.mro()"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "    except NotImplementedError:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        # Cannot have a metaclass which is not a newstyle class."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        if not any(is_builtin_object(cls) and cls.name \u003d\u003d \"type\" for cls in mro):"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "def _infer_from_metaclass_constructor(cls, func):"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Try to infer what the given *func* constructor is building"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    :param astroid.FunctionDef func:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "        A metaclass constructor. Metaclass definitions can be"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "        functions, which should accept three arguments, the name of"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "        the class, the bases of the class and the attributes."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        The function could return anything, but usually it should"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        be a proper metaclass."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "    :param astroid.ClassDef cls:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        The class for which the *func* parameter should generate"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        a metaclass."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "    :returns:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "        The class generated by the function or None,"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        if we couldn\u0027t infer it."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "    :rtype: astroid.ClassDef"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    context \u003d astroid.context.InferenceContext()"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    class_bases \u003d astroid.List()"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "    class_bases.postinit(elts\u003dcls.bases)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "    attrs \u003d astroid.Dict()"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "    local_names \u003d [(name, values[-1]) for name, values in cls.locals.items()]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    attrs.postinit(local_names)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    builder_args \u003d astroid.Tuple()"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "    builder_args.postinit([cls.name, class_bases, attrs])"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "    context.callcontext \u003d astroid.context.CallContext(builder_args)"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d next(func.infer_call_result(func, context), None)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "    except astroid.InferenceError:"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    return inferred or None"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_c_extension(module_node):"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    return ("
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        not modutils.is_standard_module(module_node.name)"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        and not module_node.fully_defined()"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "class TypeChecker(BaseChecker):"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"try to find bugs in the code using type inference"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d (IAstroidChecker,)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    # configuration section name"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"typecheck\""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "    # messages"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d MSGS"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    priority \u003d -1"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "    # configuration options"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ("
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "            \"ignore-on-opaque-inference\","
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": True,"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"This flag controls whether pylint should warn about \""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "                \"no-member and similar checks whenever an opaque object \""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "                \"is returned when inferring. The inference can return \""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                \"multiple potential results while evaluating a Python object, \""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                \"but some branches might not be evaluated, which results in \""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "                \"partial inference. In that case, it might be useful to still emit \""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "                \"no-member and other checks for the rest of the inferred objects.\","
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "            \"ignore-mixin-members\","
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": True,"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \u0027Tells whether missing members accessed in mixin \\"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "class should be ignored. A mixin class is detected if its name ends with \\"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\"mixin\" (case insensitive).\u0027,"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "            \"ignore-none\","
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": True,"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Tells whether to warn about missing members when the owner \""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "                \"of the attribute is inferred to be None.\","
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "            \"ignored-modules\","
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (),"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cmodule names\u003e\","
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of module names for which member attributes \""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "                \"should not be checked (useful for modules/projects \""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "                \"where namespaces are manipulated during runtime and \""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "                \"thus existing member attributes cannot be \""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "                \"deduced by static analysis). It supports qualified \""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "                \"module names, as well as Unix pattern matching.\","
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        # the defaults here are *stdlib* names that (almost) always"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "        # lead to false positives, since their idiomatic use is"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "        # \u0027too dynamic\u0027 for pylint to grok."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "            \"ignored-classes\","
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (\"optparse.Values\", \"thread._local\", \"_thread._local\"),"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cmembers names\u003e\","
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of class names for which member attributes \""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "                \"should not be checked (useful for classes with \""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "                \"dynamically set attributes). This supports \""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "                \"the use of qualified names.\","
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "            \"generated-members\","
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (),"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"string\","
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cmembers names\u003e\","
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of members which are set dynamically and \\"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "missed by pylint inference system, and so shouldn\u0027t trigger E1101 when \\"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "accessed. Python regular expressions are accepted.\","
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "            \"contextmanager-decorators\","
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": [\"contextlib.contextmanager\"],"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cdecorator names\u003e\","
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of decorators that produce context managers, \""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "                \"such as contextlib.contextmanager. Add to this list \""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "                \"to register other decorators that produce valid \""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "                \"context managers.\","
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "            \"missing-member-hint-distance\","
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": 1,"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"int\","
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cmember hint edit distance\u003e\","
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"The minimum edit distance a name should have in order \""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "                \"to be considered a similar match for a missing member name.\","
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "            \"missing-member-max-choices\","
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": 1,"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"int\","
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cmember hint max choices\u003e\","
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"The total number of similar names that should be taken in \""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "                \"consideration when showing a hint for a missing member.\","
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "            \"missing-member-hint\","
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": True,"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cmissing member hint\u003e\","
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Show a hint with possible names when a member name was not \""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "                \"found. The aspect of finding the hint is based on edit distance.\","
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "            \"signature-mutators\","
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": [],"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cdecorator names\u003e\","
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of decorators that change the signature of \""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "                \"a decorated function.\","
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "    @decorators.cachedproperty"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "    def _suggestion_mode(self):"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "        return get_global_option(self, \"suggestion-mode\", default\u003dTrue)"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "    def open(self):"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "        # do this in open since config not fully initialized in __init__"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        # generated_members may contain regular expressions"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        # (surrounded by quote `\"` and followed by a comma `,`)"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "        # REQUEST,aq_parent,\"[a-zA-Z]+_set{1,2}\"\u0027 \u003d\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        # (\u0027REQUEST\u0027, \u0027aq_parent\u0027, \u0027[a-zA-Z]+_set{1,2}\u0027)"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(self.config.generated_members, str):"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "            gen \u003d shlex.shlex(self.config.generated_members)"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "            gen.whitespace +\u003d \",\""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "            gen.wordchars +\u003d r\"[]-+\\.*?()|\""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "            self.config.generated_members \u003d tuple(tok.strip(\u0027\"\u0027) for tok in gen)"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"keyword-arg-before-vararg\")"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "        # check for keyword arg before varargs"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.args.vararg and node.args.defaults:"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"keyword-arg-before-vararg\", node\u003dnode, args\u003d(node.name))"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "    visit_asyncfunctiondef \u003d visit_functiondef"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"invalid-metaclass\")"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_classdef(self, node):"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "        def _metaclass_name(metaclass):"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(metaclass, (astroid.ClassDef, astroid.FunctionDef)):"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "                return metaclass.name"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "            return metaclass.as_string()"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "        metaclass \u003d node.declared_metaclass()"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        if not metaclass:"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(metaclass, astroid.FunctionDef):"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "            # Try to infer the result."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "            metaclass \u003d _infer_from_metaclass_constructor(node, metaclass)"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "            if not metaclass:"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "                # Don\u0027t do anything if we cannot infer the result."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(metaclass, astroid.ClassDef):"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "            if _is_invalid_metaclass(metaclass):"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"invalid-metaclass\", node\u003dnode, args\u003d(_metaclass_name(metaclass),)"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                \"invalid-metaclass\", node\u003dnode, args\u003d(_metaclass_name(metaclass),)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assignattr(self, node):"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.assign_type(), astroid.AugAssign):"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "            self.visit_attribute(node)"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_delattr(self, node):"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "        self.visit_attribute(node)"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"no-member\", \"c-extension-no-member\")"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_attribute(self, node):"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that the accessed attribute exists"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "        to avoid too much false positives for now, we\u0027ll consider the code as"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "        correct if a single of the inferred nodes has the accessed attribute."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "        function/method, super call and metaclasses are ignored"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "        for pattern in self.config.generated_members:"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "            # attribute is marked as generated, stop here"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "            if re.match(pattern, node.attrname):"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "            if re.match(pattern, node.as_string()):"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d list(node.expr.infer())"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        except exceptions.InferenceError:"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "        # list of (node, nodename) which are missing the attribute"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "        missingattr \u003d set()"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "        non_opaque_inference_results \u003d ["
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "            owner"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "            for owner in inferred"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "            if owner is not astroid.Uninferable"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "            and not isinstance(owner, astroid.nodes.Unknown)"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "            len(non_opaque_inference_results) !\u003d len(inferred)"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "            and self.config.ignore_on_opaque_inference"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "            # There is an ambiguity in the inference. Since we can\u0027t"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "            # make sure that we won\u0027t emit a false positive, we just stop"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "            # whenever the inference returns an opaque inference object."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "        for owner in non_opaque_inference_results:"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d getattr(owner, \"name\", None)"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "            if _is_owner_ignored("
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "                owner, name, self.config.ignored_classes, self.config.ignored_modules"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "                if not ["
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "                    n"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "                    for n in owner.getattr(node.attrname)"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not isinstance(n.statement(), astroid.AugAssign)"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "                ]:"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "                    missingattr.add((owner, name))"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "            except AttributeError:"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "            except exceptions.NotFoundError:"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "                # This can\u0027t be moved before the actual .getattr call,"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "                # because there can be more values inferred and we are"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "                # stopping after the first one which has the attribute in question."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "                # The problem is that if the first one has the attribute,"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "                # but we continue to the next values which doesn\u0027t have the"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "                # attribute, then we\u0027ll have a false positive."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "                # So call this only after the call has been made."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "                if not _emit_no_member("
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "                    node,"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "                    owner,"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "                    name,"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "                    ignored_mixins\u003dself.config.ignore_mixin_members,"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "                    ignored_none\u003dself.config.ignore_none,"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "                missingattr.add((owner, name))"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "            # stop on the first found"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "            break"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "            # we have not found any node with the attributes, display the"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "            # message for inferred nodes"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "            done \u003d set()"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "            for owner, name in missingattr:"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(owner, astroid.Instance):"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "                    actual \u003d owner._proxied"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "                    actual \u003d owner"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "                if actual in done:"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "                done.add(actual)"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "                msg, hint \u003d self._get_nomember_msgid_hint(node, owner)"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "                    msg,"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "                    node\u003dnode,"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "                    args\u003d(owner.display_type(), name, node.attrname, hint),"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "                    confidence\u003dINFERENCE,"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "    def _get_nomember_msgid_hint(self, node, owner):"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "        suggestions_are_possible \u003d self._suggestion_mode and isinstance("
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "            owner, astroid.Module"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "        if suggestions_are_possible and _is_c_extension(owner):"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \"c-extension-no-member\""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "            hint \u003d \"\""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \"no-member\""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "            if self.config.missing_member_hint:"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "                hint \u003d _missing_member_hint("
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "                    owner,"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "                    node.attrname,"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.config.missing_member_hint_distance,"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.config.missing_member_max_choices,"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "                hint \u003d \"\""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "        return msg, hint"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    @check_messages("
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"assignment-from-no-return\","
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"assignment-from-none\","
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"non-str-assignment-to-dunder-name\","
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    )"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assign(self, node):"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        Process assignments in the AST."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        self._check_assignment_from_function_call(node)"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        self._check_dundername_is_string(node)"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    def _check_assignment_from_function_call(self, node):"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that if assigning to a function call, the function is"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "        possibly returning something valuable"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node.value, astroid.Call):"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "        function_node \u003d safe_infer(node.value.func)"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "        funcs \u003d (astroid.FunctionDef, astroid.UnboundMethod, astroid.BoundMethod)"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(function_node, funcs):"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "        # Unwrap to get the actual function object"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(function_node, astroid.BoundMethod) and isinstance("
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "            function_node._proxied, astroid.UnboundMethod"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "            function_node \u003d function_node._proxied._proxied"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        # Make sure that it\u0027s a valid function that we can analyze."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ordered from less expensive to more expensive checks."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "        # pylint: disable\u003dtoo-many-boolean-expressions"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "            not function_node.is_function"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "            or isinstance(function_node, astroid.AsyncFunctionDef)"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "            or function_node.decorators"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "            or function_node.is_generator()"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "            or function_node.is_abstract(pass_is_abstract\u003dFalse)"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "            or utils.is_error(function_node)"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "            or not function_node.root().fully_defined()"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        returns \u003d list("
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "            function_node.nodes_of_class(astroid.Return, skip_klass\u003dastroid.FunctionDef)"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        if not returns:"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"assignment-from-no-return\", node\u003dnode)"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "            for rnode in returns:"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "                if not ("
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(rnode.value, astroid.Const)"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "                    and rnode.value.value is None"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "                    or rnode.value is None"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"assignment-from-none\", node\u003dnode)"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    def _check_dundername_is_string(self, node):"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        Check a string is assigned to self.__name__"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        # Check the left hand side of the assignment is \u003csomething\u003e.__name__"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        lhs \u003d node.targets[0]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        if not isinstance(lhs, astroid.node_classes.AssignAttr):"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        if not lhs.attrname \u003d\u003d \"__name__\":"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        # If the right hand side is not a string"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        rhs \u003d node.value"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        if isinstance(rhs, astroid.Const) and isinstance(rhs.value, str):"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        inferred \u003d utils.safe_infer(rhs)"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        if not inferred:"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        if not ("
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "            isinstance(inferred, astroid.Const) and isinstance(inferred.value, str)"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "            # Add the message"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "            self.add_message(\"non-str-assignment-to-dunder-name\", node\u003dnode)"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_uninferable_call(self, node):"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "        Check that the given uninferable Call node does not"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "        call an actual function."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node.func, astroid.Attribute):"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "        # Look for properties. First, obtain"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "        # the lhs of the Attribute node and search the attribute"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "        # there. If that attribute is a property or a subclass of properties,"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "        # then most likely it\u0027s not callable."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        expr \u003d node.func.expr"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "        klass \u003d safe_infer(expr)"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "            klass is None"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "            or klass is astroid.Uninferable"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "            or not isinstance(klass, astroid.Instance)"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "            attrs \u003d klass._proxied.getattr(node.func.attrname)"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "        except exceptions.NotFoundError:"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "        for attr in attrs:"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "            if attr is astroid.Uninferable:"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(attr, astroid.FunctionDef):"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "            # Decorated, see if it is decorated with a property."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "            # Also, check the returns and see if they are callable."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "            if decorated_with_property(attr):"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                    all_returns_are_callable \u003d all("
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                        return_node.callable() or return_node is astroid.Uninferable"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "                        for return_node in attr.infer_call_result(node)"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "                except astroid.InferenceError:"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "                if not all_returns_are_callable:"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"not-callable\", node\u003dnode, args\u003dnode.func.as_string()"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_argument_order(self, node, call_site, called, called_param_names):"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Match the supplied argument names against the function parameters."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "        Warn if some argument names are not in the same order as they are in"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "        the function signature."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check for called function being an object instance function"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        # If so, ignore the initial \u0027self\u0027 argument in the signature"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "            is_classdef \u003d isinstance(called.parent, astroid.scoped_nodes.ClassDef)"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "            if is_classdef and called_param_names[0] \u003d\u003d \"self\":"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "                called_param_names \u003d called_param_names[1:]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        except IndexError:"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "            # extract argument names, if they have names"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            calling_parg_names \u003d [p.name for p in call_site.positional_arguments]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "            # Additionally get names of keyword arguments to use in a full match"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "            # against parameters"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "            calling_kwarg_names \u003d ["
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "                arg.name for arg in call_site.keyword_arguments.values()"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "        except AttributeError:"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "            # the type of arg does not provide a `.name`. In this case we"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "            # stop checking for out-of-order arguments because it is only relevant"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "            # for named variables."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t check for ordering if there is an unmatched arg or param"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "        arg_set \u003d set(calling_parg_names) | set(calling_kwarg_names)"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "        param_set \u003d set(called_param_names)"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "        if arg_set !\u003d param_set:"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "        # Warn based on the equality of argument ordering"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "        if calling_parg_names !\u003d called_param_names[: len(calling_parg_names)]:"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"arguments-out-of-order\", node\u003dnode, args\u003d())"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "    # pylint: disable\u003dtoo-many-branches,too-many-locals"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(*(list(MSGS.keys())))"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_call(self, node):"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that called functions/methods are inferred to callable objects,"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        and that the arguments passed to the function match the parameters in"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "        the inferred function\u0027s definition"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "        called \u003d safe_infer(node.func)"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "        # only function, generator and object defining __call__ are allowed"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore instances of descriptors since astroid cannot properly handle them"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "        # yet"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "        if called and not called.callable():"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(called, astroid.Instance) and ("
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "                not has_known_bases(called)"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "                or ("
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "                    called.parent is not None"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "                    and isinstance(called.scope(), astroid.ClassDef)"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "                    and \"__get__\" in called.locals"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "                # Don\u0027t emit if we can\u0027t make sure this object is callable."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"not-callable\", node\u003dnode, args\u003dnode.func.as_string())"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_uninferable_call(node)"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "            called, implicit_args, callable_name \u003d _determine_callable(called)"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "        except ValueError:"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "            # Any error occurred during determining the function type, most of"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "            # those errors are handled by different warnings."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "        if called.args.args is None:"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "            # Built-in functions have no argument information."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(called.argnames()) !\u003d len(set(called.argnames())):"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "            # Duplicate parameter name (see duplicate-argument).  We can\u0027t really"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "            # make sense of the function call in this case, so just return."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "        # Build the set of keyword arguments, checking for duplicate keywords,"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        # and count the positional arguments."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "        call_site \u003d astroid.arguments.CallSite.from_call(node)"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "        # Warn about duplicated keyword arguments, such as `f\u003d24, **{\u0027f\u0027: 24}`"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "        for keyword in call_site.duplicated_keywords:"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"repeated-keyword\", node\u003dnode, args\u003d(keyword,))"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "        if call_site.has_invalid_arguments() or call_site.has_invalid_keywords():"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "            # Can\u0027t make sense of this."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "        # Has the function signature changed in ways we cannot reliably detect?"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "        if hasattr(called, \"decorators\") and decorated_with("
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "            called, self.config.signature_mutators"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "        num_positional_args \u003d len(call_site.positional_arguments)"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "        keyword_args \u003d list(call_site.keyword_arguments.keys())"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "        overload_function \u003d is_overload_stub(called)"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "        # Determine if we don\u0027t have a context for our call and we use variadics."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "        node_scope \u003d node.scope()"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node_scope, (astroid.Lambda, astroid.FunctionDef)):"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "            has_no_context_positional_variadic \u003d _no_context_variadic_positional("
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "                node, node_scope"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "            has_no_context_keywords_variadic \u003d _no_context_variadic_keywords("
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "                node, node_scope"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "            has_no_context_positional_variadic \u003d ("
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "                has_no_context_keywords_variadic"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "            ) \u003d False"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "        # These are coming from the functools.partial implementation in astroid"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "        already_filled_positionals \u003d getattr(called, \"filled_positionals\", 0)"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "        already_filled_keywords \u003d getattr(called, \"filled_keywords\", {})"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "        keyword_args +\u003d list(already_filled_keywords)"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "        num_positional_args +\u003d implicit_args + already_filled_positionals"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "        # Analyze the list of formal parameters."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "        args \u003d list(itertools.chain(called.args.posonlyargs or (), called.args.args))"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "        num_mandatory_parameters \u003d len(args) - len(called.args.defaults)"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "        parameters \u003d []"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "        parameter_name_to_index \u003d {}"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "        for i, arg in enumerate(args):"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(arg, astroid.Tuple):"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "                name \u003d None"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "                # Don\u0027t store any parameter names within the tuple, since those"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "                # are not assignable from keyword arguments."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "                assert isinstance(arg, astroid.AssignName)"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "                # This occurs with:"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "                #    def f( (a), (b) ): pass"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "                name \u003d arg.name"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "                parameter_name_to_index[name] \u003d i"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "            if i \u003e\u003d num_mandatory_parameters:"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "                defval \u003d called.args.defaults[i - num_mandatory_parameters]"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "                defval \u003d None"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "            parameters.append([(name, defval), False])"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "        kwparams \u003d {}"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "        for i, arg in enumerate(called.args.kwonlyargs):"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(arg, astroid.Keyword):"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "                name \u003d arg.arg"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "                assert isinstance(arg, astroid.AssignName)"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "                name \u003d arg.name"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "            kwparams[name] \u003d [called.args.kw_defaults[i], False]"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_argument_order("
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "            node, call_site, called, [p[0][0] for p in parameters]"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "        # 1. Match the positional arguments."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "        for i in range(num_positional_args):"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "            if i \u003c len(parameters):"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "                parameters[i][1] \u003d True"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "            elif called.args.vararg is not None:"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "                # The remaining positional arguments get assigned to the *args"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "                # parameter."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "            elif not overload_function:"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "                # Too many positional arguments."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"too-many-function-args\", node\u003dnode, args\u003d(callable_name,)"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "        # 2. Match the keyword arguments."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        for keyword in keyword_args:"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "            if keyword in parameter_name_to_index:"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "                i \u003d parameter_name_to_index[keyword]"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "                if parameters[i][1]:"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Duplicate definition of function parameter."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Might be too hardcoded, but this can actually"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "                    # happen when using str.format and `self` is passed"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "                    # by keyword argument, as in `.format(self\u003dself)`."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "                    # It\u0027s perfectly valid to so, so we\u0027re just skipping"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "                    # it if that\u0027s the case."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not (keyword \u003d\u003d \"self\" and called.qname() in STR_FORMAT):"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"redundant-keyword-arg\","
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "                            node\u003dnode,"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "                            args\u003d(keyword, callable_name),"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "                    parameters[i][1] \u003d True"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "            elif keyword in kwparams:"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "                if kwparams[keyword][1]:"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Duplicate definition of function parameter."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"redundant-keyword-arg\","
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "                        node\u003dnode,"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "                        args\u003d(keyword, callable_name),"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "                    kwparams[keyword][1] \u003d True"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "            elif called.args.kwarg is not None:"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "                # The keyword argument gets assigned to the **kwargs parameter."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "            elif not overload_function:"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "                # Unexpected keyword argument."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"unexpected-keyword-arg\", node\u003dnode, args\u003d(keyword, callable_name)"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "        # 3. Match the **kwargs, if any."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.kwargs:"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "            for i, [(name, defval), assigned] in enumerate(parameters):"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "                # Assume that *kwargs provides values for all remaining"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "                # unassigned named parameters."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "                if name is not None:"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "                    parameters[i][1] \u003d True"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "                    # **kwargs can\u0027t assign to tuples."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check that any parameters without a default have been assigned"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "        # values."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "        for [(name, defval), assigned] in parameters:"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "            if (defval is None) and not assigned:"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "                if name is None:"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "                    display_name \u003d \"\u003ctuple\u003e\""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "                    display_name \u003d repr(name)"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "                if not has_no_context_positional_variadic and not overload_function:"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"no-value-for-parameter\","
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "                        node\u003dnode,"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "                        args\u003d(display_name, callable_name),"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "        for name in kwparams:"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "            defval, assigned \u003d kwparams[name]"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "            if defval is None and not assigned and not has_no_context_keywords_variadic:"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"missing-kwoa\", node\u003dnode, args\u003d(name, callable_name))"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"invalid-sequence-index\")"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_extslice(self, node):"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check extended slice objects as if they were used as a sequence"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "        # index to check if the object being sliced can support them"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "        return self.visit_index(node)"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"invalid-sequence-index\")"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_index(self, node):"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "        if not node.parent or not hasattr(node.parent, \"value\"):"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "            return None"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "        # Look for index operations where the parent is a sequence type."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "        # If the types can be determined, only allow indices to be int,"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "        # slice or instances with __index__."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "        parent_type \u003d safe_infer(node.parent.value)"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance("
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "            parent_type, (astroid.ClassDef, astroid.Instance)"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "        ) or not has_known_bases(parent_type):"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "            return None"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "        # Determine what method on the parent this index will use"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "        # The parent of this node will be a Subscript, and the parent of that"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "        # node determines if the Subscript is a get, set, or delete operation."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.parent.ctx is astroid.Store:"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "            methodname \u003d \"__setitem__\""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "        elif node.parent.ctx is astroid.Del:"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "            methodname \u003d \"__delitem__\""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "            methodname \u003d \"__getitem__\""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check if this instance\u0027s __getitem__, __setitem__, or __delitem__, as"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "        # appropriate to the statement, is implemented in a builtin sequence"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "        # type. This way we catch subclasses of sequence types but skip classes"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "        # that override __getitem__ and which may allow non-integer indices."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "            methods \u003d dunder_lookup.lookup(parent_type, methodname)"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "            if methods is astroid.Uninferable:"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "                return None"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "            itemmethod \u003d methods[0]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "        except ("
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "            exceptions.NotFoundError,"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "            exceptions.AttributeInferenceError,"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "            IndexError,"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "            return None"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "            not isinstance(itemmethod, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "            or itemmethod.root().name !\u003d BUILTINS"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "            or not itemmethod.parent"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "            or itemmethod.parent.name not in SEQUENCE_TYPES"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "            return None"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "        # For ExtSlice objects coming from visit_extslice, no further"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "        # inference is necessary, since if we got this far the ExtSlice"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "        # is an error."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, astroid.ExtSlice):"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "            index_type \u003d node"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "            index_type \u003d safe_infer(node)"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "        if index_type is None or index_type is astroid.Uninferable:"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "            return None"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "        # Constants must be of type int"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(index_type, astroid.Const):"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(index_type.value, int):"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "                return None"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "        # Instance values must be int, slice, or have an __index__ method"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(index_type, astroid.Instance):"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "            if index_type.pytype() in (BUILTINS + \".int\", BUILTINS + \".slice\"):"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "                return None"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "                index_type.getattr(\"__index__\")"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "                return None"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "            except exceptions.NotFoundError:"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "                pass"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(index_type, astroid.Slice):"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "            # Delegate to visit_slice. A slice can be present"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "            # here after inferring the index node, which could"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "            # be a `slice(...)` call for instance."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "            return self.visit_slice(index_type)"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "        # Anything else is an error"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"invalid-sequence-index\", node\u003dnode)"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"invalid-slice-index\")"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_slice(self, node):"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "        # Check the type of each part of the slice"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "        invalid_slices \u003d 0"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "        for index in (node.lower, node.upper, node.step):"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "            if index is None:"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "            index_type \u003d safe_infer(index)"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "            if index_type is None or index_type is astroid.Uninferable:"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "            # Constants must of type int or None"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(index_type, astroid.Const):"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(index_type.value, (int, type(None))):"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "            # Instance values must be of type int, None or an object"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "            # with __index__"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "            elif isinstance(index_type, astroid.Instance):"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "                if index_type.pytype() in (BUILTINS + \".int\", BUILTINS + \".NoneType\"):"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "                    index_type.getattr(\"__index__\")"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "                except exceptions.NotFoundError:"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "            invalid_slices +\u003d 1"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "        if not invalid_slices:"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "        # Anything else is an error, unless the object that is indexed"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "        # is a custom object, which knows how to handle this kind of slices"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "        parent \u003d node.parent"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(parent, astroid.ExtSlice):"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "            parent \u003d parent.parent"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(parent, astroid.Subscript):"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d safe_infer(parent.value)"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred is None or inferred is astroid.Uninferable:"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "                # Don\u0027t know what this is"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "            known_objects \u003d ("
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.List,"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.Dict,"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.Tuple,"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.objects.FrozenSet,"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.Set,"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(inferred, known_objects):"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "                # Might be an instance that knows how to handle this slice object"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "        for _ in range(invalid_slices):"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-slice-index\", node\u003dnode)"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-context-manager\")"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_with(self, node):"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "        for ctx_mgr, _ in node.items:"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "            context \u003d astroid.context.InferenceContext()"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d safe_infer(ctx_mgr, context\u003dcontext)"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred is None or inferred is astroid.Uninferable:"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(inferred, bases.Generator):"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "                # Check if we are dealing with a function decorated"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "                # with contextlib.contextmanager."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "                if decorated_with("
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "                    inferred.parent, self.config.contextmanager_decorators"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "                # If the parent of the generator is not the context manager itself,"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "                # that means that it could have been returned from another"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "                # function which was the real context manager."
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "                # The following approach is more of a hack rather than a real"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "                # solution: walk all the inferred statements for the"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "                # given *ctx_mgr* and if you find one function scope"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "                # which is decorated, consider it to be the real"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "                # manager and give up, otherwise emit not-context-manager."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "                # See the test file for not_context_manager for a couple"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "                # of self explaining tests."
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "                # Retrieve node from all previusly visited nodes in the the inference history"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "                context_path_names \u003d filter(None, _unflatten(context.path))"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "                inferred_paths \u003d _flatten_container("
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "                    safe_infer(path) for path in context_path_names"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "                for inferred_path in inferred_paths:"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not inferred_path:"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "                    scope \u003d inferred_path.scope()"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not isinstance(scope, astroid.FunctionDef):"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "                    if decorated_with(scope, self.config.contextmanager_decorators):"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "                        break"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"not-context-manager\", node\u003dnode, args\u003d(inferred.name,)"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "                    inferred.getattr(\"__enter__\")"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "                    inferred.getattr(\"__exit__\")"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "                except exceptions.NotFoundError:"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "                    if isinstance(inferred, astroid.Instance):"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "                        # If we do not know the bases of this class,"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "                        # just skip it."
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "                        if not has_known_bases(inferred):"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "                            continue"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Just ignore mixin classes."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "                        if self.config.ignore_mixin_members:"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "                            if inferred.name[-5:].lower() \u003d\u003d \"mixin\":"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "                                continue"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"not-context-manager\", node\u003dnode, args\u003d(inferred.name,)"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"invalid-unary-operand-type\")"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_unaryop(self, node):"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Detect TypeErrors for unary operands.\"\"\""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "        for error in node.type_errors():"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "            # Let the error customize its output."
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"invalid-unary-operand-type\", args\u003dstr(error), node\u003dnode)"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"unsupported-binary-operation\")"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "    def _visit_binop(self, node):"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Detect TypeErrors for binary arithmetic operands.\"\"\""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_binop_errors(node)"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"unsupported-binary-operation\")"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "    def _visit_augassign(self, node):"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Detect TypeErrors for augmented binary arithmetic operands.\"\"\""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_binop_errors(node)"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_binop_errors(self, node):"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "        for error in node.type_errors():"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "            # Let the error customize its output."
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "            if any("
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(obj, astroid.ClassDef) and not has_known_bases(obj)"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "                for obj in (error.left_type, error.right_type)"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"unsupported-binary-operation\", args\u003dstr(error), node\u003dnode)"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_membership_test(self, node):"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_inside_abstract_class(node):"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_comprehension(node):"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d safe_infer(node)"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "        if inferred is None or inferred is astroid.Uninferable:"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "        if not supports_membership_test(inferred):"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "                \"unsupported-membership-test\", args\u003dnode.as_string(), node\u003dnode"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"unsupported-membership-test\")"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_compare(self, node):"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(node.ops) !\u003d 1:"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "        op, right \u003d node.ops[0]"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "        if op in [\"in\", \"not in\"]:"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_membership_test(right)"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages("
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unsubscriptable-object\","
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unsupported-assignment-operation\","
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unsupported-delete-operation\","
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unhashable-dict-key\","
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_subscript(self, node):"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "        supported_protocol \u003d None"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.value, (astroid.ListComp, astroid.DictComp)):"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.value, astroid.Dict):"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "            # Assert dict key is hashable"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d safe_infer(node.slice.value)"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred not in (None, astroid.Uninferable):"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "                    hash_fn \u003d next(inferred.igetattr(\"__hash__\"))"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "                except astroid.InferenceError:"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "                    if getattr(hash_fn, \"value\", True) is None:"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(\"unhashable-dict-key\", node\u003dnode.value)"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.ctx \u003d\u003d astroid.Load:"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "            supported_protocol \u003d supports_getitem"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \"unsubscriptable-object\""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "        elif node.ctx \u003d\u003d astroid.Store:"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "            supported_protocol \u003d supports_setitem"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \"unsupported-assignment-operation\""
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "        elif node.ctx \u003d\u003d astroid.Del:"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "            supported_protocol \u003d supports_delitem"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \"unsupported-delete-operation\""
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.value, astroid.SetComp):"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(msg, args\u003dnode.value.as_string(), node\u003dnode.value)"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_inside_abstract_class(node):"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d safe_infer(node.value)"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "        if inferred is None or inferred is astroid.Uninferable:"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "        if not supported_protocol(inferred):"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(msg, args\u003dnode.value.as_string(), node\u003dnode.value)"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"dict-items-missing-iter\")"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_for(self, node):"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node.target, astroid.node_classes.Tuple):"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "            # target is not a tuple"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "        if not len(node.target.elts) \u003d\u003d 2:"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "            # target is not a tuple of two elements"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "        iterable \u003d node.iter"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(iterable, astroid.node_classes.Name):"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "            # it\u0027s not a bare variable"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d safe_infer(iterable)"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "        if not inferred:"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(inferred, astroid.node_classes.Dict):"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "            # the iterable is not a dict"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"dict-iter-missing-items\", node\u003dnode)"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "class IterableChecker(BaseChecker):"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "    Checks for non-iterables used in an iterable context."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "    Contexts include:"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "    - for-statement"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "    - starargs in function call"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "    - `yield from`-statement"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "    - list, dict and set comprehensions"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "    - generator expressions"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "    Also checks for non-mappings in function call kwargs."
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d (IAstroidChecker,)"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"typecheck\""
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d {"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1133\": ("
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Non-iterable value %s is used in an iterating context\","
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "            \"not-an-iterable\","
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a non-iterable value is used in place where \""
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "            \"iterable is expected\","
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "        \"E1134\": ("
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Non-mapping value %s is used in a mapping context\","
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "            \"not-a-mapping\","
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Used when a non-mapping value is used in place where \""
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "            \"mapping is expected\","
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_asyncio_coroutine(node):"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node, astroid.Call):"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred_func \u003d safe_infer(node.func)"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(inferred_func, astroid.FunctionDef):"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "        if not inferred_func.decorators:"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "        for decorator in inferred_func.decorators.nodes:"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred_decorator \u003d safe_infer(decorator)"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(inferred_decorator, astroid.FunctionDef):"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred_decorator.qname() !\u003d ASYNCIO_COROUTINE:"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_iterable(self, node, check_async\u003dFalse):"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_inside_abstract_class(node) or is_comprehension(node):"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d safe_infer(node)"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "        if not inferred:"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "        if not is_iterable(inferred, check_async\u003dcheck_async):"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"not-an-iterable\", args\u003dnode.as_string(), node\u003dnode)"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_mapping(self, node):"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_inside_abstract_class(node):"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node, astroid.DictComp):"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d safe_infer(node)"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "        if inferred is None or inferred is astroid.Uninferable:"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "        if not is_mapping(inferred):"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"not-a-mapping\", args\u003dnode.as_string(), node\u003dnode)"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-an-iterable\")"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_for(self, node):"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_iterable(node.iter)"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-an-iterable\")"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_asyncfor(self, node):"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_iterable(node.iter, check_async\u003dTrue)"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-an-iterable\")"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_yieldfrom(self, node):"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._is_asyncio_coroutine(node.value):"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_iterable(node.value)"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-an-iterable\", \"not-a-mapping\")"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_call(self, node):"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": "        for stararg in node.starargs:"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_iterable(stararg.value)"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "        for kwarg in node.kwargs:"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_mapping(kwarg.value)"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-an-iterable\")"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_listcomp(self, node):"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "        for gen in node.generators:"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_iterable(gen.iter, check_async\u003dgen.is_async)"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-an-iterable\")"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_dictcomp(self, node):"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "        for gen in node.generators:"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_iterable(gen.iter, check_async\u003dgen.is_async)"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-an-iterable\")"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_setcomp(self, node):"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "        for gen in node.generators:"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_iterable(gen.iter, check_async\u003dgen.is_async)"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "    @check_messages(\"not-an-iterable\")"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_generatorexp(self, node):"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "        for gen in node.generators:"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_iterable(gen.iter, check_async\u003dgen.is_async)"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "def register(linter):"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"required method to auto register this checker \"\"\""
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(TypeChecker(linter))"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(IterableChecker(linter))"
      }
    ],
    "authorContributionMap": {
      "Andy Palmer": 44,
      "-": 1766,
      "Nick Drozd": 2
    }
  },
  {
    "path": "pylint/checkers/variables.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2006-2014 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2009 Mads Kiilerich \u003cmads@kiilerich.com\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2010 Daniel Harding \u003cdharding@gmail.com\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2011-2014, 2017 Google, Inc."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012 FELD Boris \u003clothiraldan@gmail.com\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2013-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Michal Nowikowski \u003cgodfryd@gmail.com\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Brett Cannon \u003cbrett@python.org\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Ricardo Gemignani \u003cricardo.gemignani@gmail.com\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Dmitry Pribysh \u003cdmand@yandex.ru\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Radu Ciorba \u003cradu@devrandom.ro\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Simu Toni \u003csimutoni@gmail.com\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016, 2018 Ashley Whetter \u003cashley@awhetter.co.uk\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016, 2018 Jakub Wilk \u003cjwilk@jwilk.net\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016-2017 Derek Gustafson \u003cdegustaf@gmail.com\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016-2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Grant Welch \u003cgwelch925+github@gmail.com\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Ville Skyttä \u003cville.skytta@iki.fi\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017-2018 hippo91 \u003cguillaume.peillex@gmail.com\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Dan Garrette \u003cdhgarrette@gmail.com\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Bryce Guinta \u003cbryce.guinta@protonmail.com\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Bryce Guinta \u003cbryce.paul.guinta@gmail.com\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Mike Frysinger \u003cvapier@gmail.com\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 ssolanki \u003csushobhitsolanki@gmail.com\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Marianna Polatoglou \u003cmpolatoglou@bloomberg.net\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 mar-chi-pan \u003cmar.polatoglou@gmail.com\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ville Skyttä \u003cville.skytta@upcloud.com\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"variables checkers for Python code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import collections"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import copy"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import itertools"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import os"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import re"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "from functools import lru_cache"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid import decorators, modutils, objects"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.context import InferenceContext"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers import BaseChecker, utils"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers.utils import is_postponed_evaluation_enabled"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.interfaces import HIGH, INFERENCE, INFERENCE_FAILURE, IAstroidChecker"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.utils import get_global_option"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "SPECIAL_OBJ \u003d re.compile(\"^_{2}[a-z]+_{2}$\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "FUTURE \u003d \"__future__\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "# regexp for ignored argument name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "IGNORED_ARGUMENT_NAMES \u003d re.compile(\"_.*|^ignored_|^unused_\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "# In Python 3.7 abc has a Python implementation which is preferred"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "# by astroid. Unfortunately this also messes up our explicit checks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "# for `abc`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "METACLASS_NAME_TRANSFORMS \u003d {\"_py_abc\": \"abc\"}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "TYPING_TYPE_CHECKS_GUARDS \u003d frozenset({\"typing.TYPE_CHECKING\", \"TYPE_CHECKING\"})"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "BUILTIN_RANGE \u003d \"builtins.range\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "TYPING_MODULE \u003d \"typing\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "TYPING_NAMES \u003d frozenset("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Any\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Callable\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \"ClassVar\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Generic\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Optional\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Tuple\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Type\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \"TypeVar\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Union\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \"AbstractSet\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \"ByteString\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Container\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \"ContextManager\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Hashable\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \"ItemsView\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Iterable\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Iterator\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \"KeysView\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Mapping\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \"MappingView\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \"MutableMapping\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \"MutableSequence\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \"MutableSet\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Sequence\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Sized\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \"ValuesView\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Awaitable\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \"AsyncIterator\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        \"AsyncIterable\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Coroutine\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Collection\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \"AsyncGenerator\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        \"AsyncContextManager\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Reversible\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        \"SupportsAbs\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \"SupportsBytes\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        \"SupportsComplex\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \"SupportsFloat\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        \"SupportsInt\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        \"SupportsRound\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Counter\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Deque\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Dict\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        \"DefaultDict\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        \"List\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Set\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \"FrozenSet\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        \"NamedTuple\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Generator\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        \"AnyStr\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Text\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Pattern\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        \"BinaryIO\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_from_future_import(stmt, name):"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Check if the name is a future import from another module.\"\"\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d stmt.do_import_module(stmt.modname)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    except astroid.AstroidBuildingException:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    for local_node in module.locals.get(name, []):"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(local_node, astroid.ImportFrom) and local_node.modname \u003d\u003d FUTURE:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    return None"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "def in_for_else_branch(parent, stmt):"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Returns True if stmt in inside the else branch for a parent For stmt.\"\"\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    return isinstance(parent, astroid.For) and any("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        else_stmt.parent_of(stmt) or else_stmt \u003d\u003d stmt for else_stmt in parent.orelse"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "@lru_cache(maxsize\u003d1000)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "def overridden_method(klass, name):"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"get overridden method if any\"\"\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        parent \u003d next(klass.local_attr_ancestors(name))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    except (StopIteration, KeyError):"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        meth_node \u003d parent[name]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    except KeyError:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        # We have found an ancestor defining \u003cname\u003e but it\u0027s not in the local"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        # dictionary. This may happen with astroid built from living objects."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(meth_node, astroid.FunctionDef):"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return meth_node"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    return None"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_unpacking_extra_info(node, inferred):"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"return extra information to add to the message for unpacking-non-sequence"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    and unbalanced-tuple-unpacking errors"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    more \u003d \"\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    inferred_module \u003d inferred.root().name"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    if node.root().name \u003d\u003d inferred_module:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.lineno \u003d\u003d inferred.lineno:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            more \u003d \" %s\" % inferred.as_string()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        elif inferred.lineno:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            more \u003d \" defined at line %s\" % inferred.lineno"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    elif inferred.lineno:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        more \u003d \" defined at line %s of %s\" % (inferred.lineno, inferred_module)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return more"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "def _detect_global_scope(node, frame, defframe):"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Detect that the given frames shares a global"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    scope."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    Two frames shares a global scope when neither"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    of them are hidden under a function scope, as well"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    as any of parent scope of them, until the root scope."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    In this case, depending from something defined later on"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    will not work, because it is still undefined."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    Example:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        class A:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            # B has the same global scope as `C`, leading to a NameError."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            class B(C): ..."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        class C: ..."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    def_scope \u003d scope \u003d None"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    if frame and frame.parent:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        scope \u003d frame.parent.scope()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    if defframe and defframe.parent:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        def_scope \u003d defframe.parent.scope()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    if isinstance(frame, astroid.FunctionDef):"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        # If the parent of the current node is a"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        # function, then it can be under its scope"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        # (defined in, which doesn\u0027t concern us) or"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        # the `-\u003e` part of annotations. The same goes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        # for annotations of function arguments, they\u0027ll have"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        # their parent the Arguments node."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node.parent, (astroid.FunctionDef, astroid.Arguments)):"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    elif any("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        not isinstance(f, (astroid.ClassDef, astroid.Module)) for f in (frame, defframe)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    ):"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        # Not interested in other frames, since they are already"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        # not in a global scope."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    break_scopes \u003d []"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    for current_scope in (scope, def_scope):"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        # Look for parent scopes. If there is anything different"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        # than a module or a class scope, then they frames don\u0027t"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        # share a global scope."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        parent_scope \u003d current_scope"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        while parent_scope:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(parent_scope, (astroid.ClassDef, astroid.Module)):"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                break_scopes.append(parent_scope)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if parent_scope.parent:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                parent_scope \u003d parent_scope.parent.scope()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    if break_scopes and len(set(break_scopes)) !\u003d 1:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        # Store different scopes than expected."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        # If the stored scopes are, in fact, the very same, then it means"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        # that the two frames (frame and defframe) shares the same scope,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        # and we could apply our lineno analysis over them."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        # For instance, this works when they are inside a function, the node"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        # that uses a definition and the definition itself."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    # At this point, we are certain that frame and defframe shares a scope"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    # and the definition of the first depends on the second."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    return frame.lineno \u003c defframe.lineno"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "def _infer_name_module(node, name):"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    context \u003d InferenceContext()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    context.lookupname \u003d name"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    return node.infer(context, asname\u003dFalse)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "def _fix_dot_imports(not_consumed):"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Try to fix imports with multiple dots, by returning a dictionary"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    with the import names expanded. The function unflattens root imports,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    like \u0027xml\u0027 (when we have both \u0027xml.etree\u0027 and \u0027xml.sax\u0027), to \u0027xml.etree\u0027"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    and \u0027xml.sax\u0027 respectively."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    names \u003d {}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    for name, stmts in not_consumed.items():"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        if any("
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(stmt, astroid.AssignName)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(stmt.assign_type(), astroid.AugAssign)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            for stmt in stmts"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for stmt in stmts:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(stmt, (astroid.ImportFrom, astroid.Import)):"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            for imports in stmt.names:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                second_name \u003d None"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                import_module_name \u003d imports[0]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                if import_module_name \u003d\u003d \"*\":"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                    # In case of wildcard imports,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    # pick the name from inside the imported module."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                    second_name \u003d name"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                    name_matches_dotted_import \u003d False"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                        import_module_name.startswith(name)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                        and import_module_name.find(\".\") \u003e -1"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                        name_matches_dotted_import \u003d True"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                    if name_matches_dotted_import or name in imports:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Most likely something like \u0027xml.etree\u0027,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                        # which will appear in the .locals as \u0027xml\u0027."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Only pick the name if it wasn\u0027t consumed."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                        second_name \u003d import_module_name"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                if second_name and second_name not in names:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                    names[second_name] \u003d stmt"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    return sorted(names.items(), key\u003dlambda a: a[1].fromlineno)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "def _find_frame_imports(name, frame):"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    Detect imports in the frame, with the required"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    *name*. Such imports can be considered assignments."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    Returns True if an import for the given name was found."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    imports \u003d frame.nodes_of_class((astroid.Import, astroid.ImportFrom))"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    for import_node in imports:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        for import_name, import_alias in import_node.names:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            # If the import uses an alias, check only that."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            # Otherwise, check only the import name."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            if import_alias:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                if import_alias \u003d\u003d name:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                    return True"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            elif import_name and import_name \u003d\u003d name:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    return None"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "def _import_name_is_global(stmt, global_names):"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    for import_name, import_alias in stmt.names:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        # If the import uses an alias, check only that."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        # Otherwise, check only the import name."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        if import_alias:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            if import_alias in global_names:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        elif import_name in global_names:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "def _flattened_scope_names(iterator):"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    values \u003d (set(stmt.names) for stmt in iterator)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    return set(itertools.chain.from_iterable(values))"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "def _assigned_locally(name_node):"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    Checks if name_node has corresponding assign statement in same scope"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    assign_stmts \u003d name_node.scope().nodes_of_class(astroid.AssignName)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    return any(a.name \u003d\u003d name_node.name for a in assign_stmts)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "def _is_type_checking_import(node):"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    parent \u003d node.parent"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    if not isinstance(parent, astroid.If):"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    test \u003d parent.test"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    return test.as_string() in TYPING_TYPE_CHECKS_GUARDS"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "def _has_locals_call_after_node(stmt, scope):"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    skip_nodes \u003d ("
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        astroid.FunctionDef,"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        astroid.ClassDef,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        astroid.Import,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        astroid.ImportFrom,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    for call in scope.nodes_of_class(astroid.Call, skip_klass\u003dskip_nodes):"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        inferred \u003d utils.safe_infer(call.func)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            utils.is_builtin_object(inferred)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            and getattr(inferred, \"name\", None) \u003d\u003d \"locals\""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            if stmt.lineno \u003c call.lineno:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    return False"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "MSGS \u003d {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0601\": ("
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Using variable %r before assignment\","
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        \"used-before-assignment\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a local variable is accessed before its assignment.\","
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0602\": ("
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Undefined variable %r\","
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        \"undefined-variable\","
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an undefined variable is accessed.\","
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0603\": ("
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Undefined variable name %r in __all__\","
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        \"undefined-all-variable\","
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an undefined variable name is referenced in __all__.\","
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0604\": ("
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Invalid object %r in __all__, must contain only strings\","
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-all-object\","
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an invalid (non-string) object occurs in __all__.\","
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0611\": ("
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        \"No name %r in module %r\","
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        \"no-name-in-module\","
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a name cannot be found in a module.\","
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0601\": ("
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Global variable %r undefined at the module level\","
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        \"global-variable-undefined\","
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Used when a variable is defined through the \"global\" statement \u0027"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        \"but the variable is not defined in the module scope.\","
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0602\": ("
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Using global for %r but no assignment is done\","
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        \"global-variable-not-assigned\","
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Used when a variable is defined through the \"global\" statement \u0027"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        \"but no assignment to this variable is done.\","
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0603\": ("
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Using the global statement\",  # W0121"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        \"global-statement\","
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Used when you use the \"global\" statement to update a global \u0027"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        \"variable. Pylint just try to discourage this \""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        \"usage. That doesn\u0027t mean you cannot use it !\","
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0604\": ("
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Using the global statement at the module level\",  # W0103"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        \"global-at-module-level\","
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Used when you use the \"global\" statement at the module level \u0027"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        \"since it has no effect\","
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0611\": ("
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unused %s\","
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-import\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an imported module or variable is not used.\","
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0612\": ("
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unused variable %r\","
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-variable\","
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a variable is defined but not used.\","
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0613\": ("
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unused argument %r\","
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-argument\","
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a function or method argument is not used.\","
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0614\": ("
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unused import %s from wildcard import\","
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-wildcard-import\","
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an imported module or variable is not used from a \""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        \"`\u0027from X import *\u0027` style import.\","
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0621\": ("
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Redefining name %r from outer scope (line %s)\","
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        \"redefined-outer-name\","
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a variable\u0027s name hides a name defined in the outer scope.\","
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0622\": ("
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Redefining built-in %r\","
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        \"redefined-builtin\","
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a variable or function override a built-in.\","
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0623\": ("
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Redefining name %r from %s in exception handler\","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        \"redefine-in-handler\","
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an exception handler assigns the exception to an existing name\","
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0631\": ("
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Using possibly undefined loop variable %r\","
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        \"undefined-loop-variable\","
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a loop variable (i.e. defined by a for loop or \""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        \"a list comprehension or a generator expression) is used outside \""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        \"the loop.\","
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0632\": ("
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Possible unbalanced tuple unpacking with \""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        \"sequence%s: \""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        \"left side has %d label(s), right side has %d value(s)\","
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unbalanced-tuple-unpacking\","
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when there is an unbalanced tuple unpacking in assignment\","
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        {\"old_names\": [(\"E0632\", \"old-unbalanced-tuple-unpacking\")]},"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0633\": ("
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Attempting to unpack a non-sequence%s\","
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unpacking-non-sequence\","
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when something which is not \""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        \"a sequence is used in an unpack assignment\","
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        {\"old_names\": [(\"W0633\", \"old-unpacking-non-sequence\")]},"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0640\": ("
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Cell variable %s defined in loop\","
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        \"cell-var-from-loop\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        \"A variable used in a closure is defined in a loop. \""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        \"This will result in all closures using the same value for \""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        \"the closed-over variable.\","
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0641\": ("
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Possibly unused variable %r\","
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        \"possibly-unused-variable\","
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a variable is defined but might not be used. \""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        \"The possibility comes from the fact that locals() might be used, \""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        \"which could consume or not the said variable\","
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    \"W0642\": ("
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Invalid assignment to %s in method\","
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        \"self-cls-assignment\","
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Invalid assignment to self or cls in instance or class method \""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        \"respectively.\","
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "ScopeConsumer \u003d collections.namedtuple("
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    \"ScopeConsumer\", \"to_consume consumed scope_type\""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "class NamesConsumer:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    A simple class to handle consumed, to consume and scope type info of node locals"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, node, scope_type):"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        self._atomic \u003d ScopeConsumer(copy.copy(node.locals), {}, scope_type)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    def __repr__(self):"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        msg \u003d \"\\nto_consume : {:s}\\n\".format("
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "            \", \".join("
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "                ["
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"{}-\u003e{}\".format(key, val)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "                    for key, val in self._atomic.to_consume.items()"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "                ]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        msg +\u003d \"consumed : {:s}\\n\".format("
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            \", \".join("
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "                ["
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"{}-\u003e{}\".format(key, val)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "                    for key, val in self._atomic.consumed.items()"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "                ]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        msg +\u003d \"scope_type : {:s}\\n\".format(self._atomic.scope_type)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        return msg"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    def __iter__(self):"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        return iter(self._atomic)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "    @property"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    def to_consume(self):"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._atomic.to_consume"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    @property"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    def consumed(self):"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._atomic.consumed"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    @property"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    def scope_type(self):"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        return self._atomic.scope_type"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "    def mark_as_consumed(self, name, new_node):"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        Mark the name as consumed and delete it from"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        the to_consume dictionary"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        self.consumed[name] \u003d new_node"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        del self.to_consume[name]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    def get_next_to_consume(self, node):"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        # Get the definition of `node` from this scope"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d node.name"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        parent_node \u003d node.parent"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        found_node \u003d self.to_consume.get(name)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "            found_node"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(parent_node, astroid.Assign)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            and parent_node \u003d\u003d found_node[0].parent"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "            lhs \u003d found_node[0].parent.targets[0]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "            if lhs.name \u003d\u003d name:  # this name is defined in this very statement"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "                found_node \u003d None"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "            found_node"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "            and isinstance(parent_node, astroid.For)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "            and parent_node.iter \u003d\u003d node"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "            and parent_node.target in found_node"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "            found_node \u003d None"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        return found_node"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dtoo-many-public-methods"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "class VariablesChecker(BaseChecker):"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"checks for"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    * unused variables / imports"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "    * undefined variables"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "    * redefinition of variable from builtins or from an outer scope"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "    * use of variable before assignment"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    * __all__ consistency"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "    * self/cls assignment"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d IAstroidChecker"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d \"variables\""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d MSGS"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    priority \u003d -1"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ("
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "            \"init-import\","
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": 0,"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Tells whether we should check for unused import in \""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "                \"__init__ files.\","
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dummy-variables-rgx\","
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": \"_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\","
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"regexp\","
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cregexp\u003e\","
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"A regular expression matching the name of dummy \""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "                \"variables (i.e. expected to not be used).\","
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            \"additional-builtins\","
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (),"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003ccomma separated list\u003e\","
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of additional names supposed to be defined in \""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "                \"builtins. Remember that you should avoid defining new builtins \""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "                \"when possible.\","
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "            \"callbacks\","
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": (\"cb_\", \"_cb\"),"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003ccallbacks\u003e\","
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of strings which can identify a callback \""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "                \"function by name. A callback name must start or \""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "                \"end with one of those strings.\","
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "            \"redefining-builtins-modules\","
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": ("
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"six.moves\","
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"past.builtins\","
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"future.builtins\","
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"builtins\","
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"io\","
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"csv\","
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003ccomma separated list\u003e\","
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"List of qualified module names which can have objects \""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "                \"that can redefine builtins.\","
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "            \"ignored-argument-names\","
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": IGNORED_ARGUMENT_NAMES,"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"regexp\","
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cregexp\u003e\","
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Argument names that match this expression will be \""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                \"ignored. Default to name with leading underscore.\","
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "            \"allow-global-unused-variables\","
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "                \"default\": True,"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "                \"type\": \"yn\","
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "                \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "                \"help\": \"Tells whether unused global variables should be treated as a violation.\","
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            },"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, linter\u003dNone):"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "        BaseChecker.__init__(self, linter)"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume \u003d ("
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "            None  # list of tuples: (to_consume:dict, consumed:dict, scope_type:str)"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        self._checking_mod_attr \u003d None"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        self._loop_variables \u003d []"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        self._type_annotation_names \u003d []"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "        self._postponed_evaluation_enabled \u003d False"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"redefined-outer-name\")"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_for(self, node):"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        assigned_to \u003d ["
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "            var.name for var in node.target.nodes_of_class(astroid.AssignName)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "        # Only check variables that are used"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        dummy_rgx \u003d self.config.dummy_variables_rgx"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "        assigned_to \u003d [var for var in assigned_to if not dummy_rgx.match(var)]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        for variable in assigned_to:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            for outer_for, outer_variables in self._loop_variables:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "                if variable in outer_variables and not in_for_else_branch("
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "                    outer_for, node"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"redefined-outer-name\","
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                        args\u003d(variable, outer_for.fromlineno),"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "                        node\u003dnode,"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "        self._loop_variables.append((node, assigned_to))"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"redefined-outer-name\")"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_for(self, node):"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        self._loop_variables.pop()"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "        self._store_type_annotation_names(node)"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_module(self, node):"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit module : update consumption analysis variable"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        checks globals doesn\u0027t overrides builtins"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume \u003d [NamesConsumer(node, \"module\")]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        self._postponed_evaluation_enabled \u003d is_postponed_evaluation_enabled(node)"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, stmts in node.locals.items():"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "            if utils.is_builtin(name) and not utils.is_inside_except(stmts[0]):"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "                if self._should_ignore_redefined_builtin(stmts[0]) or name \u003d\u003d \"__doc__\":"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"redefined-builtin\", args\u003dname, node\u003dstmts[0])"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages("
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-import\","
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-wildcard-import\","
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "        \"redefined-builtin\","
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        \"undefined-all-variable\","
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        \"invalid-all-object\","
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unused-variable\","
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_module(self, node):"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"leave module: check globals"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        assert len(self._to_consume) \u003d\u003d 1"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_metaclasses(node)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "        not_consumed \u003d self._to_consume.pop().to_consume"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        # attempt to check for __all__ if defined"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        if \"__all__\" in node.locals:"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_all(node, not_consumed)"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        # check for unused globals"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_globals(not_consumed)"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        # don\u0027t check unused imports in __init__ files"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self.config.init_import and node.package:"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_imports(not_consumed)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_classdef(self, node):"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit class: update consumption analysis variable"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.append(NamesConsumer(node, \"class\"))"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_classdef(self, _):"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"leave class: update consumption analysis variable"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        # do not check for not used locals here (no sense)"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.pop()"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_lambda(self, node):"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit lambda: update consumption analysis variable"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.append(NamesConsumer(node, \"lambda\"))"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_lambda(self, _):"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"leave lambda: update consumption analysis variable"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "        # do not check for not used locals here"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.pop()"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_generatorexp(self, node):"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit genexpr: update consumption analysis variable"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.append(NamesConsumer(node, \"comprehension\"))"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_generatorexp(self, _):"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"leave genexpr: update consumption analysis variable"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "        # do not check for not used locals here"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.pop()"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_dictcomp(self, node):"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit dictcomp: update consumption analysis variable"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.append(NamesConsumer(node, \"comprehension\"))"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_dictcomp(self, _):"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"leave dictcomp: update consumption analysis variable"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        # do not check for not used locals here"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.pop()"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_setcomp(self, node):"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit setcomp: update consumption analysis variable"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.append(NamesConsumer(node, \"comprehension\"))"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_setcomp(self, _):"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"leave setcomp: update consumption analysis variable"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "        # do not check for not used locals here"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.pop()"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_functiondef(self, node):"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit function: update consumption analysis variable and check locals"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.append(NamesConsumer(node, \"function\"))"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        if not ("
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "            self.linter.is_message_enabled(\"redefined-outer-name\")"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "            or self.linter.is_message_enabled(\"redefined-builtin\")"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        globs \u003d node.root().globals"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, stmt in node.items():"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "            if utils.is_inside_except(stmt):"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "            if name in globs and not isinstance(stmt, astroid.Global):"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "                definition \u003d globs[name][0]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(definition, astroid.ImportFrom)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "                    and definition.modname \u003d\u003d FUTURE"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "                    # It is a __future__ directive, not a symbol."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "                # Do not take in account redefined names for the purpose"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "                # of type checking.:"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "                if any("
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(definition.parent, astroid.If)"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "                    and definition.parent.test.as_string() in TYPING_TYPE_CHECKS_GUARDS"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "                    for definition in globs[name]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "                line \u003d definition.fromlineno"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "                if not self._is_name_ignored(stmt, name):"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"redefined-outer-name\", args\u003d(name, line), node\u003dstmt"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "            elif utils.is_builtin(name) and not self._should_ignore_redefined_builtin("
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "                stmt"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "                # do not print Redefining builtin for additional builtins"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"redefined-builtin\", args\u003dname, node\u003dstmt)"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_functiondef(self, node):"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"leave function: check function\u0027s locals are consumed\"\"\""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_metaclasses(node)"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.type_comment_returns:"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "            self._store_type_annotation_node(node.type_comment_returns)"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "        if node.type_comment_args:"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "            for argument_annotation in node.type_comment_args:"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "                self._store_type_annotation_node(argument_annotation)"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        not_consumed \u003d self._to_consume.pop().to_consume"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "        if not ("
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "            self.linter.is_message_enabled(\"unused-variable\")"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "            or self.linter.is_message_enabled(\"possibly-unused-variable\")"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "            or self.linter.is_message_enabled(\"unused-argument\")"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t check arguments of function which are only raising an exception."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "        if utils.is_error(node):"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t check arguments of abstract methods or within an interface."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "        is_method \u003d node.is_method()"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_method and node.is_abstract():"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "        global_names \u003d _flattened_scope_names(node.nodes_of_class(astroid.Global))"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "        nonlocal_names \u003d _flattened_scope_names(node.nodes_of_class(astroid.Nonlocal))"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, stmts in not_consumed.items():"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_is_unused(name, node, stmts[0], global_names, nonlocal_names)"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "    visit_asyncfunctiondef \u003d visit_functiondef"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "    leave_asyncfunctiondef \u003d leave_functiondef"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages("
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "        \"global-variable-undefined\","
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "        \"global-variable-not-assigned\","
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "        \"global-statement\","
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "        \"global-at-module-level\","
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        \"redefined-builtin\","
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_global(self, node):"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check names imported exists in the global scope\"\"\""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "        frame \u003d node.frame()"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(frame, astroid.Module):"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"global-at-module-level\", node\u003dnode)"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d frame.root()"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        default_message \u003d True"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "        locals_ \u003d node.scope().locals"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "        for name in node.names:"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "                assign_nodes \u003d module.getattr(name)"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.NotFoundError:"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "                # unassigned global, skip"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "                assign_nodes \u003d []"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "            not_defined_locally_by_import \u003d not any("
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(local, astroid.node_classes.Import)"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "                for local in locals_.get(name, ())"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "            if not assign_nodes and not_defined_locally_by_import:"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"global-variable-not-assigned\", args\u003dname, node\u003dnode)"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "                default_message \u003d False"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "            for anode in assign_nodes:"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(anode, astroid.AssignName)"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "                    and anode.name in module.special_attributes"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"redefined-builtin\", args\u003dname, node\u003dnode)"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "                if anode.frame() is module:"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "                    # module level assignment"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "                if not_defined_locally_by_import:"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "                    # global undefined at the module scope"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"global-variable-undefined\", args\u003dname, node\u003dnode)"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "                    default_message \u003d False"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "        if default_message:"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"global-statement\", node\u003dnode)"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assignname(self, node):"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.assign_type(), astroid.AugAssign):"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "            self.visit_name(node)"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_delname(self, node):"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "        self.visit_name(node)"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(*MSGS)"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_name(self, node):"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that a name is defined if the current scope and doesn\u0027t"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "        redefine a built-in"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "        stmt \u003d node.statement()"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "        if stmt.fromlineno is None:"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "            # name node from an astroid built from live code, skip"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "            assert not stmt.root().file.endswith(\".py\")"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d node.name"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "        frame \u003d stmt.scope()"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "        # if the name node is used as a function default argument\u0027s value or as"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "        # a decorator, then start from the parent frame of the function instead"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "        # of the function frame - and thus open an inner class scope"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "            utils.is_default_argument(node)"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "            or utils.is_func_decorator(node)"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "            or utils.is_ancestor_name(frame, node)"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "            start_index \u003d len(self._to_consume) - 2"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "            start_index \u003d len(self._to_consume) - 1"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "        # iterates through parent scopes, from the inner to the outer"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "        base_scope_type \u003d self._to_consume[start_index].scope_type"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "        # pylint: disable\u003dtoo-many-nested-blocks; refactoring this block is a pain."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "        for i in range(start_index, -1, -1):"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "            current_consumer \u003d self._to_consume[i]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "            # if the current scope is a class scope but it\u0027s not the inner"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "            # scope, ignore it. This prevents to access this scope instead of"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "            # the globals one in function members when there are some common"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "            # names. The only exception is when the starting scope is a"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "            # comprehension and its direct outer scope is a class"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "                current_consumer.scope_type \u003d\u003d \"class\""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "                and i !\u003d start_index"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "                and not (base_scope_type \u003d\u003d \"comprehension\" and i \u003d\u003d start_index - 1)"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "                if self._ignore_class_scope(node):"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "            # the name has already been consumed, only check it\u0027s not a loop"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "            # variable used outside the loop"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "            # avoid the case where there are homonyms inside function scope and"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "            #  comprehension current scope (avoid bug #1731)"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "            if name in current_consumer.consumed and not ("
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "                current_consumer.scope_type \u003d\u003d \"comprehension\""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "                and self._has_homonym_in_upper_function_scope(node, i)"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "                defnode \u003d utils.assign_parent(current_consumer.consumed[name][0])"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_late_binding_closure(node, defnode)"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "                self._loopvar_name(node, name)"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "            found_node \u003d current_consumer.get_next_to_consume(node)"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "            if found_node is None:"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "            # checks for use before assignment"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "            defnode \u003d utils.assign_parent(current_consumer.to_consume[name][0])"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "            if defnode is not None:"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_late_binding_closure(node, defnode)"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "                defstmt \u003d defnode.statement()"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "                defframe \u003d defstmt.frame()"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "                # The class reuses itself in the class scope."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "                recursive_klass \u003d ("
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "                    frame is defframe"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "                    and defframe.parent_of(node)"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "                    and isinstance(defframe, astroid.ClassDef)"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "                    and node.name \u003d\u003d defframe.name"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "                    recursive_klass"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "                    and utils.is_inside_lambda(node)"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "                    and ("
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "                        not utils.is_default_argument(node)"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "                        or node.scope().parent.scope() is not defframe"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Self-referential class references are fine in lambda\u0027s --"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "                    # As long as they are not part of the default argument directly"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "                    # under the scope of the parent self-referring class."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Example of valid default argument:"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "                    # class MyName3:"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "                    #     myattr \u003d 1"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "                    #     mylambda3 \u003d lambda: lambda a\u003dMyName3: a"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Example of invalid default argument:"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "                    # class MyName4:"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "                    #     myattr \u003d 1"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "                    #     mylambda4 \u003d lambda a\u003dMyName4: lambda: a"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "                    # If the above conditional is True,"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "                    # there is no possibility of undefined-variable"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Also do not consume class name"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "                    # (since consuming blocks subsequent checks)"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "                    # -- quit"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "                    maybee0601,"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "                    annotation_return,"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "                    use_outer_definition,"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "                ) \u003d self._is_variable_violation("
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "                    node,"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "                    name,"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "                    defnode,"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "                    stmt,"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "                    defstmt,"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "                    frame,"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "                    defframe,"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "                    base_scope_type,"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "                    recursive_klass,"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "                if use_outer_definition:"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "                    maybee0601"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "                    and not utils.is_defined_before(node)"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "                    and not astroid.are_exclusive(stmt, defstmt, (\"NameError\",))"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Used and defined in the same place, e.g `x +\u003d 1` and `del x`"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "                    defined_by_stmt \u003d defstmt is stmt and isinstance("
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "                        node, (astroid.DelName, astroid.AssignName)"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ("
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "                        recursive_klass"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "                        or defined_by_stmt"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "                        or annotation_return"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "                        or isinstance(defstmt, astroid.Delete)"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "                        if not utils.node_ignores_exception(node, NameError):"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "                            # Handle postponed evaluation of annotations"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "                            if not ("
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "                                self._postponed_evaluation_enabled"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "                                and isinstance("
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "                                    stmt,"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "                                    ("
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "                                        astroid.AnnAssign,"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "                                        astroid.FunctionDef,"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "                                        astroid.Arguments,"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "                                    ),"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "                                )"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "                                and name in node.root().locals"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "                            ):"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "                                self.add_message("
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \"undefined-variable\", args\u003dname, node\u003dnode"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "                                )"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "                    elif base_scope_type !\u003d \"lambda\":"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "                        # E0601 may *not* occurs in lambda scope."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Handle postponed evaluation of annotations"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "                        if not ("
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "                            self._postponed_evaluation_enabled"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "                            and isinstance("
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "                                stmt, (astroid.AnnAssign, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "                        ):"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"used-before-assignment\", args\u003dname, node\u003dnode"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "                    elif base_scope_type \u003d\u003d \"lambda\":"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                        # E0601 can occur in class-level scope in lambdas, as in"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                        # the following example:"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "                        #   class A:"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "                        #      x \u003d lambda attr: f + attr"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "                        #      f \u003d 42"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "                        if isinstance(frame, astroid.ClassDef) and name in frame.locals:"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "                            if isinstance(node.parent, astroid.Arguments):"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "                                if stmt.fromlineno \u003c\u003d defstmt.fromlineno:"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "                                    # Doing the following is fine:"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "                                    #   class A:"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                                    #      x \u003d 42"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                                    #      y \u003d lambda attr\u003dx: attr"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "                                    self.add_message("
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \"used-before-assignment\", args\u003dname, node\u003dnode"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "                                    )"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "                            else:"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "                                self.add_message("
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \"undefined-variable\", args\u003dname, node\u003dnode"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "                                )"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "                        elif current_consumer.scope_type \u003d\u003d \"lambda\":"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message(\"undefined-variable\", node\u003dnode, args\u003dname)"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "            current_consumer.mark_as_consumed(name, found_node)"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "            # check it\u0027s not a loop variable used outside the loop"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "            self._loopvar_name(node, name)"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "            break"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "            # we have not found the name, if it isn\u0027t a builtin, that\u0027s an"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "            # undefined name !"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "            if not ("
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "                name in astroid.Module.scope_attrs"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "                or utils.is_builtin(name)"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                or name in self.config.additional_builtins"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "                if not utils.node_ignores_exception(node, NameError):"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"undefined-variable\", args\u003dname, node\u003dnode)"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"no-name-in-module\")"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_import(self, node):"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check modules attribute accesses\"\"\""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._analyse_fallback_blocks and utils.is_from_fallback_block(node):"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "            # No need to verify this, since ImportError is already"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "            # handled by the client code."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, _ in node.names:"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            parts \u003d name.split(\".\")"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "                module \u003d next(_infer_name_module(node, parts[0]))"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.ResolveError:"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(module, astroid.Module):"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_module_attrs(node, module, parts[1:])"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages(\"no-name-in-module\")"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_importfrom(self, node):"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check modules attribute accesses\"\"\""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self._analyse_fallback_blocks and utils.is_from_fallback_block(node):"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "            # No need to verify this, since ImportError is already"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "            # handled by the client code."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "        name_parts \u003d node.modname.split(\".\")"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "            module \u003d node.do_import_module(name_parts[0])"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.AstroidBuildingException:"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d self._check_module_attrs(node, module, name_parts[1:])"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "        if not module:"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, _ in node.names:"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "            if name \u003d\u003d \"*\":"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_module_attrs(node, module, name.split(\".\"))"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "    @utils.check_messages("
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unbalanced-tuple-unpacking\", \"unpacking-non-sequence\", \"self-cls-assignment\""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_assign(self, node):"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check unbalanced tuple unpacking for assignments"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "        and unpacking non-sequences as well as in case self/cls"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "        get assigned."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "        self._check_self_cls_assign(node)"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node.targets[0], (astroid.Tuple, astroid.List)):"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "        targets \u003d node.targets[0].itered()"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d utils.safe_infer(node.value)"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "            if inferred is not None:"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_unpacking(inferred, node, targets)"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "    # listcomp have now also their scope"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_listcomp(self, node):"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"visit dictcomp: update consumption analysis variable"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.append(NamesConsumer(node, \"comprehension\"))"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_listcomp(self, _):"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"leave dictcomp: update consumption analysis variable"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        # do not check for not used locals here"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "        self._to_consume.pop()"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_assign(self, node):"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "        self._store_type_annotation_names(node)"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "    def leave_with(self, node):"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "        self._store_type_annotation_names(node)"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "    def visit_arguments(self, node):"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "        for annotation in node.type_comment_args:"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "            self._store_type_annotation_node(annotation)"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "    # Relying on other checker\u0027s options, which might not have been initialized yet."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "    @decorators.cachedproperty"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "    def _analyse_fallback_blocks(self):"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "        return get_global_option(self, \"analyse-fallback-blocks\", default\u003dFalse)"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "    @decorators.cachedproperty"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "    def _ignored_modules(self):"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "        return get_global_option(self, \"ignored-modules\", default\u003d[])"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "    @decorators.cachedproperty"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "    def _allow_global_unused_variables(self):"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "        return get_global_option(self, \"allow-global-unused-variables\", default\u003dTrue)"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "    def _defined_in_function_definition(node, frame):"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "        in_annotation_or_default \u003d False"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(frame, astroid.FunctionDef) and node.statement() is frame:"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "            in_annotation_or_default \u003d ("
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "                node in frame.args.annotations"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "                or node in frame.args.kwonlyargs_annotations"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "                or node is frame.args.varargannotation"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "                or node is frame.args.kwargannotation"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "            ) or frame.args.parent_of(node)"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "        return in_annotation_or_default"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_variable_violation("
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "        node,"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "        name,"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "        defnode,"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "        stmt,"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "        defstmt,"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "        frame,"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "        defframe,"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "        base_scope_type,"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "        recursive_klass,"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "    ):"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "        # pylint: disable\u003dtoo-many-nested-blocks"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "        # node: Node to check for violation"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "        # name: name of node to check violation for"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "        # frame: Scope of statement of node"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "        # base_scope_type: local scope type"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "        maybee0601 \u003d True"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "        annotation_return \u003d False"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "        use_outer_definition \u003d False"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "        if frame is not defframe:"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "            maybee0601 \u003d _detect_global_scope(node, frame, defframe)"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "        elif defframe.parent is None:"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "            # we are at the module level, check the name is not"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "            # defined in builtins"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "            if name in defframe.scope_attrs or astroid.builtin_lookup(name)[1]:"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "                maybee0601 \u003d False"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "            # we are in a local scope, check the name is not"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "            # defined in global or builtin scope"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "            # skip this lookup if name is assigned later in function scope/lambda"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "            # Note: the node.frame() is not the same as the `frame` argument which is"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "            # equivalent to frame.statement().scope()"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "            forbid_lookup \u003d ("
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(frame, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "                or isinstance(node.frame(), astroid.Lambda)"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "            ) and _assigned_locally(node)"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "            if not forbid_lookup and defframe.root().lookup(name)[1]:"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "                maybee0601 \u003d False"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "                use_outer_definition \u003d stmt \u003d\u003d defstmt and not isinstance("
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "                    defnode, astroid.node_classes.Comprehension"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "            # check if we have a nonlocal"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "            elif name in defframe.locals:"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "                maybee0601 \u003d not any("
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(child, astroid.Nonlocal) and name in child.names"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "                    for child in defframe.get_children()"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "            base_scope_type \u003d\u003d \"lambda\""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(frame, astroid.ClassDef)"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "            and name in frame.locals"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "            # This rule verifies that if the definition node of the"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "            # checked name is an Arguments node and if the name"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "            # is used a default value in the arguments defaults"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "            # and the actual definition of the variable label"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "            # is happening before the Arguments definition."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "            #"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "            # bar \u003d None"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "            # foo \u003d lambda bar\u003dbar: bar"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "            #"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "            # In this case, maybee0601 should be False, otherwise"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "            # it should be True."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "            maybee0601 \u003d not ("
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(defnode, astroid.Arguments)"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "                and node in defnode.defaults"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "                and frame.locals[name][0].fromlineno \u003c defstmt.fromlineno"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "        elif isinstance(defframe, astroid.ClassDef) and isinstance("
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "            frame, astroid.FunctionDef"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "            # Special rule for function return annotations,"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "            # which uses the same name as the class where"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "            # the function lives."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "            if node is frame.returns and defframe.parent_of(frame.returns):"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "                maybee0601 \u003d annotation_return \u003d True"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "                maybee0601"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "                and defframe.name in defframe.locals"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "                and defframe.locals[name][0].lineno \u003c frame.lineno"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "                # Detect class assignments with the same"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "                # name as the class. In this case, no warning"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "                # should be raised."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "                maybee0601 \u003d False"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(node.parent, astroid.Arguments):"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "                maybee0601 \u003d stmt.fromlineno \u003c\u003d defstmt.fromlineno"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "        elif recursive_klass:"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "            maybee0601 \u003d True"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "            maybee0601 \u003d maybee0601 and stmt.fromlineno \u003c\u003d defstmt.fromlineno"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "            if maybee0601 and stmt.fromlineno \u003d\u003d defstmt.fromlineno:"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(defframe, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "                    and frame is defframe"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "                    and defframe.parent_of(node)"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "                    and stmt is not defstmt"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Single statement function, with the statement on the"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "                    # same line as the function definition"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "                    maybee0601 \u003d False"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "            # Look for type checking definitions inside a type checking guard."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(defstmt, (astroid.Import, astroid.ImportFrom)):"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "                defstmt_parent \u003d defstmt.parent"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(defstmt_parent, astroid.If)"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "                    and defstmt_parent.test.as_string() in TYPING_TYPE_CHECKS_GUARDS"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "                    # Exempt those definitions that are used inside the type checking"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "                    # guard or that are defined in both type checking guard branches."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "                    used_in_branch \u003d defstmt_parent.parent_of(node)"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "                    defined_in_or_else \u003d False"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "                    for definition in defstmt_parent.orelse:"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "                        if isinstance(definition, astroid.Assign):"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "                            defined_in_or_else \u003d any("
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "                                target.name \u003d\u003d name for target in definition.targets"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "                            if defined_in_or_else:"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "                                break"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not used_in_branch and not defined_in_or_else:"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "                        maybee0601 \u003d True"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "        return maybee0601, annotation_return, use_outer_definition"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "    def _ignore_class_scope(self, node):"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "        Return True if the node is in a local class scope, as an assignment."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "        :param node: Node considered"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "        :type node: astroid.Node"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "        :return: True if the node is in a local class scope, as an assignment. False otherwise."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "        :rtype: bool"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "        # Detect if we are in a local class scope, as an assignment."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "        # For example, the following is fair game."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "        #"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "        # class A:"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "        #    b \u003d 1"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "        #    c \u003d lambda b\u003db: b * b"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "        #"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "        # class B:"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "        #    tp \u003d 1"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "        #    def func(self, arg: tp):"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "        #        ..."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "        # class C:"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "        #    tp \u003d 2"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "        #    def func(self, arg\u003dtp):"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "        #        ..."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d node.name"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "        frame \u003d node.statement().scope()"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "        in_annotation_or_default \u003d self._defined_in_function_definition(node, frame)"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "        if in_annotation_or_default:"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "            frame_locals \u003d frame.parent.scope().locals"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "            frame_locals \u003d frame.locals"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "        return not ("
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "            (isinstance(frame, astroid.ClassDef) or in_annotation_or_default)"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "            and name in frame_locals"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "    def _loopvar_name(self, node, name):"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "        # filter variables according to node\u0027s scope"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self.linter.is_message_enabled(\"undefined-loop-variable\"):"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "        astmts \u003d [stmt for stmt in node.lookup(name)[1] if hasattr(stmt, \"assign_type\")]"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "        # If this variable usage exists inside a function definition"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "        # that exists in the same loop,"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "        # the usage is safe because the function will not be defined either if"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "        # the variable is not defined."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "        scope \u003d node.scope()"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(scope, astroid.FunctionDef) and any("
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "            asmt.statement().parent_of(scope) for asmt in astmts"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "        # filter variables according their respective scope test is_statement"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "        # and parent to avoid #74747. This is not a total fix, which would"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "        # introduce a mechanism similar to special attribute lookup in"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "        # modules. Also, in order to get correct inference in this case, the"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "        # scope lookup rules would need to be changed to return the initial"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "        # assignment (which does not exist in code per se) as well as any later"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "        # modifications."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "            not astmts"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "            or (astmts[0].is_statement or astmts[0].parent)"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "            and astmts[0].statement().parent_of(node)"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "            _astmts \u003d []"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "            _astmts \u003d astmts[:1]"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "        for i, stmt in enumerate(astmts[1:]):"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "            if astmts[i].statement().parent_of(stmt) and not in_for_else_branch("
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "                astmts[i].statement(), stmt"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "            _astmts.append(stmt)"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "        astmts \u003d _astmts"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "        if len(astmts) !\u003d 1:"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "        assign \u003d astmts[0].assign_type()"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "        if not ("
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance("
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "                assign, (astroid.For, astroid.Comprehension, astroid.GeneratorExp)"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "            and assign.statement() is not node.statement()"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "        # For functions we can do more by inferring the length of the itered object"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(assign, astroid.For):"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"undefined-loop-variable\", args\u003dname, node\u003dnode)"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "            inferred \u003d next(assign.iter.infer())"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.InferenceError:"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"undefined-loop-variable\", args\u003dname, node\u003dnode)"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "            if ("
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(inferred, astroid.Instance)"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "                and inferred.qname() \u003d\u003d BUILTIN_RANGE"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "                # Consider range() objects safe, even if they might not yield any results."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "            # Consider sequences."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "            sequences \u003d ("
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.List,"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.Tuple,"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.Dict,"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "                astroid.Set,"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "                objects.FrozenSet,"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(inferred, sequences):"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"undefined-loop-variable\", args\u003dname, node\u003dnode)"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "            elements \u003d getattr(inferred, \"elts\", getattr(inferred, \"items\", []))"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "            if not elements:"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"undefined-loop-variable\", args\u003dname, node\u003dnode)"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_is_unused(self, name, node, stmt, global_names, nonlocal_names):"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "        # pylint: disable\u003dtoo-many-branches"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore some special names specified by user configuration."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._is_name_ignored(stmt, name):"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore names that were added dynamically to the Function scope"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(node, astroid.FunctionDef)"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "            and name \u003d\u003d \"__class__\""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "            and len(node.locals[\"__class__\"]) \u003d\u003d 1"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(node.locals[\"__class__\"][0], astroid.ClassDef)"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "        # Ignore names imported by the global statement."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(stmt, (astroid.Global, astroid.Import, astroid.ImportFrom)):"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "            # Detect imports, assigned to global statements."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "            if global_names and _import_name_is_global(stmt, global_names):"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "        argnames \u003d list("
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "            itertools.chain(node.argnames(), [arg.name for arg in node.args.kwonlyargs])"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "        # Care about functions with unknown argument (builtins)"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "        if name in argnames:"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_unused_arguments(name, node, stmt, argnames)"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "            if stmt.parent and isinstance("
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "                stmt.parent, (astroid.Assign, astroid.AnnAssign)"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "                if name in nonlocal_names:"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "            qname \u003d asname \u003d None"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(stmt, (astroid.Import, astroid.ImportFrom)):"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "                # Need the complete name, which we don\u0027t have in .locals."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "                if len(stmt.names) \u003e 1:"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "                    import_names \u003d next("
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "                        (names for names in stmt.names if name in names), None"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "                    import_names \u003d stmt.names[0]"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "                if import_names:"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                    qname, asname \u003d import_names"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "                    name \u003d asname or qname"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "            if _has_locals_call_after_node(stmt, node.scope()):"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "                message_name \u003d \"possibly-unused-variable\""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(stmt, astroid.Import):"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "                    if asname is not None:"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"%s imported as %s\" % (qname, asname)"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"import %s\" % name"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"unused-import\", args\u003dmsg, node\u003dstmt)"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(stmt, astroid.ImportFrom):"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "                    if asname is not None:"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"%s imported from %s as %s\" % ("
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "                            qname,"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "                            stmt.modname,"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "                            asname,"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"%s imported from %s\" % (name, stmt.modname)"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"unused-import\", args\u003dmsg, node\u003dstmt)"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "                message_name \u003d \"unused-variable\""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "            # Don\u0027t check function stubs created only for type information"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "            if utils.is_overload_stub(node):"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(message_name, args\u003dname, node\u003dstmt)"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "    def _is_name_ignored(self, stmt, name):"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "        authorized_rgx \u003d self.config.dummy_variables_rgx"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(stmt, astroid.AssignName)"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(stmt.parent, astroid.Arguments)"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "            or isinstance(stmt, astroid.Arguments)"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "            regex \u003d self.config.ignored_argument_names"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "            regex \u003d authorized_rgx"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "        return regex and regex.match(name)"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_unused_arguments(self, name, node, stmt, argnames):"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "        is_method \u003d node.is_method()"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "        klass \u003d node.parent.frame()"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_method and isinstance(klass, astroid.ClassDef):"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "            confidence \u003d ("
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "                INFERENCE if utils.has_known_bases(klass) else INFERENCE_FAILURE"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "            confidence \u003d HIGH"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_method:"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "            # Don\u0027t warn for the first argument of a (non static) method"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.type !\u003d \"staticmethod\" and name \u003d\u003d argnames[0]:"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "            # Don\u0027t warn for argument of an overridden method"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "            overridden \u003d overridden_method(klass, node.name)"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "            if overridden is not None and name in overridden.argnames():"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "            if node.name in utils.PYMETHODS and node.name not in ("
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "                \"__init__\","
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "                \"__new__\","
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "                return"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t check callback arguments"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "        if any("
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "            node.name.startswith(cb) or node.name.endswith(cb)"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "            for cb in self.config.callbacks"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t check arguments of singledispatch.register function."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "        if utils.is_registered_in_singledispatch_function(node):"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t check function stubs created only for type information"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "        if utils.is_overload_stub(node):"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t check protocol classes"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "        if utils.is_protocol_class(klass):"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "        self.add_message(\"unused-argument\", args\u003dname, node\u003dstmt, confidence\u003dconfidence)"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_late_binding_closure(self, node, assignment_node):"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "        def _is_direct_lambda_call():"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "            return ("
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "                isinstance(node_scope.parent, astroid.Call)"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "                and node_scope.parent.func is node_scope"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "        node_scope \u003d node.scope()"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(node_scope, (astroid.Lambda, astroid.FunctionDef)):"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(node.parent, astroid.Arguments):"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(assignment_node, astroid.Comprehension):"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "            if assignment_node.parent.parent_of(node.scope()):"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"cell-var-from-loop\", node\u003dnode, args\u003dnode.name)"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "            assign_scope \u003d assignment_node.scope()"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "            maybe_for \u003d assignment_node"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "            while not isinstance(maybe_for, astroid.For):"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "                if maybe_for is assign_scope:"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "                maybe_for \u003d maybe_for.parent"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "                if ("
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "                    maybe_for.parent_of(node_scope)"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "                    and not _is_direct_lambda_call()"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "                    and not isinstance(node_scope.statement(), astroid.Return)"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"cell-var-from-loop\", node\u003dnode, args\u003dnode.name)"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "    def _should_ignore_redefined_builtin(self, stmt):"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(stmt, astroid.ImportFrom):"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "            return False"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "        return stmt.modname in self.config.redefining_builtins_modules"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "    def _has_homonym_in_upper_function_scope(self, node, index):"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "        Return True if there is a node with the same name in the to_consume dict of an upper scope"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "        and if that scope is a function"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "        :param node: node to check for"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "        :type node: astroid.Node"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "        :param index: index of the current consumer inside self._to_consume"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "        :type index: int"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "        :return: True if there is a node with the same name in the to_consume dict of an upper scope"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "                 and if that scope is a function"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "        :rtype: bool"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "        for _consumer in self._to_consume[index - 1 :: -1]:"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "            if _consumer.scope_type \u003d\u003d \"function\" and node.name in _consumer.to_consume:"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "                return True"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "        return False"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "    def _store_type_annotation_node(self, type_annotation):"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Given a type annotation, store all the name nodes it refers to\"\"\""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(type_annotation, astroid.Name):"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "            self._type_annotation_names.append(type_annotation.name)"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(type_annotation, astroid.Subscript):"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(type_annotation.value, astroid.Attribute)"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(type_annotation.value.expr, astroid.Name)"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "            and type_annotation.value.expr.name \u003d\u003d TYPING_MODULE"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "            self._type_annotation_names.append(TYPING_MODULE)"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "        self._type_annotation_names.extend("
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "            annotation.name"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "            for annotation in type_annotation.nodes_of_class(astroid.Name)"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "    def _store_type_annotation_names(self, node):"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "        type_annotation \u003d node.type_annotation"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "        if not type_annotation:"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "        self._store_type_annotation_node(node.type_annotation)"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_self_cls_assign(self, node):"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check that self/cls don\u0027t get assigned\"\"\""
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "        assign_names \u003d {"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "            target.name"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "            for target in node.targets"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(target, astroid.AssignName)"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "        scope \u003d node.scope()"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "        nonlocals_with_same_name \u003d any("
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "            child"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "            for child in scope.body"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(child, astroid.Nonlocal) and assign_names \u0026 set(child.names)"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "        if nonlocals_with_same_name:"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "            scope \u003d node.scope().parent.scope()"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "        if not ("
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(scope, astroid.scoped_nodes.FunctionDef)"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "            and scope.is_method()"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "            and \"builtins.staticmethod\" not in scope.decoratornames()"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "        argument_names \u003d scope.argnames()"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "        if not argument_names:"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "        self_cls_name \u003d argument_names[0]"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "        target_assign_names \u003d ("
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "            target.name"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "            for target in node.targets"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(target, astroid.node_classes.AssignName)"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "        if self_cls_name in target_assign_names:"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"self-cls-assignment\", node\u003dnode, args\u003d(self_cls_name))"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_unpacking(self, inferred, node, targets):"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" Check for unbalanced tuple unpacking"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "        and unpacking non sequences."
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "        if utils.is_inside_abstract_class(node):"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "        if utils.is_comprehension(node):"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "        if inferred is astroid.Uninferable:"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "            isinstance(inferred.parent, astroid.Arguments)"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "            and isinstance(node.value, astroid.Name)"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "            and node.value.name \u003d\u003d inferred.parent.vararg"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "            # Variable-length argument, we can\u0027t determine the length."
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(inferred, (astroid.Tuple, astroid.List)):"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "            # attempt to check unpacking is properly balanced"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "            values \u003d inferred.itered()"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(targets) !\u003d len(values):"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "                # Check if we have starred nodes."
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "                if any(isinstance(target, astroid.Starred) for target in targets):"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "                    return"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"unbalanced-tuple-unpacking\","
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "                    node\u003dnode,"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "                    args\u003d("
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "                        _get_unpacking_extra_info(node, inferred),"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "                        len(targets),"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "                        len(values),"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "        # attempt to check unpacking may be possible (ie RHS is iterable)"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "        elif not utils.is_iterable(inferred):"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "                \"unpacking-non-sequence\","
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "                node\u003dnode,"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003d(_get_unpacking_extra_info(node, inferred),),"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_module_attrs(self, node, module, module_names):"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"check that module_names (list of string) are accessible through the"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "        given module"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": "        if the latest access name corresponds to a module, return it"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "        while module_names:"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d module_names.pop(0)"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "            if name \u003d\u003d \"__dict__\":"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "                module \u003d None"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "                break"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "                module \u003d next(module.getattr(name)[0].infer())"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "                if module is astroid.Uninferable:"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "                    return None"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.NotFoundError:"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "                if module.name in self._ignored_modules:"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "                    return None"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"no-name-in-module\", args\u003d(name, module.name), node\u003dnode"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "                return None"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.InferenceError:"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "                return None"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "        if module_names:"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "            modname \u003d module.name if module else \"__dict__\""
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "                \"no-name-in-module\", node\u003dnode, args\u003d(\".\".join(module_names), modname)"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "            return None"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(module, astroid.Module):"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": "            return module"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "        return None"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_all(self, node, not_consumed):"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "        assigned \u003d next(node.igetattr(\"__all__\"))"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "        if assigned is astroid.Uninferable:"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "        for elt in getattr(assigned, \"elts\", ()):"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": "                elt_name \u003d next(elt.infer())"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": "            except astroid.InferenceError:"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": "            if elt_name is astroid.Uninferable:"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "            if not elt_name.parent:"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": "            if not isinstance(elt_name, astroid.Const) or not isinstance("
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "                elt_name.value, str"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"invalid-all-object\", args\u003delt.as_string(), node\u003delt)"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": "            elt_name \u003d elt_name.value"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "            # If elt is in not_consumed, remove it from not_consumed"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "            if elt_name in not_consumed:"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": "                del not_consumed[elt_name]"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": "            if elt_name not in node.locals:"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": "                if not node.package:"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message("
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"undefined-all-variable\", args\u003d(elt_name,), node\u003delt"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": "                    basename \u003d os.path.splitext(node.file)[0]"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": "                    if os.path.basename(basename) \u003d\u003d \"__init__\":"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "                        name \u003d node.name + \".\" + elt_name"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": "                        try:"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "-"
        },
        "content": "                            modutils.file_from_modpath(name.split(\".\"))"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "-"
        },
        "content": "                        except ImportError:"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"undefined-all-variable\", args\u003d(elt_name,), node\u003delt"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "-"
        },
        "content": "                        except SyntaxError:"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "-"
        },
        "content": "                            # don\u0027t yield a syntax-error warning,"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": "                            # because it will be later yielded"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "-"
        },
        "content": "                            # when the file will be checked"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "-"
        },
        "content": "                            pass"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_globals(self, not_consumed):"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._allow_global_unused_variables:"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, nodes in not_consumed.items():"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": "            for node in nodes:"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"unused-variable\", args\u003d(name,), node\u003dnode)"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_imports(self, not_consumed):"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": "        local_names \u003d _fix_dot_imports(not_consumed)"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": "        checked \u003d set()"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "        for name, stmt in local_names:"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "-"
        },
        "content": "            for imports in stmt.names:"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "                real_name \u003d imported_name \u003d imports[0]"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": "                if imported_name \u003d\u003d \"*\":"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": "                    real_name \u003d name"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": "                as_name \u003d imports[1]"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": "                if real_name in checked:"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "                if name not in (real_name, as_name):"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": "                checked.add(real_name)"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "-"
        },
        "content": "                is_type_annotation_import \u003d ("
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "                    imported_name in self._type_annotation_names"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": "                    or as_name in self._type_annotation_names"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(stmt, astroid.Import) or ("
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "-"
        },
        "content": "                    isinstance(stmt, astroid.ImportFrom) and not stmt.modname"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "-"
        },
        "content": "                    if isinstance(stmt, astroid.ImportFrom) and SPECIAL_OBJ.search("
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": "                        imported_name"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": "                    ):"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Filter special objects (__doc__, __all__) etc.,"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": "                        # because they can be imported for exporting."
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": "                    if is_type_annotation_import:"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Most likely a typing import if it wasn\u0027t used so far."
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "-"
        },
        "content": "                    if as_name \u003d\u003d \"_\":"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": "                    if as_name is None:"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"import %s\" % imported_name"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"%s imported as %s\" % (imported_name, as_name)"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": "                    if not _is_type_checking_import(stmt):"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(\"unused-import\", args\u003dmsg, node\u003dstmt)"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": "                elif isinstance(stmt, astroid.ImportFrom) and stmt.modname !\u003d FUTURE:"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": "                    if SPECIAL_OBJ.search(imported_name):"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Filter special objects (__doc__, __all__) etc.,"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": "                        # because they can be imported for exporting."
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": "                    if _is_from_future_import(stmt, name):"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Check if the name is in fact loaded from a"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": "                        # __future__ import in another module."
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": "                    if is_type_annotation_import:"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Most likely a typing import if it wasn\u0027t used so far."
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": "                    if imported_name \u003d\u003d \"*\":"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(\"unused-wildcard-import\", args\u003dname, node\u003dstmt)"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": "                    else:"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": "                        if as_name is None:"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": "                            msg \u003d \"%s imported from %s\" % (imported_name, stmt.modname)"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": "                        else:"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "-"
        },
        "content": "                            fields \u003d (imported_name, stmt.modname, as_name)"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "-"
        },
        "content": "                            msg \u003d \"%s imported from %s as %s\" % fields"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "-"
        },
        "content": "                        if not _is_type_checking_import(stmt):"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message(\"unused-import\", args\u003dmsg, node\u003dstmt)"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "        del self._to_consume"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_metaclasses(self, node):"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" Update consumption analysis for metaclasses. \"\"\""
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": "        consumed \u003d []  # [(scope_locals, consumed_key)]"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": "        for child_node in node.get_children():"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(child_node, astroid.ClassDef):"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": "                consumed.extend(self._check_classdef_metaclasses(child_node, node))"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "        # Pop the consumed items, in order to avoid having"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": "        # unused-import and unused-variable false positives"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": "        for scope_locals, name in consumed:"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": "            scope_locals.pop(name, None)"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_classdef_metaclasses(self, klass, parent_node):"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": "        if not klass._metaclass:"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "            # Skip if this class doesn\u0027t use explicitly a metaclass, but inherits it from ancestors"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": "            return []"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": "        consumed \u003d []  # [(scope_locals, consumed_key)]"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": "        metaclass \u003d klass.metaclass()"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d None"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "-"
        },
        "content": "        if isinstance(klass._metaclass, astroid.Name):"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d klass._metaclass.name"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "        elif isinstance(klass._metaclass, astroid.Attribute) and klass._metaclass.expr:"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "            name \u003d klass._metaclass.expr.name"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "        elif metaclass:"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d metaclass.root().name"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": "        found \u003d None"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d METACLASS_NAME_TRANSFORMS.get(name, name)"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": "        if name:"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": "            # check enclosing scopes starting from most local"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "-"
        },
        "content": "            for scope_locals, _, _ in self._to_consume[::-1]:"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": "                found \u003d scope_locals.get(name)"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": "                if found:"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": "                    consumed.append((scope_locals, name))"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": "                    break"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": "        if found is None and not metaclass:"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d None"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": "            if isinstance(klass._metaclass, astroid.Name):"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": "                name \u003d klass._metaclass.name"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "            elif ("
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "                isinstance(klass._metaclass, astroid.Attribute)"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "                and klass._metaclass.expr"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "            ):"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "                name \u003d klass._metaclass.expr.name"
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "-"
        },
        "content": "            if name is not None:"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "-"
        },
        "content": "                if not ("
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "-"
        },
        "content": "                    name in astroid.Module.scope_attrs"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "-"
        },
        "content": "                    or utils.is_builtin(name)"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "-"
        },
        "content": "                    or name in self.config.additional_builtins"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "-"
        },
        "content": "                    or name in parent_node.locals"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "-"
        },
        "content": "                ):"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.add_message(\"undefined-variable\", node\u003dklass, args\u003d(name,))"
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "-"
        },
        "content": "        return consumed"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "-"
        },
        "content": "def register(linter):"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"required method to auto register this checker\"\"\""
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.register_checker(VariablesChecker(linter))"
      }
    ],
    "authorContributionMap": {
      "Claudiu Popa": 13,
      "-": 1990,
      "Ashley Whetter": 3,
      "Nick Drozd": 2
    }
  },
  {
    "path": "pylint/lint.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2006-2015 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2008 Fabrice Douchant \u003cFabrice.Douchant@logilab.fr\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2009 Vincent"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2009 Mads Kiilerich \u003cmads@kiilerich.com\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2011-2014 Google, Inc."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012 David Pursehouse \u003cdavid.pursehouse@sonymobile.com\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012 Kevin Jing Qiu \u003ckevin.jing.qiu@gmail.com\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012 FELD Boris \u003clothiraldan@gmail.com\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2012 JT Olds \u003cjtolds@xnet5.com\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014-2015 Michal Nowikowski \u003cgodfryd@gmail.com\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Brett Cannon \u003cbrett@python.org\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Alexandru Coman \u003cfcoman@bitdefender.com\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Daniel Harding \u003cdharding@living180.net\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014 Dan Goldsmith \u003cdjgoldsmith@googlemail.com\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015-2016 Florian Bruhin \u003cme@the-compiler.org\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Aru Sahni \u003carusahni@gmail.com\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Steven Myint \u003chg@stevenmyint.com\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Simu Toni \u003csimutoni@gmail.com\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Mihai Balint \u003cbalint.mihai@gmail.com\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016-2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Glenn Matthews \u003cglenn@e-dad.net\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Alan Evangelista \u003calanoe@linux.vnet.ibm.com\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017-2018 Ville Skyttä \u003cville.skytta@iki.fi\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017-2018 hippo91 \u003cguillaume.peillex@gmail.com\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Daniel Miller \u003cmillerdev@gmail.com\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Roman Ivanov \u003cme@roivanov.com\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Ned Batchelder \u003cned@nedbatchelder.com\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Randall Leeds \u003crandall@bleeds.info\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Mike Frysinger \u003cvapier@gmail.com\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 ssolanki \u003csushobhitsolanki@gmail.com\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ville Skyttä \u003cville.skytta@upcloud.com\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Sushobhit \u003c31987769+sushobhit27@users.noreply.github.com\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Anthony Sottile \u003casottile@umich.edu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Jason Owen \u003cjason.a.owen@gmail.com\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Gary Tyler McLeod \u003cmail@garytyler.com\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Yuval Langer \u003cyuvallanger@mail.tau.ac.il\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Nick Drozd \u003cnicholasdrozd@gmail.com\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 kapsh \u003ckapsh@kap.sh\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dbroad-except"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\" pylint [options] modules_or_packages"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  Check that module(s) satisfy a coding standard (and more !)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    pylint --help"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  Display this help message and exit."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    pylint --help-msg \u003cmsg-id\u003e[,\u003cmsg-id\u003e]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  Display help messages about given message identifiers and exit."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import collections"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import contextlib"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import functools"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import operator"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import os"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import sys"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import tokenize"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "import traceback"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "import warnings"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "from io import TextIOWrapper"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid import modutils"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.__pkginfo__ import version as astroid_version"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "from astroid.builder import AstroidBuilder"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint import __pkginfo__, checkers, config, exceptions, interfaces, reporters"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.__pkginfo__ import version"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.constants import MAIN_CHECKER_NAME, MSG_TYPES"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.message import Message, MessageDefinitionStore, MessagesHandlerMixIn"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.reporters.ureports import nodes as report_nodes"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.utils import ASTWalker, FileState, utils"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.utils.pragma_parser import ("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    OPTION_PO,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    InvalidPragmaError,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    UnRecognizedOptionError,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    parse_pragma,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "try:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    import multiprocessing"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "except ImportError:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    multiprocessing \u003d None  # type: ignore"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "MANAGER \u003d astroid.MANAGER"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "def _read_stdin():"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    # https://mail.python.org/pipermail/python-list/2012-November/634424.html"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    sys.stdin \u003d TextIOWrapper(sys.stdin.detach(), encoding\u003d\"utf-8\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    return sys.stdin.read()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_new_args(message):"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    location \u003d ("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        message.abspath,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        message.path,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        message.module,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        message.obj,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        message.line,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        message.column,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    return (message.msg_id, message.symbol, location, message.msg, message.confidence)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "def _get_python_path(filepath):"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    dirname \u003d os.path.realpath(os.path.expanduser(filepath))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    if not os.path.isdir(dirname):"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        dirname \u003d os.path.dirname(dirname)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    while True:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if not os.path.exists(os.path.join(dirname, \"__init__.py\")):"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return dirname"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        old_dirname \u003d dirname"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        dirname \u003d os.path.dirname(dirname)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if old_dirname \u003d\u003d dirname:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return os.getcwd()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    return None"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "def _merge_stats(stats):"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    merged \u003d {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    by_msg \u003d collections.Counter()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    for stat in stats:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        message_stats \u003d stat.pop(\"by_msg\", {})"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        by_msg.update(message_stats)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        for key, item in stat.items():"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            if key not in merged:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                merged[key] \u003d item"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "            elif isinstance(item, dict):"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                merged[key].update(item)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                merged[key] \u003d merged[key] + item"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    merged[\"by_msg\"] \u003d by_msg"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    return merged"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "# Python Linter class #########################################################"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "MSGS \u003d {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    \"F0001\": ("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%s\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        \"fatal\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an error occurred preventing the analysis of a \\"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "              module (unable to find it for instance).\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \"F0002\": ("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        \"%s: %s\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        \"astroid-error\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an unexpected error occurred while building the \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Astroid  representation. This is usually accompanied by a \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        \"traceback. Please report such errors !\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    \"F0010\": ("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        \"error while code parsing: %s\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        \"parse-error\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an exception occurred while building the Astroid \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        \"representation which could be handled by astroid.\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    \"I0001\": ("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unable to run raw checkers on built-in module %s\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        \"raw-checker-failed\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used to inform that a built-in module has not been checked \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        \"using the raw checkers.\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    \"I0010\": ("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unable to consider inline option %r\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-inline-option\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an inline option is either badly formatted or can\u0027t \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        \"be used inside modules.\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    \"I0011\": ("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Locally disabling %s (%s)\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        \"locally-disabled\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an inline option disables a message or a messages category.\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    \"I0013\": ("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Ignoring entire file\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        \"file-ignored\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used to inform that the file will not be checked\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    \"I0020\": ("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Suppressed %s (from line %d)\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        \"suppressed-message\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        \"A message was triggered on a line, but suppressed explicitly \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \"by a disable\u003d comment in the file. This message is not \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \"generated for messages that are ignored due to configuration \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        \"settings.\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    \"I0021\": ("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Useless suppression of %s\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \"useless-suppression\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Reported when a message is explicitly disabled for a line or \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \"a block of code, but never triggered.\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    \"I0022\": ("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027Pragma \"%s\" is deprecated, use \"%s\" instead\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \"deprecated-pragma\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Some inline pylint options have been renamed or reworked, \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \"only the most recent form should be used. \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \"NOTE:skip-all is only available with pylint \u003e\u003d 0.26\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        {\"old_names\": [(\"I0014\", \"deprecated-disable-all\")]},"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0001\": (\"%s\", \"syntax-error\", \"Used when a syntax error is raised for a module.\"),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0011\": ("
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Unrecognized file option %r\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        \"unrecognized-inline-option\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when an unknown inline option is encountered.\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    \"E0012\": ("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Bad option value %r\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        \"bad-option-value\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Used when a bad value for an inline option is encountered.\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "def _cpu_count() -\u003e int:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Use sched_affinity if available for virtualized or containerized environments.\"\"\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    sched_getaffinity \u003d getattr(os, \"sched_getaffinity\", None)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    # pylint: disable\u003dnot-callable,using-constant-test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    if sched_getaffinity:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return len(sched_getaffinity(0))"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    if multiprocessing:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return multiprocessing.cpu_count()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    return 1"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dtoo-many-instance-attributes,too-many-public-methods"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "class PyLinter("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    config.OptionsManagerMixIn,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    MessagesHandlerMixIn,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    reporters.ReportsHandlerMixIn,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    checkers.BaseTokenChecker,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "):"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"lint Python modules using external checkers."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    This is the main checker controlling the other ones and the reports"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    generation. It is itself both a raw checker and an astroid checker in order"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    to:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    * handle message activation / deactivation at the module level"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    * handle some basic but necessary stats\u0027data (number of classes, methods...)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    IDE plugin developers: you may have to call"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    `astroid.builder.MANAGER.astroid_cache.clear()` across runs if you want"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    to ensure the latest code version is actually checked."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    This class needs to support pickling for parallel linting to work. The exception"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    is reporter member; see check_parallel function for more details."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    __implements__ \u003d (interfaces.ITokenChecker,)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    name \u003d MAIN_CHECKER_NAME"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    priority \u003d 0"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    level \u003d 0"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d MSGS"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    def make_options():"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        return ("
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                \"ignore\","
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"csv\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cfile\u003e[,\u003cfile\u003e...]\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"dest\": \"black_list\","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": (\"CVS\",),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Add files or directories to the blacklist. \""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"They should be base names, not paths.\","
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                \"ignore-patterns\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"regexp_csv\","
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cpattern\u003e[,\u003cpattern\u003e...]\","
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"dest\": \"black_list_re\","
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": (),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Add files or directories matching the regex patterns to the\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" blacklist. The regex matches against base names, not paths.\","
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                \"persistent\","
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": True,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"yn\","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"level\": 1,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Pickle collected data for later comparisons.\","
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                \"load-plugins\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"csv\","
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cmodules\u003e\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": (),"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"level\": 1,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"List of plugins (as comma separated values of \""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"python module names) to load, usually to register \""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"additional checkers.\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                \"output-format\","
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": \"text\","
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"string\","
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cformat\u003e\","
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"short\": \"f\","
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"group\": \"Reports\","
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Set the output format. Available formats are text,\""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" parseable, colorized, json and msvs (visual studio).\""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" You can also give a reporter class, e.g. mypackage.mymodule.\""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"MyReporterClass.\","
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reports\","
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": False,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"yn\","
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"short\": \"r\","
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"group\": \"Reports\","
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Tells whether to display a full report or only the \""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"messages.\","
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                \"evaluation\","
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"string\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cpython_expression\u003e\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"group\": \"Reports\","
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"level\": 1,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": \"10.0 - ((float(5 * error + warning + refactor + \""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"convention) / statement) * 10)\","
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Python expression which should return a score less \""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"than or equal to 10. You have access to the variables \""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\u0027error\u0027, \u0027warning\u0027, \u0027refactor\u0027, and \u0027convention\u0027 which \""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"contain the number of messages in each category, as well as \""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\u0027statement\u0027 which is the total number of statements \""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"analyzed. This score is used by the global \""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"evaluation report (RP0004).\","
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "                \"score\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": True,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"yn\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cy_or_n\u003e\","
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"short\": \"s\","
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"group\": \"Reports\","
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Activate the evaluation score.\","
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                \"fail-under\","
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": 10,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"int\","
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cscore\u003e\","
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Specify a score threshold to be exceeded before program exits with error.\","
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                \"confidence\","
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"multiple_choice\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003clevels\u003e\","
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": \"\","
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"choices\": [c.name for c in interfaces.CONFIDENCE_LEVELS],"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"group\": \"Messages control\","
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Only show warnings with the listed confidence levels.\""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" Leave empty to show all. Valid levels: %s.\""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "                    % (\", \".join(c.name for c in interfaces.CONFIDENCE_LEVELS),),"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "                \"enable\","
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"csv\","
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cmsg ids\u003e\","
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"short\": \"e\","
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"group\": \"Messages control\","
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Enable the message, report, category or checker with the \""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"given id(s). You can either give multiple identifier \""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"separated by comma (,) or put this option multiple time \""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"(only on the command line, not in the configuration file \""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"where it should appear only once). \""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027See also the \"--disable\" option for examples.\u0027,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                \"disable\","
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"csv\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cmsg ids\u003e\","
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"short\": \"d\","
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"group\": \"Messages control\","
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Disable the message, report, category or checker \""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"with the given id(s). You can either give multiple identifiers \""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"separated by comma (,) or put this option multiple times \""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"(only on the command line, not in the configuration file \""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"where it should appear only once). \""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027You can also use \"--disable\u003dall\" to disable everything first \u0027"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"and then reenable specific checks. For example, if you want \""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"to run only the similarities checker, you can use \""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027\"--disable\u003dall --enable\u003dsimilarities\". \u0027"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"If you want to run only the classes checker, but have no \""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Warning level messages displayed, use \""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027\"--disable\u003dall --enable\u003dclasses --disable\u003dW\".\u0027,"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "                \"msg-template\","
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"string\","
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003ctemplate\u003e\","
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"group\": \"Reports\","
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": ("
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Template used to display messages. \""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"This is a python new-style format string \""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"used to format the message information. \""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"See doc for all details.\""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "                \"jobs\","
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"int\","
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cn-processes\u003e\","
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"short\": \"j\","
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": 1,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": \"Use multiple processes to speed up Pylint. Specifying 0 will \""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"auto-detect the number of processors available to use.\","
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "                \"unsafe-load-any-extension\","
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"yn\","
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cyn\u003e\","
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": False,"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"hide\": True,"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": ("
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Allow loading of arbitrary C extensions. Extensions\""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "                        \" are imported into the active Python interpreter and\""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "                        \" may run arbitrary code.\""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "                \"limit-inference-results\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"int\","
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cnumber-of-results\u003e\","
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": 100,"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": ("
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Control the amount of potential inferred values when inferring \""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"a single object. This can help the performance when dealing with \""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"large functions or complex, nested conditions. \""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "                \"extension-pkg-whitelist\","
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"csv\","
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cpkg[,pkg]\u003e\","
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": [],"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": ("
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"A comma-separated list of package or module names\""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "                        \" from where C extensions may be loaded. Extensions are\""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "                        \" loading into the active Python interpreter and may run\""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "                        \" arbitrary code.\""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "                \"suggestion-mode\","
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"type\": \"yn\","
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"metavar\": \"\u003cyn\u003e\","
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"default\": True,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": ("
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"When enabled, pylint would attempt to guess common \""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"misconfiguration and emit user-friendly hints instead \""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"of false-positive error messages.\""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "                \"exit-zero\","
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"action\": \"store_true\","
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": ("
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Always return a 0 (non-error) status code, even if \""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"lint errors are found. This is primarily useful in \""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"continuous integration scripts.\""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "                \"from-stdin\","
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"action\": \"store_true\","
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help\": ("
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Interpret the stdin as a python script, whose filename \""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"needs to be passed as the module_or_package argument.\""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    option_groups \u003d ("
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        (\"Messages control\", \"Options controlling analysis messages\"),"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        (\"Reports\", \"Options related to output formatting and reporting\"),"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, options\u003d(), reporter\u003dNone, option_groups\u003d(), pylintrc\u003dNone):"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        # some stuff has to be done before ancestors initialization..."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        #"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        # messages store / checkers / reporter / astroid manager"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        self.msgs_store \u003d MessageDefinitionStore()"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        self.reporter \u003d None"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        self._reporter_name \u003d None"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        self._reporters \u003d {}"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        self._checkers \u003d collections.defaultdict(list)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        self._pragma_lineno \u003d {}"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        self._ignore_file \u003d False"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        # visit variables"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        self.file_state \u003d FileState()"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        self.current_name \u003d None"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        self.current_file \u003d None"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats \u003d None"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        # init options"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        self._external_opts \u003d options"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        self.options \u003d options + PyLinter.make_options()"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        self.option_groups \u003d option_groups + PyLinter.option_groups"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        self._options_methods \u003d {\"enable\": self.enable, \"disable\": self.disable}"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        self._bw_options_methods \u003d {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "            \"disable-msg\": self.disable,"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "            \"enable-msg\": self.enable,"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        full_version \u003d \"pylint %s\\nastroid %s\\nPython %s\" % ("
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "            version,"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            astroid_version,"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "            sys.version,"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        MessagesHandlerMixIn.__init__(self)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        reporters.ReportsHandlerMixIn.__init__(self)"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        super(PyLinter, self).__init__("
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "            usage\u003d__doc__,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "            version\u003dfull_version,"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "            config_file\u003dpylintrc or next(config.find_default_config_files(), None),"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        checkers.BaseTokenChecker.__init__(self)"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        # provided reports"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        self.reports \u003d ("
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "            (\"RP0001\", \"Messages by category\", report_total_messages_stats),"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "                \"RP0002\","
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "                \"% errors / warnings by module\","
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "                report_messages_by_module_stats,"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "            (\"RP0003\", \"Messages\", report_messages_stats),"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        self.register_checker(self)"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        self._dynamic_plugins \u003d set()"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        self._python3_porting_mode \u003d False"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        self._error_mode \u003d False"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        self.load_provider_defaults()"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        if reporter:"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "            self.set_reporter(reporter)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "    def load_default_plugins(self):"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        checkers.initialize(self)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        reporters.initialize(self)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        # Make sure to load the default reporter, because"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        # the option has been set before the plugins had been loaded."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self.reporter:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            self._load_reporter()"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    def load_plugin_modules(self, modnames):"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"take a list of module names which are pylint plugins and load"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        and register them"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        for modname in modnames:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            if modname in self._dynamic_plugins:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "            self._dynamic_plugins.add(modname)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            module \u003d modutils.load_module_from_name(modname)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "            module.register(self)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "    def load_plugin_configuration(self):"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Call the configuration hook for plugins"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        This walks through the list of plugins, grabs the \"load_configuration\""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        hook, if exposed, and calls it to allow plugins to configure specific"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "        settings."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        for modname in self._dynamic_plugins:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "            module \u003d modutils.load_module_from_name(modname)"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            if hasattr(module, \"load_configuration\"):"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "                module.load_configuration(self)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "    def _load_reporter(self):"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d self._reporter_name.lower()"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        if name in self._reporters:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "            self.set_reporter(self._reporters[name]())"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "                reporter_class \u003d self._load_reporter_class()"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "            except (ImportError, AttributeError):"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "                raise exceptions.InvalidReporterError(name)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "                self.set_reporter(reporter_class())"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "    def _load_reporter_class(self):"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "        qname \u003d self._reporter_name"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d modutils.load_module_from_name(modutils.get_module_part(qname))"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        class_name \u003d qname.split(\".\")[-1]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        reporter_class \u003d getattr(module, class_name)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        return reporter_class"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "    def set_reporter(self, reporter):"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"set the reporter used to display messages and reports\"\"\""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        self.reporter \u003d reporter"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "        reporter.linter \u003d self"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    def set_option(self, optname, value, action\u003dNone, optdict\u003dNone):"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"overridden from config.OptionsProviderMixin to handle some"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "        special options"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        if optname in self._options_methods or optname in self._bw_options_methods:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "            if value:"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "                try:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "                    meth \u003d self._options_methods[optname]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "                except KeyError:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "                    meth \u003d self._bw_options_methods[optname]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "                    warnings.warn("
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"%s is deprecated, replace it by %s\""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "                        % (optname, optname.split(\"-\")[0]),"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "                        DeprecationWarning,"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "                value \u003d utils._check_csv(value)"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "                if isinstance(value, (list, tuple)):"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "                    for _id in value:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "                        meth(_id, ignore_unknown\u003dTrue)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "                    meth(value)"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "                return  # no need to call set_option, disable/enable methods do it"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        elif optname \u003d\u003d \"output-format\":"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "            self._reporter_name \u003d value"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "            # If the reporters are already available, load"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "            # the reporter class."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "            if self._reporters:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "                self._load_reporter()"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "            checkers.BaseTokenChecker.set_option(self, optname, value, action, optdict)"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        except config.UnsupportedAction:"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "            print(\"option %s can\u0027t be read from config file\" % optname, file\u003dsys.stderr)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "    def register_reporter(self, reporter_class):"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "        self._reporters[reporter_class.name] \u003d reporter_class"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    def report_order(self):"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "        reports \u003d sorted(self._reports, key\u003dlambda x: getattr(x, \"name\", \"\"))"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            # Remove the current reporter and add it"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "            # at the end of the list."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "            reports.pop(reports.index(self))"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "        except ValueError:"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "            reports.append(self)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        return reports"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "    # checkers manipulation methods ############################################"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "    def register_checker(self, checker):"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"register a new checker"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        checker is an object implementing IRawChecker or / and IAstroidChecker"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "        assert checker.priority \u003c\u003d 0, \"checker priority can\u0027t be \u003e\u003d 0\""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        self._checkers[checker.name].append(checker)"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        for r_id, r_title, r_cb in checker.reports:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "            self.register_report(r_id, r_title, r_cb, checker)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        self.register_options_provider(checker)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "        if hasattr(checker, \"msgs\"):"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "            self.msgs_store.register_messages_from_checker(checker)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        checker.load_defaults()"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        # Register the checker, but disable all of its messages."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        if not getattr(checker, \"enabled\", True):"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "            self.disable(checker.name)"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "    def disable_noerror_messages(self):"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        for msgcat, msgids in self.msgs_store._msgs_by_category.items():"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "            # enable only messages with \u0027error\u0027 severity and above (\u0027fatal\u0027)"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "            if msgcat in [\"E\", \"F\"]:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "                for msgid in msgids:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.enable(msgid)"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "                for msgid in msgids:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.disable(msgid)"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "    def disable_reporters(self):"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"disable all reporters\"\"\""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "        for _reporters in self._reports.values():"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "            for report_id, _, _ in _reporters:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "                self.disable_report(report_id)"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "    def error_mode(self):"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"error mode: enable only errors; no reports, no persistent\"\"\""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        self._error_mode \u003d True"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "        self.disable_noerror_messages()"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        self.disable(\"miscellaneous\")"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._python3_porting_mode:"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "            self.disable(\"all\")"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "            for msg_id in self._checker_messages(\"python3\"):"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "                if msg_id.startswith(\"E\"):"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.enable(msg_id)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "            config_parser \u003d self.cfgfile_parser"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "            if config_parser.has_option(\"MESSAGES CONTROL\", \"disable\"):"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "                value \u003d config_parser.get(\"MESSAGES CONTROL\", \"disable\")"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "                self.global_set_option(\"disable\", value)"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "            self.disable(\"python3\")"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "        self.set_option(\"reports\", False)"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        self.set_option(\"persistent\", False)"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        self.set_option(\"score\", False)"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "    def python3_porting_mode(self):"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Disable all other checkers and enable Python 3 warnings.\"\"\""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        self.disable(\"all\")"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        # re-enable some errors, or \u0027print\u0027, \u0027raise\u0027, \u0027async\u0027, \u0027await\u0027 will mistakenly lint fine"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "        self.enable(\"fatal\")  # F0001"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        self.enable(\"astroid-error\")  # F0002"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        self.enable(\"parse-error\")  # F0010"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "        self.enable(\"syntax-error\")  # E0001"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "        self.enable(\"python3\")"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "        if self._error_mode:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "            # The error mode was activated, using the -E flag."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "            # So we\u0027ll need to enable only the errors from the"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "            # Python 3 porting checker."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "            for msg_id in self._checker_messages(\"python3\"):"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "                if msg_id.startswith(\"E\"):"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.enable(msg_id)"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "                else:"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.disable(msg_id)"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "        config_parser \u003d self.cfgfile_parser"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "        if config_parser.has_option(\"MESSAGES CONTROL\", \"disable\"):"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "            value \u003d config_parser.get(\"MESSAGES CONTROL\", \"disable\")"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            self.global_set_option(\"disable\", value)"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        self._python3_porting_mode \u003d True"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "    def list_messages_enabled(self):"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "        enabled \u003d ["
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "            \"  %s (%s)\" % (message.symbol, message.msgid)"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "            for message in self.msgs_store.messages"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "            if self.is_message_enabled(message.msgid)"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        disabled \u003d ["
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "            \"  %s (%s)\" % (message.symbol, message.msgid)"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "            for message in self.msgs_store.messages"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "            if not self.is_message_enabled(message.msgid)"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        print(\"Enabled messages:\")"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        for msg in sorted(enabled):"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "            print(msg)"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "        print(\"\\nDisabled messages:\")"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        for msg in sorted(disabled):"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "            print(msg)"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "        print(\"\")"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "    # block level option handling #############################################"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "    #"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "    # see func_block_disable_msg.py test case for expected behaviour"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "    def process_tokens(self, tokens):"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"process tokens from the current module to search for module/block"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "        level options"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        control_pragmas \u003d {\"disable\", \"enable\"}"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        prev_line \u003d None"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        saw_newline \u003d True"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "        seen_newline \u003d True"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        for (tok_type, content, start, _, _) in tokens:"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "            if prev_line and prev_line !\u003d start[0]:"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "                saw_newline \u003d seen_newline"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "                seen_newline \u003d False"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "            prev_line \u003d start[0]"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "            if tok_type in (tokenize.NL, tokenize.NEWLINE):"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "                seen_newline \u003d True"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "            if tok_type !\u003d tokenize.COMMENT:"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "            match \u003d OPTION_PO.search(content)"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "            if match is None:"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "                for pragma_repr in parse_pragma(match.group(2)):"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "                    if pragma_repr.action in (\"disable-all\", \"skip-file\"):"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "                        if pragma_repr.action \u003d\u003d \"disable-all\":"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"deprecated-pragma\","
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "                                line\u003dstart[0],"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "                                args\u003d(\"disable-all\", \"skip-file\"),"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message(\"file-ignored\", line\u003dstart[0])"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "                        self._ignore_file \u003d True"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "                        return"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "                    try:"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "                        meth \u003d self._options_methods[pragma_repr.action]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "                    except KeyError:"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "                        meth \u003d self._bw_options_methods[pragma_repr.action]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "                        # found a \"(dis|en)able-msg\" pragma deprecated suppression"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "                        self.add_message("
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"deprecated-pragma\","
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "                            line\u003dstart[0],"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "                            args\u003d("
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "                                pragma_repr.action,"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "                                pragma_repr.action.replace(\"-msg\", \"\"),"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "                            ),"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                    for msgid in pragma_repr.messages:"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "                        # Add the line where a control pragma was encountered."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "                        if pragma_repr.action in control_pragmas:"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "                            self._pragma_lineno[msgid] \u003d start[0]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (pragma_repr.action, msgid) \u003d\u003d (\"disable\", \"all\"):"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"deprecated-pragma\","
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "                                line\u003dstart[0],"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "                                args\u003d(\"disable\u003dall\", \"skip-file\"),"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message(\"file-ignored\", line\u003dstart[0])"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "                            self._ignore_file \u003d True"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "                            return"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "                            # If we did not see a newline between the previous line and now,"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "                            # we saw a backslash so treat the two lines as one."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "                        l_start \u003d start[0]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "                        if not saw_newline:"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "                            l_start -\u003d 1"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                        try:"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "                            meth(msgid, \"module\", l_start)"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "                        except exceptions.UnknownMessageError:"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "                            self.add_message("
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"bad-option-value\", args\u003dmsgid, line\u003dstart[0]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "            except UnRecognizedOptionError as err:"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message("
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"unrecognized-inline-option\", args\u003derr.token, line\u003dstart[0]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "            except InvalidPragmaError as err:"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "                self.add_message(\"bad-inline-option\", args\u003derr.token, line\u003dstart[0])"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "                continue"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "    # code checking methods ###################################################"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "    def get_checkers(self):"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"return all available checkers as a list\"\"\""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "        return [self] + ["
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "            c"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "            for _checkers in self._checkers.values()"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "            for c in _checkers"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "            if c is not self"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "    def get_checker_names(self):"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Get all the checker names that this linter knows about.\"\"\""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        current_checkers \u003d self.get_checkers()"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "        return sorted("
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "                checker.name"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "                for checker in current_checkers"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "                if checker.name !\u003d MAIN_CHECKER_NAME"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "    def prepare_checkers(self):"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"return checkers needed for activated messages and reports\"\"\""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        if not self.config.reports:"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "            self.disable_reporters()"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        # get needed checkers"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        needed_checkers \u003d [self]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        for checker in self.get_checkers()[1:]:"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "            messages \u003d {msg for msg in checker.msgs if self.is_message_enabled(msg)}"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "            if messages or any(self.report_is_enabled(r[0]) for r in checker.reports):"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "                needed_checkers.append(checker)"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "        # Sort checkers by priority"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "        needed_checkers \u003d sorted("
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            needed_checkers, key\u003doperator.attrgetter(\"priority\"), reverse\u003dTrue"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "        return needed_checkers"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "    # pylint: disable\u003dunused-argument"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "    def should_analyze_file(modname, path, is_argument\u003dFalse):"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Returns whether or not a module should be checked."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "        This implementation returns True for all python source file, indicating"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "        that all files should be linted."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "        Subclasses may override this method to indicate that modules satisfying"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "        certain conditions should not be linted."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str modname: The name of the module to be checked."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str path: The full path to the source code of the module."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "        :param bool is_argument: Whetter the file is an argument to pylint or not."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "                                 Files which respect this property are always"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "                                 checked, since the user requested it explicitly."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "        :returns: True if the module should be checked."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "        :rtype: bool"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "        if is_argument:"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "            return True"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        return path.endswith(\".py\")"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "    # pylint: enable\u003dunused-argument"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "    def initialize(self):"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Initialize linter for linting"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "        This method is called before any linting is done."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "        # initialize msgs_state now that all messages have been registered into"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "        # the store"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "        for msg in self.msgs_store.messages:"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "            if not msg.may_be_emitted():"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "                self._msgs_state[msg.msgid] \u003d False"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "    def check(self, files_or_modules):"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"main checking entry: check a list of files or modules from their name."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "        files_or_modules is either a string or list of strings presenting modules to check."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "        self.initialize()"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "        if not isinstance(files_or_modules, (list, tuple)):"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "            files_or_modules \u003d (files_or_modules,)"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "        if self.config.from_stdin:"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "            if len(files_or_modules) !\u003d 1:"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "                raise exceptions.InvalidArgsError("
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Missing filename required for --from-stdin\""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "            filepath \u003d files_or_modules[0]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_files("
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "                functools.partial(self.get_ast, data\u003d_read_stdin()),"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "                [self._get_file_descr_from_stdin(filepath)],"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        elif self.config.jobs \u003d\u003d 1:"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_files(self.get_ast, self._iterate_file_descrs(files_or_modules))"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "            check_parallel("
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "                self, self.config.jobs, self._iterate_file_descrs(files_or_modules)"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "    def check_single_file(self, name, filepath, modname):"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check single file"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "        The arguments are the same that are documented in _check_files"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        The initialize() method should be called before calling this method"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "        with self._astroid_module_checker() as check_astroid_module:"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "            self._check_file("
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "                self.get_ast, check_astroid_module, name, filepath, modname"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_files(self, get_ast, file_descrs):"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check all files from file_descrs"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "        The file_descrs should be iterable of tuple (name, filepath, modname)"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "        where"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "        - name: full name of the module"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        - filepath: path of the file"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "        - modname: module name"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        with self._astroid_module_checker() as check_astroid_module:"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "            for name, filepath, modname in file_descrs:"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "                self._check_file(get_ast, check_astroid_module, name, filepath, modname)"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_file(self, get_ast, check_astroid_module, name, filepath, modname):"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check a file using the passed utility functions (get_ast and check_astroid_module)"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "        :param callable get_ast: callable returning AST from defined file taking the following arguments"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "        - filepath: path to the file to check"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "        - name: Python module name"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "        :param callable check_astroid_module: callable checking an AST taking the following arguments"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "        - ast: AST of the module"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str name: full name of the module"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str filepath: path to checked file"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str modname: name of the checked Python module"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "        self.set_current_module(name, filepath)"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "        # get the module representation"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        ast_node \u003d get_ast(filepath, name)"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        if ast_node is None:"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "        self._ignore_file \u003d False"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "        self.file_state \u003d FileState(modname)"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "        # fix the current file (if the source file was not available or"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "        # if it\u0027s actually a c extension)"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "        self.current_file \u003d ast_node.file  # pylint: disable\u003dmaybe-no-member"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "        check_astroid_module(ast_node)"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "        # warn about spurious inline messages handling"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "        spurious_messages \u003d self.file_state.iter_spurious_suppression_messages("
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "            self.msgs_store"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "        for msgid, line, args in spurious_messages:"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(msgid, line, None, args)"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "    def _get_file_descr_from_stdin(filepath):"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Return file description (tuple of module name, file path, base name) from given file path"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "        This method is used for creating suitable file description for _check_files when the"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "        source is standard input."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "            # Note that this function does not really perform an"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "            # __import__ but may raise an ImportError exception, which"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "            # we want to catch here."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "            modname \u003d \".\".join(modutils.modpath_from_file(filepath))"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        except ImportError:"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "            modname \u003d os.path.splitext(os.path.basename(filepath))[0]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "        return (modname, filepath, filepath)"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "    def _iterate_file_descrs(self, files_or_modules):"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Return generator yielding file descriptions (tuples of module name, file path, base name)"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "        The returned generator yield one item for each Python module that should be linted."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "        for descr in self._expand_files(files_or_modules):"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "            name, filepath, is_arg \u003d descr[\"name\"], descr[\"path\"], descr[\"isarg\"]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "            if self.should_analyze_file(name, filepath, is_argument\u003dis_arg):"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "                yield (name, filepath, descr[\"basename\"])"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "    def _expand_files(self, modules):"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"get modules and errors from a list of modules and handle errors"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "        result, errors \u003d utils.expand_modules("
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "            modules, self.config.black_list, self.config.black_list_re"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        for error in errors:"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d modname \u003d error[\"mod\"]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "            key \u003d error[\"key\"]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "            self.set_current_module(modname)"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "            if key \u003d\u003d \"fatal\":"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(key, args\u003dmessage)"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "        return result"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "    def set_current_module(self, modname, filepath\u003dNone):"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"set the name of the currently analyzed module and"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "        init statistics for it"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "        if not modname and filepath is None:"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "            return"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "        self.reporter.on_set_current_module(modname, filepath)"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "        self.current_name \u003d modname"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        self.current_file \u003d filepath or modname"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats[\"by_module\"][modname] \u003d {}"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats[\"by_module\"][modname][\"statement\"] \u003d 0"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        for msg_cat in MSG_TYPES.values():"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "            self.stats[\"by_module\"][modname][msg_cat] \u003d 0"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "    @contextlib.contextmanager"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "    def _astroid_module_checker(self):"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Context manager for checking ASTs"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "        The value in the context is callable accepting AST as its only argument."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "        walker \u003d ASTWalker(self)"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "        _checkers \u003d self.prepare_checkers()"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "        tokencheckers \u003d ["
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "            c"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "            for c in _checkers"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "            if interfaces.implements(c, interfaces.ITokenChecker) and c is not self"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "        rawcheckers \u003d ["
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "            c for c in _checkers if interfaces.implements(c, interfaces.IRawChecker)"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "        # notify global begin"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "        for checker in _checkers:"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "            checker.open()"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "            if interfaces.implements(checker, interfaces.IAstroidChecker):"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                walker.add_checker(checker)"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "        yield functools.partial("
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "            self.check_astroid_module,"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "            walker\u003dwalker,"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "            tokencheckers\u003dtokencheckers,"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "            rawcheckers\u003drawcheckers,"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "        # notify global end"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats[\"statement\"] \u003d walker.nbstatements"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "        for checker in reversed(_checkers):"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "            checker.close()"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "    def get_ast(self, filepath, modname, data\u003dNone):"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Return an ast(roid) representation of a module or a string."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str filepath: path to checked file."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str modname: The name of the module to be checked."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "        :param str data: optional contents of the checked file."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "        :returns: the AST"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "        :rtype: astroid.nodes.Module"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "            if data is None:"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "                return MANAGER.ast_from_file(filepath, modname, source\u003dTrue)"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "            return AstroidBuilder(MANAGER).string_build(data, modname, filepath)"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.AstroidSyntaxError as ex:"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            # pylint: disable\u003dno-member"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message("
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "                \"syntax-error\","
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "                line\u003dgetattr(ex.error, \"lineno\", 0),"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "                col_offset\u003dgetattr(ex.error, \"offset\", None),"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "                args\u003dstr(ex.error),"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "        except astroid.AstroidBuildingException as ex:"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"parse-error\", args\u003dex)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "        except Exception as ex:"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "            traceback.print_exc()"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"astroid-error\", args\u003d(ex.__class__, ex))"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "    def check_astroid_module(self, ast_node, walker, rawcheckers, tokencheckers):"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check a module from its astroid representation."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "        For return value see _check_astroid_module"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "        before_check_statements \u003d walker.nbstatements"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "        retval \u003d self._check_astroid_module("
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "            ast_node, walker, rawcheckers, tokencheckers"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats[\"by_module\"][self.current_name][\"statement\"] \u003d ("
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "            walker.nbstatements - before_check_statements"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "        return retval"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "    def _check_astroid_module(self, ast_node, walker, rawcheckers, tokencheckers):"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Check given AST node with given walker and checkers"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "        :param astroid.nodes.Module ast_node: AST node of the module to check"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "        :param pylint.utils.ast_walker.ASTWalker walker: AST walker"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "        :param list rawcheckers: List of token checkers to use"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "        :param list tokencheckers: List of raw checkers to use"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "        :returns: True if the module was checked, False if ignored,"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "            None if the module contents could not be parsed"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "        :rtype: bool"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "            tokens \u003d utils.tokenize_module(ast_node)"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "        except tokenize.TokenError as ex:"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"syntax-error\", line\u003dex.args[1][0], args\u003dex.args[0])"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "            return None"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "        if not ast_node.pure_python:"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "            self.add_message(\"raw-checker-failed\", args\u003dast_node.name)"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "            # assert astroid.file.endswith(\u0027.py\u0027)"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "            # invoke ITokenChecker interface on self to fetch module/block"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "            # level options"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "            self.process_tokens(tokens)"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "            if self._ignore_file:"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "                return False"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "            # walk ast to collect line numbers"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "            self.file_state.collect_block_lines(self.msgs_store, ast_node)"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "            # run raw and tokens checkers"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "            for checker in rawcheckers:"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "                checker.process_module(ast_node)"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "            for checker in tokencheckers:"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "                checker.process_tokens(tokens)"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "        # generate events to astroid checkers"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "        walker.walk(ast_node)"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        return True"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "    # IAstroidChecker interface #################################################"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "    def open(self):"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"initialize counters\"\"\""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "        self.stats \u003d {\"by_module\": {}, \"by_msg\": {}}"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "        MANAGER.always_load_extensions \u003d self.config.unsafe_load_any_extension"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "        MANAGER.max_inferable_values \u003d self.config.limit_inference_results"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "        MANAGER.extension_package_whitelist.update(self.config.extension_pkg_whitelist)"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "        for msg_cat in MSG_TYPES.values():"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "            self.stats[msg_cat] \u003d 0"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "    def generate_reports(self):"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"close the whole package /module, it\u0027s time to make reports !"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "        if persistent run, pickle results for later comparison"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "        # Display whatever messages are left on the reporter."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "        self.reporter.display_messages(report_nodes.Section())"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "        if self.file_state.base_name is not None:"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "            # load previous results if any"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "            previous_stats \u003d config.load_results(self.file_state.base_name)"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "            self.reporter.on_close(self.stats, previous_stats)"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "            if self.config.reports:"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "                sect \u003d self.make_reports(self.stats, previous_stats)"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "                sect \u003d report_nodes.Section()"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "            if self.config.reports:"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "                self.reporter.display_reports(sect)"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "            score_value \u003d self._report_evaluation()"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "            # save results if persistent run"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "            if self.config.persistent:"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "                config.save_results(self.stats, self.file_state.base_name)"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "            self.reporter.on_close(self.stats, {})"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "            score_value \u003d None"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "        return score_value"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "    def _report_evaluation(self):"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"make the global evaluation report\"\"\""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "        # check with at least check 1 statements (usually 0 when there is a"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "        # syntax error preventing pylint from further processing)"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "        note \u003d None"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "        previous_stats \u003d config.load_results(self.file_state.base_name)"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "        if self.stats[\"statement\"] \u003d\u003d 0:"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "            return note"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "        # get a global note for the code"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "        evaluation \u003d self.config.evaluation"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "            note \u003d eval(evaluation, {}, self.stats)  # pylint: disable\u003deval-used"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "        except Exception as ex:"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \"An exception occurred while rating: %s\" % ex"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "            self.stats[\"global_note\"] \u003d note"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \"Your code has been rated at %.2f/10\" % note"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "            pnote \u003d previous_stats.get(\"global_note\")"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "            if pnote is not None:"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "                msg +\u003d \" (previous run: %.2f/10, %+.2f)\" % (pnote, note - pnote)"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "        if self.config.score:"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "            sect \u003d report_nodes.EvaluationSection(msg)"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "            self.reporter.display_reports(sect)"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "        return note"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "def check_parallel(linter, jobs, files):"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Use the given linter to lint the files with given amount of workers (jobs)"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "    # The reporter does not need to be passed to worker processess, i.e. the reporter does"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "    # not need to be pickleable"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "    original_reporter \u003d linter.reporter"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.reporter \u003d None"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "    # The linter is inherited by all the pool\u0027s workers, i.e. the linter"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "    # is identical to the linter object here. This is requred so that"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "    # a custom PyLinter object can be used."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "    with multiprocessing.Pool("
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "        jobs, initializer\u003d_worker_initialize, initargs\u003d[linter]"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "    ) as pool:"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "        # ..and now when the workers have inherited the linter, the actual reporter"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "        # can be set back here on the parent process so that results get stored into"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "        # correct reporter"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.set_reporter(original_reporter)"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.open()"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "        all_stats \u003d []"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "        for module, messages, stats, msg_status in pool.imap_unordered("
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "            _worker_check_single_file, files"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "            linter.set_current_module(module)"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "            for msg in messages:"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "                msg \u003d Message(*msg)"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "                linter.reporter.handle_message(msg)"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "            all_stats.append(stats)"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "            linter.msg_status |\u003d msg_status"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "    linter.stats \u003d _merge_stats(all_stats)"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "    # Insert stats data to local checkers."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "    for checker in linter.get_checkers():"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "        if checker is not linter:"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "            checker.stats \u003d linter.stats"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "# PyLinter object used by worker processes when checking files using multiprocessing"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "# should only be used by the worker processes"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "_worker_linter \u003d None"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "def _worker_initialize(linter):"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "    global _worker_linter  # pylint: disable\u003dglobal-statement"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "    _worker_linter \u003d linter"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "    # On the worker process side the messages are just collected and passed back to"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "    # parent process as _worker_check_file function\u0027s return value"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "    _worker_linter.set_reporter(reporters.CollectingReporter())"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "    _worker_linter.open()"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "def _worker_check_single_file(file_item):"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "    name, filepath, modname \u003d file_item"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "    _worker_linter.open()"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "    _worker_linter.check_single_file(name, filepath, modname)"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "    msgs \u003d [_get_new_args(m) for m in _worker_linter.reporter.messages]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "    return ("
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "        _worker_linter.current_name,"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "        msgs,"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "        _worker_linter.stats,"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "        _worker_linter.msg_status,"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "# some reporting functions ####################################################"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "def report_total_messages_stats(sect, stats, previous_stats):"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"make total errors / warnings report\"\"\""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "    lines \u003d [\"type\", \"number\", \"previous\", \"difference\"]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "    lines +\u003d checkers.table_lines_from_stats("
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "        stats, previous_stats, (\"convention\", \"refactor\", \"warning\", \"error\")"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "    sect.append(report_nodes.Table(children\u003dlines, cols\u003d4, rheaders\u003d1))"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "def report_messages_stats(sect, stats, _):"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"make messages type report\"\"\""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "    if not stats[\"by_msg\"]:"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "        # don\u0027t print this report when we didn\u0027t detected any errors"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "        raise exceptions.EmptyReportError()"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "    in_order \u003d sorted("
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "        ["
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "            (value, msg_id)"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "            for msg_id, value in stats[\"by_msg\"].items()"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "            if not msg_id.startswith(\"I\")"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "    in_order.reverse()"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "    lines \u003d (\"message id\", \"occurrences\")"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "    for value, msg_id in in_order:"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "        lines +\u003d (msg_id, str(value))"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "    sect.append(report_nodes.Table(children\u003dlines, cols\u003d2, rheaders\u003d1))"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "def report_messages_by_module_stats(sect, stats, _):"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"make errors / warnings by modules report\"\"\""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "    if len(stats[\"by_module\"]) \u003d\u003d 1:"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "        # don\u0027t print this report when we are analysing a single module"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "        raise exceptions.EmptyReportError()"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "    by_mod \u003d collections.defaultdict(dict)"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "    for m_type in (\"fatal\", \"error\", \"warning\", \"refactor\", \"convention\"):"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "        total \u003d stats[m_type]"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "        for module in stats[\"by_module\"].keys():"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "            mod_total \u003d stats[\"by_module\"][module][m_type]"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "            if total \u003d\u003d 0:"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "                percent \u003d 0"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "                percent \u003d float((mod_total) * 100) / total"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "            by_mod[module][m_type] \u003d percent"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "    sorted_result \u003d []"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "    for module, mod_info in by_mod.items():"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "        sorted_result.append("
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "                mod_info[\"error\"],"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "                mod_info[\"warning\"],"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "                mod_info[\"refactor\"],"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "                mod_info[\"convention\"],"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "                module,"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "    sorted_result.sort()"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "    sorted_result.reverse()"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "    lines \u003d [\"module\", \"error\", \"warning\", \"refactor\", \"convention\"]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "    for line in sorted_result:"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "        # Don\u0027t report clean modules."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "        if all(entry \u003d\u003d 0 for entry in line[:-1]):"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "            continue"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "        lines.append(line[-1])"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "        for val in line[:-1]:"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "            lines.append(\"%.2f\" % val)"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "    if len(lines) \u003d\u003d 5:"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "        raise exceptions.EmptyReportError()"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "    sect.append(report_nodes.Table(children\u003dlines, cols\u003d5, rheaders\u003d1))"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "# utilities ###################################################################"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "class ArgumentPreprocessingError(Exception):"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Raised if an error occurs during argument preprocessing.\"\"\""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "def preprocess_options(args, search_for):"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"look for some options (keys of \u003csearch_for\u003e) which have to be processed"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "    before others"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "    values of \u003csearch_for\u003e are callback functions to call when the option is"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "    found"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "    i \u003d 0"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "    while i \u003c len(args):"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "        arg \u003d args[i]"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "        if arg.startswith(\"--\"):"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "                option, val \u003d arg[2:].split(\"\u003d\", 1)"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "            except ValueError:"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "                option, val \u003d arg[2:], None"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "            try:"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "                cb, takearg \u003d search_for[option]"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "            except KeyError:"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "                i +\u003d 1"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "                del args[i]"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "                if takearg and val is None:"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "                    if i \u003e\u003d len(args) or args[i].startswith(\"-\"):"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "                        msg \u003d \"Option %s expects a value\" % option"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise ArgumentPreprocessingError(msg)"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "                    val \u003d args[i]"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "                    del args[i]"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "                elif not takearg and val is not None:"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "                    msg \u003d \"Option %s doesn\u0027t expects a value\" % option"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "                    raise ArgumentPreprocessingError(msg)"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "                cb(option, val)"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "        else:"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "            i +\u003d 1"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "@contextlib.contextmanager"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "def fix_import_path(args):"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Prepare sys.path for running the linter checks."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "    Within this context, each of the given arguments is importable."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "    Paths are added to sys.path in corresponding order to the arguments."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "    We avoid adding duplicate directories to sys.path."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "    `sys.path` is reset to its original value upon exiting this context."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "    orig \u003d list(sys.path)"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "    changes \u003d []"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "    for arg in args:"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d _get_python_path(arg)"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "        if path not in changes:"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "            changes.append(path)"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "    sys.path[:] \u003d changes + [\".\"] + sys.path"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "    try:"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "        yield"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "    finally:"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.path[:] \u003d orig"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "class Run:"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"helper class to use as main for pylint :"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "    run(*sys.argv[1:])"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "    LinterClass \u003d PyLinter"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "    option_groups \u003d ("
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "        ("
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Commands\","
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Options which are actually commands. Options in this \\"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "group are mutually exclusive.\","
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "    @staticmethod"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "    def _return_one(*args):  # pylint: disable\u003dunused-argument"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self, args, reporter\u003dNone, do_exit\u003dTrue):"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "        self._rcfile \u003d None"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "        self._plugins \u003d []"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "        self.verbose \u003d None"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "            preprocess_options("
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "                args,"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "                    # option: (callback, takearg)"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"init-hook\": (cb_init_hook, True),"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"rcfile\": (self.cb_set_rcfile, True),"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"load-plugins\": (self.cb_add_plugins, True),"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"verbose\": (self.cb_verbose_mode, False),"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "                },"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "        except ArgumentPreprocessingError as ex:"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "            print(ex, file\u003dsys.stderr)"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "            sys.exit(32)"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter \u003d linter \u003d self.LinterClass("
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "            ("
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"rcfile\","
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": Run._return_one,"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"type\": \"string\","
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"metavar\": \"\u003cfile\u003e\","
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "                        \"help\": \"Specify a configuration file to load.\","
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"init-hook\","
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": Run._return_one,"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"type\": \"string\","
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"metavar\": \"\u003ccode\u003e\","
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"level\": 1,"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"Python code to execute, usually for sys.path \""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"manipulation such as pygtk.require().\","
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"help-msg\","
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"type\": \"string\","
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"metavar\": \"\u003cmsg-id\u003e\","
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_help_message,"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"Display a help message for the given message id and \""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"exit. The value may be a comma separated list of message ids.\","
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"list-msgs\","
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"metavar\": \"\u003cmsg-id\u003e\","
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_list_messages,"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"level\": 1,"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"Generate pylint\u0027s messages.\","
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"list-msgs-enabled\","
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"metavar\": \"\u003cmsg-id\u003e\","
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_list_messages_enabled,"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"level\": 1,"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"Display a list of what messages are enabled \""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"and disabled with the given configuration.\","
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"list-groups\","
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"metavar\": \"\u003cmsg-id\u003e\","
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_list_groups,"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"level\": 1,"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"List pylint\u0027s message groups.\","
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"list-conf-levels\","
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": cb_list_confidence_levels,"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"level\": 1,"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"Generate pylint\u0027s confidence levels.\","
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"full-documentation\","
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"metavar\": \"\u003cmsg-id\u003e\","
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_full_documentation,"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"level\": 1,"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"Generate pylint\u0027s full documentation.\","
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"generate-rcfile\","
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_generate_config,"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"Generate a sample configuration file according to \""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"the current configuration. You can put other options \""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"before this one to get them in the generated \""
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"configuration.\","
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"generate-man\","
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_generate_manpage,"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"group\": \"Commands\","
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"Generate pylint\u0027s man page.\","
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"hide\": True,"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"errors-only\","
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_error_mode,"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"short\": \"E\","
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"In error mode, checkers without error messages are \""
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"disabled and for others, only the ERROR messages are \""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"displayed, and no reports are done by default.\","
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"py3k\","
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_python3_porting_mode,"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"In Python 3 porting mode, all checkers will be \""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"disabled and only messages emitted by the porting \""
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"checker will be displayed.\","
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "                ("
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"verbose\","
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"action\": \"callback\","
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"callback\": self.cb_verbose_mode,"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"short\": \"v\","
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"help\": \"In verbose mode, extra non-checker-related info \""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"will be displayed.\","
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "                    },"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "            option_groups\u003dself.option_groups,"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "            pylintrc\u003dself._rcfile,"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "        # register standard checkers"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.load_default_plugins()"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "        # load command line plugins"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.load_plugin_modules(self._plugins)"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "        # add some help section"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.add_help_section(\"Environment variables\", config.ENV_HELP, level\u003d1)"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "        # pylint: disable\u003dbad-continuation"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.add_help_section("
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Output\","
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Using the default text output, the message format is :                          \\n\""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "            \"                                                                                \\n\""
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "            \"        MESSAGE_TYPE: LINE_NUM:[OBJECT:] MESSAGE                                \\n\""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "            \"                                                                                \\n\""
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "            \"There are 5 kind of message types :                                             \\n\""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * (C) convention, for programming standard violation                        \\n\""
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * (R) refactor, for bad code smell                                          \\n\""
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * (W) warning, for python specific problems                                 \\n\""
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * (E) error, for probable bugs in the code                                  \\n\""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * (F) fatal, if an error occurred which prevented pylint from doing further\\n\""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "            \"processing.\\n\","
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "            level\u003d1,"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.add_help_section("
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Output status code\","
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Pylint should leave with following status code:                                 \\n\""
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * 0 if everything went fine                                                 \\n\""
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * 1 if a fatal message was issued                                           \\n\""
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * 2 if an error message was issued                                          \\n\""
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * 4 if a warning message was issued                                         \\n\""
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * 8 if a refactor message was issued                                        \\n\""
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * 16 if a convention message was issued                                     \\n\""
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    * 32 on usage error                                                         \\n\""
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "            \"                                                                                \\n\""
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "            \"status 1 to 16 will be bit-ORed so you can know which different categories has\\n\""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "            \"been issued by analysing pylint output status code\\n\","
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "            level\u003d1,"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "        # read configuration"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.disable(\"I\")"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.enable(\"c-extension-no-member\")"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.read_config_file(verbose\u003dself.verbose)"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "        config_parser \u003d linter.cfgfile_parser"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "        # run init hook, if present, before loading plugins"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "        if config_parser.has_option(\"MASTER\", \"init-hook\"):"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "            cb_init_hook("
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "                \"init-hook\", utils._unquote(config_parser.get(\"MASTER\", \"init-hook\"))"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "        # is there some additional plugins in the file configuration, in"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "        if config_parser.has_option(\"MASTER\", \"load-plugins\"):"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "            plugins \u003d utils._splitstrip(config_parser.get(\"MASTER\", \"load-plugins\"))"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "            linter.load_plugin_modules(plugins)"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "        # now we can load file config and command line, plugins (which can"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "        # provide options) have been registered"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.load_config_file()"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "        if reporter:"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "            # if a custom reporter is provided as argument, it may be overridden"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "            # by file parameters, so re-set it here, but before command line"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "            # parsing so it\u0027s still overrideable by command line option"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "            linter.set_reporter(reporter)"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "            args \u003d linter.load_command_line_configuration(args)"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "        except SystemExit as exc:"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "            if exc.code \u003d\u003d 2:  # bad options"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "                exc.code \u003d 32"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "            raise"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "        if not args:"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "            print(linter.help())"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "            sys.exit(32)"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "        if linter.config.jobs \u003c 0:"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "            print("
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Jobs number (%d) should be greater than or equal to 0\""
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "                % linter.config.jobs,"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "                file\u003dsys.stderr,"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "            sys.exit(32)"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "        if linter.config.jobs \u003e 1 or linter.config.jobs \u003d\u003d 0:"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "            if multiprocessing is None:"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "                print("
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Multiprocessing library is missing, \" \"fallback to single process\","
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "                    file\u003dsys.stderr,"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "                linter.set_option(\"jobs\", 1)"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "            elif linter.config.jobs \u003d\u003d 0:"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "                linter.config.jobs \u003d _cpu_count()"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "        # We have loaded configuration from config file and command line. Now, we can"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "        # load plugin specific configuration."
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "        linter.load_plugin_configuration()"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "        # insert current working directory to the python path to have a correct"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "        # behaviour"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "        with fix_import_path(args):"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "            linter.check(args)"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "            score_value \u003d linter.generate_reports()"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "        if do_exit:"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "            if linter.config.exit_zero:"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "                sys.exit(0)"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "            else:"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "                if score_value and score_value \u003e linter.config.fail_under:"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "                    sys.exit(0)"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "                sys.exit(self.linter.msg_status)"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_set_rcfile(self, name, value):"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"callback for option preprocessing (i.e. before option parsing)\"\"\""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "        self._rcfile \u003d value"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_add_plugins(self, name, value):"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"callback for option preprocessing (i.e. before option parsing)\"\"\""
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "        self._plugins.extend(utils._splitstrip(value))"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_error_mode(self, *args, **kwargs):"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"error mode:"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "        * disable all but error messages"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "        * disable the \u0027miscellaneous\u0027 checker which can be safely deactivated in"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": "          debug"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "        * disable reports"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "        * do not save execution information"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter.error_mode()"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_generate_config(self, *args, **kwargs):"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"optik callback for sample config file generation\"\"\""
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter.generate_config(skipsections\u003d(\"COMMANDS\",))"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.exit(0)"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_generate_manpage(self, *args, **kwargs):"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"optik callback for sample config file generation\"\"\""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter.generate_manpage(__pkginfo__)"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.exit(0)"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_help_message(self, option, optname, value, parser):"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"optik callback for printing some help about a particular message\"\"\""
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter.msgs_store.help_message(utils._splitstrip(value))"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.exit(0)"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_full_documentation(self, option, optname, value, parser):"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"optik callback for printing full documentation\"\"\""
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter.print_full_documentation()"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.exit(0)"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_list_messages(self, option, optname, value, parser):"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"optik callback for printing available messages\"\"\""
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter.msgs_store.list_messages()"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.exit(0)"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_list_messages_enabled(self, option, optname, value, parser):"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"optik callback for printing available messages\"\"\""
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter.list_messages_enabled()"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.exit(0)"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_list_groups(self, *args, **kwargs):"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"List all the check groups that pylint knows about"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "        These should be useful to know what check groups someone can disable"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": "        or enable."
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "        for check in self.linter.get_checker_names():"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "            print(check)"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.exit(0)"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_python3_porting_mode(self, *args, **kwargs):"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Activate only the python3 porting checker.\"\"\""
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "        self.linter.python3_porting_mode()"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": "    def cb_verbose_mode(self, *args, **kwargs):"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": "        self.verbose \u003d True"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": "def cb_list_confidence_levels(option, optname, value, parser):"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "    for level in interfaces.CONFIDENCE_LEVELS:"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": "        print(\"%-18s: %s\" % level)"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": "    sys.exit(0)"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "def cb_init_hook(optname, value):"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"exec arbitrary code to set sys.path for instance\"\"\""
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": "    exec(value)  # pylint: disable\u003dexec-used"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "if __name__ \u003d\u003d \"__main__\":"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": "    Run(sys.argv[1:])"
      }
    ],
    "authorContributionMap": {
      "Claudiu Popa": 2,
      "-": 1854,
      "Nick Drozd": 2
    }
  },
  {
    "path": "pylintrc",
    "fileType": "pylintrc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "[MASTER]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Specify a configuration file."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "#rcfile\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Python code to execute, usually for sys.path manipulation such as"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# pygtk.require()."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "#init-hook\u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Add files or directories to the blacklist. They should be base names, not"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# paths."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ignore\u003dCVS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Pickle collected data for later comparisons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "persistent\u003dyes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# List of plugins (as comma separated values of python modules names) to load,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# usually to register additional checkers."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "load-plugins\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nick Drozd"
        },
        "content": "    pylint.extensions.check_elif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# Use multiple processes to speed up Pylint."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "jobs\u003d1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Allow loading of arbitrary C extensions. Extensions are imported into the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# active Python interpreter and may run arbitrary code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "unsafe-load-any-extension\u003dno"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# A comma-separated list of package or module names from where C extensions may"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# be loaded. Extensions are loading into the active Python interpreter and may"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# run arbitrary code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "extension-pkg-whitelist\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[MESSAGES CONTROL]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# Only show warnings with the listed confidence levels. Leave empty to show"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "confidence\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "# Enable the message, report, category or checker with the given id(s). You can"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "# either give multiple identifier separated by comma (,) or put this option"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "# multiple time. See also the \"--disable\" option for examples."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "enable\u003duse-symbolic-message-instead,useless-supression,fixme"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "# Disable the message, report, category or checker with the given id(s). You"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "# can either give multiple identifiers separated by comma (,) or put this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "# option multiple times (only on the command line, not in the configuration"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "# file where it should appear only once).You can also use \"--disable\u003dall\" to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "# disable everything first and then reenable specific checks. For example, if"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "# you want to run only the similarities checker, you can use \"--disable\u003dall"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "# --enable\u003dsimilarities\". If you want to run only the classes checker, but have"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "# no Warning level messages displayed, use\"--disable\u003dall --enable\u003dclasses"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "# --disable\u003dW\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "disable\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    attribute-defined-outside-init,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    duplicate-code,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    invalid-name,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    missing-docstring,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected-access,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    too-few-public-methods,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    # handled by black"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[REPORTS]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "# Set the output format. Available formats are text, parseable, colorized, msvs"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "# (visual studio) and html. You can also give a reporter class, eg"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "# mypackage.mymodule.MyReporterClass."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "output-format\u003dtext"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "# Put messages in a separate file for each module / package specified on the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "# command line instead of printing them on stdout. Reports (if any) will be"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "# written in a file name \"pylint_global.[txt|html]\"."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "files-output\u003dno"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether to display a full report or only the messages"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "reports\u003dno"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "# Python expression which should return a note less than 10 (10 is the highest"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "# note). You have access to the variables errors warning, statement which"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "# respectively contain the number of errors / warnings messages and the total"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "# number of statements analyzed. This is used by the global evaluation report"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "# (RP0004)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "evaluation\u003d10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "# Template used to display messages. This is a python new-style format string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "# used to format the message information. See doc for all details"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "#msg-template\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[LOGGING]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "# Logging modules to check that the string format arguments are in logging"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "# function parameter format"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "logging-modules\u003dlogging"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[MISCELLANEOUS]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "# List of note tags to take in consideration, separated by a comma."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "notes\u003dFIXME,XXX,TODO"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[SIMILARITIES]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "# Minimum lines number of a similarity."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "min-similarity-lines\u003d4"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "# Ignore comments when computing similarities."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-comments\u003dyes"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "# Ignore docstrings when computing similarities."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-docstrings\u003dyes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "# Ignore imports when computing similarities."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-imports\u003dno"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "[VARIABLES]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether we should check for unused import in __init__ files."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "init-import\u003dno"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "# A regular expression matching the name of dummy variables (i.e. expectedly"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "# not used)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "dummy-variables-rgx\u003d_$|dummy"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "# List of additional names supposed to be defined in builtins. Remember that"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "# you should avoid defining new builtins when possible."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "additional-builtins\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "# List of strings which can identify a callback function by name. A callback"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "# name must start or end with one of those strings."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "callbacks\u003dcb_,_cb"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[FORMAT]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of characters on a single line."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "max-line-length\u003d100"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "# Regexp for a line that is allowed to be longer than the limit."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-long-lines\u003d^\\s*(# )?\u003c?https?://\\S+\u003e?$"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "# Allow the body of an if to be on the same line as the test if there is no"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "# else."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "single-line-if-stmt\u003dno"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "# List of optional constructs for which whitespace checking is disabled"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "no-space-check\u003dtrailing-comma,dict-separator"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of lines in a module"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "max-module-lines\u003d2000"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "# tab)."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "indent-string\u003d\u0027    \u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "# Number of spaces of indent required inside a hanging or continued line."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "indent-after-paren\u003d4"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "# Expected format of line ending, e.g. empty (any line ending), LF or CRLF."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "expected-line-ending-format\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "[BASIC]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "# List of builtins function names that should not be used, separated by a comma"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "bad-functions\u003dmap,filter,input"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "# Good variable names which should always be accepted, separated by a comma"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "good-names\u003di,j,k,ex,Run,_"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "# Bad variable names which should always be refused, separated by a comma"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "bad-names\u003dfoo,bar,baz,toto,tutu,tata"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "# Colon-delimited sets of names that determine each other\u0027s naming style when"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "# the name regexes allow several styles."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "name-group\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "# Include a hint for the correct naming format with invalid-name"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "include-naming-hint\u003dno"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct function names"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "function-rgx\u003d[a-z_][a-z0-9_]{2,30}$"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for function names"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "function-name-hint\u003d[a-z_][a-z0-9_]{2,30}$"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct variable names"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "variable-rgx\u003d[a-z_][a-z0-9_]{2,30}$"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for variable names"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "variable-name-hint\u003d[a-z_][a-z0-9_]{2,30}$"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct constant names"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "const-rgx\u003d(([A-Z_][A-Z0-9_]*)|(__.*__))$"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for constant names"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "const-name-hint\u003d(([A-Z_][A-Z0-9_]*)|(__.*__))$"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct attribute names"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "attr-rgx\u003d[a-z_][a-z0-9_]{2,}$"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for attribute names"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "attr-name-hint\u003d[a-z_][a-z0-9_]{2,}$"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct argument names"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "argument-rgx\u003d[a-z_][a-z0-9_]{2,30}$"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for argument names"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "argument-name-hint\u003d[a-z_][a-z0-9_]{2,30}$"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct class attribute names"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "class-attribute-rgx\u003d([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for class attribute names"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "class-attribute-name-hint\u003d([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct inline iteration names"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "inlinevar-rgx\u003d[A-Za-z_][A-Za-z0-9_]*$"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for inline iteration names"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "inlinevar-name-hint\u003d[A-Za-z_][A-Za-z0-9_]*$"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct class names"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "class-rgx\u003d[A-Z_][a-zA-Z0-9]+$"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for class names"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "class-name-hint\u003d[A-Z_][a-zA-Z0-9]+$"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct module names"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "module-rgx\u003d(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for module names"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "module-name-hint\u003d(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression matching correct method names"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "method-rgx\u003d[a-z_][a-z0-9_]{2,}$"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "# Naming hint for method names"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "method-name-hint\u003d[a-z_][a-z0-9_]{2,}$"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "# Regular expression which should only match function or class names that do"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "# not require a docstring."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "no-docstring-rgx\u003d__.*__"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "# Minimum line length for functions/classes that require docstrings, shorter"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "# ones are exempt."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "docstring-min-length\u003d-1"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "# List of decorators that define properties, such as abc.abstractproperty."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "property-classes\u003dabc.abstractproperty"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "[TYPECHECK]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether missing members accessed in mixin class should be ignored. A"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "# mixin class is detected if its name ends with \"mixin\" (case insensitive)."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "ignore-mixin-members\u003dyes"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "# List of module names for which member attributes should not be checked"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "# (useful for modules/projects where namespaces are manipulated during runtime"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "# and thus existing member attributes cannot be deduced by static analysis"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ignored-modules\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "# List of classes names for which member attributes should not be checked"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "# (useful for classes with attributes dynamically set)."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ignored-classes\u003dSQLObject, optparse.Values, thread._local, _thread._local"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "# List of members which are set dynamically and missed by pylint inference"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "# system, and so shouldn\u0027t trigger E1101 when accessed. Python regular"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "# expressions are accepted."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "generated-members\u003dREQUEST,acl_users,aq_parent"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "# List of decorators that create context managers from functions, such as"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "# contextlib.contextmanager."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "contextmanager-decorators\u003dcontextlib.contextmanager"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[SPELLING]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "# Spelling dictionary name. Available dictionaries: none. To make it working"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "# install python-enchant package."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "spelling-dict\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "# List of comma separated words that should not be checked."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "spelling-ignore-words\u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "# A path to a file that contains private dictionary; one word per line."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "spelling-private-dict-file\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "# Tells whether to store unknown words to indicated private dictionary in"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "# --spelling-private-dict-file option instead of raising a message."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "spelling-store-unknown-words\u003dno"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "[DESIGN]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of arguments for function / method"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "max-args\u003d10"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "# Argument names that match this expression will be ignored. Default to name"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "# with leading underscore"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "ignored-argument-names\u003d_.*"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of locals for function / method body"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "max-locals\u003d25"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of return / yield for function / method body"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "max-returns\u003d11"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of branch for function / method body"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "max-branches\u003d26"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of statements in function / method body"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "max-statements\u003d100"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of parents for a class (see R0901)."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "max-parents\u003d7"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of attributes for a class (see R0902)."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "max-attributes\u003d11"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "# Minimum number of public methods for a class (see R0903)."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "min-public-methods\u003d2"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "# Maximum number of public methods for a class (see R0904)."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "max-public-methods\u003d25"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "[CLASSES]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "# List of method names used to declare (i.e. assign) instance attributes."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "defining-attr-methods\u003d__init__,__new__,setUp,__post_init__"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "# List of valid names for the first argument in a class method."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "valid-classmethod-first-arg\u003dcls"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "# List of valid names for the first argument in a metaclass class method."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "valid-metaclass-classmethod-first-arg\u003dmcs"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "# List of member names, which should be excluded from the protected access"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "# warning."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "exclude-protected\u003d_asdict,_fields,_replace,_source,_make"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "[IMPORTS]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "# Deprecated modules which should not be used, separated by a comma"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "deprecated-modules\u003dregsub,TERMIOS,Bastion,rexec"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "# Create a graph of every (i.e. internal and external) dependencies in the"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "# given file (report RP0402 must not be disabled)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "import-graph\u003d"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "# Create a graph of external dependencies in the given file (report RP0402 must"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "# not be disabled)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "ext-import-graph\u003d"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "# Create a graph of internal dependencies in the given file (report RP0402 must"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "# not be disabled)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "int-import-graph\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "[EXCEPTIONS]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "# Exceptions that will emit a warning when being caught. Defaults to"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "# \"Exception\""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "overgeneral-exceptions\u003dException"
      }
    ],
    "authorContributionMap": {
      "-": 372,
      "Nick Drozd": 1
    }
  },
  {
    "path": "tests/functional/a/assert_on_string_literal.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "# pylint: disable\u003dmissing-module-docstring, undefined-variable"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "assert [foo, bar], \"No AssertionError\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "assert \"There is an AssertionError\" # [assert-on-string-literal]"
      }
    ],
    "authorContributionMap": {
      "Anubhav": 3
    }
  },
  {
    "path": "tests/functional/a/assert_on_string_literal.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anubhav"
        },
        "content": "assert-on-string-literal:3::Assert statement has a string literal as its first argument. The assert will never fail."
      }
    ],
    "authorContributionMap": {
      "Anubhav": 1
    }
  },
  {
    "path": "tests/functional/i/inconsistent_quotes.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "\"\"\"Tests for inconsistent quoting strategy."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "In this file, double quotes are the majority quote delimiter."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "\"\"\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "FIRST_STRING \u003d \"double-quoted string\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "SECOND_STRING \u003d \u0027single-quoted string\u0027 # [inconsistent-quotes]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "THIRD_STRING \u003d \"another double-quoted string\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "FOURTH_STRING \u003d \"yet another double-quoted string\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "FIFTH_STRING \u003d \u0027single-quoted string with an unescaped \"double quote\"\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "def function_with_docstring():"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \u0027\u0027\u0027This is a multi-line docstring that should not raise a warning even though the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    delimiter it uses for quotes is not the delimiter used in the majority of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "    \u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Wes Turner": 16
    }
  },
  {
    "path": "tests/functional/i/inconsistent_quotes.rc",
    "fileType": "rc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "[STRING]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "check-quote-consistency\u003dyes"
      }
    ],
    "authorContributionMap": {
      "Wes Turner": 2
    }
  },
  {
    "path": "tests/functional/i/inconsistent_quotes.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "inconsistent-quotes:7::Quote delimiter \u0027 is inconsistent with the rest of the file"
      }
    ],
    "authorContributionMap": {
      "Wes Turner": 1
    }
  },
  {
    "path": "tests/functional/i/inconsistent_quotes2.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "\"\"\"Tests for inconsistent quoting strategy."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "In this file, single quotes are the majority quote delimiter."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "\"\"\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "FIRST_STRING \u003d \"double-quoted string\"  # [inconsistent-quotes]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "SECOND_STRING \u003d \u0027single-quoted string\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "THIRD_STRING \u003d \u0027another single-quoted string\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "FOURTH_STRING \u003d \u0027yet another single-quoted string\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "FIFTH_STRING \u003d \"double-quoted string with an unescaped \u0027single quote\u0027\""
      }
    ],
    "authorContributionMap": {
      "Wes Turner": 10
    }
  },
  {
    "path": "tests/functional/i/inconsistent_quotes2.rc",
    "fileType": "rc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "[STRING]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "check-quote-consistency\u003dyes"
      }
    ],
    "authorContributionMap": {
      "Wes Turner": 2
    }
  },
  {
    "path": "tests/functional/i/inconsistent_quotes2.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wes Turner"
        },
        "content": "inconsistent-quotes:6::Quote delimiter \" is inconsistent with the rest of the file"
      }
    ],
    "authorContributionMap": {
      "Wes Turner": 1
    }
  },
  {
    "path": "tests/functional/m/missing_docstring.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# [missing-module-docstring]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dtoo-few-public-methods, useless-object-inheritance"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "def public_documented():"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"It has a docstring.\"\"\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "def _private_undocumented():"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    # Doesn\u0027t need a docstring"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "def _private_documented():"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"It has a docstring.\"\"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class ClassDocumented(object):"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"It has a docstring.\"\"\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class ClassUndocumented(object): # [missing-class-docstring]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "def public_undocumented(): # [missing-function-docstring]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "def __sizeof__():"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    # Special"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "def __mangled():"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "class Property(object):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Don\u0027t warn about setters and deleters.\"\"\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    def __init__(self):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        self._value \u003d None"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @property"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    def test(self):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Default docstring for setters and deleters.\"\"\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @test.setter"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    def test(self, value):"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        self._value \u003d value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @test.deleter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    def test(self):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        pass"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "class DocumentedViaDunderDoc(object):"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    __doc__ \u003d \"This one\""
      }
    ],
    "authorContributionMap": {
      "Claudiu Popa": 4,
      "-": 54
    }
  },
  {
    "path": "tests/functional/n/non_str_assignment_to_dunder_name.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "# pylint: disable\u003dmissing-module-docstring, missing-class-docstring"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "# pylint: disable\u003dtoo-few-public-methods, missing-function-docstring"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "# pylint: disable\u003dimport-error"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "import random"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "from unknown import Unknown"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "class ExampleClass():"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "def example_function():"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "def returns_str():"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    return \"abcd\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "def returns_int():"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    return 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "def returns_tuple():"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    return 0, \"abc\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "# Might not be thorough if same hash seed is used in testing..."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "def returns_random_type():"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    if random.randint(0, 1) \u003e 0:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "        return 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "    return \"abc\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "ExampleClass.__name__ \u003d 1  # [non-str-assignment-to-dunder-name]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "ExampleClass.__name__ \u003d True  # [non-str-assignment-to-dunder-name]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "ExampleClass.__name__ \u003d returns_tuple() # [non-str-assignment-to-dunder-name]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "ExampleClass.__name__ \u003d returns_int() # [non-str-assignment-to-dunder-name]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "ExampleClass.__name__ \u003d \"foo\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "ExampleClass.__name__ \u003d returns_str()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "ExampleClass.__name__ \u003d returns_random_type()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "ExampleClass.__name__ \u003d Unknown"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "example_function.__name__ \u003d 1  # [non-str-assignment-to-dunder-name]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "example_function.__name__ \u003d True  # [non-str-assignment-to-dunder-name]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "example_function.__name__ \u003d returns_tuple() # [non-str-assignment-to-dunder-name]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "example_function.__name__ \u003d returns_int() # [non-str-assignment-to-dunder-name]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "example_function.__name__ \u003d \"foo\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "example_function.__name__ \u003d returns_str()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "example_function.__name__ \u003d returns_random_type()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "example_function.__name__ \u003d Unknown"
      }
    ],
    "authorContributionMap": {
      "Andy Palmer": 53
    }
  },
  {
    "path": "tests/functional/n/non_str_assignment_to_dunder_name.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "non-str-assignment-to-dunder-name:37::Non-string value assigned to __name__"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "non-str-assignment-to-dunder-name:38::Non-string value assigned to __name__"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "non-str-assignment-to-dunder-name:39::Non-string value assigned to __name__"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "non-str-assignment-to-dunder-name:40::Non-string value assigned to __name__"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "non-str-assignment-to-dunder-name:46::Non-string value assigned to __name__"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "non-str-assignment-to-dunder-name:47::Non-string value assigned to __name__"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "non-str-assignment-to-dunder-name:48::Non-string value assigned to __name__"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Andy Palmer"
        },
        "content": "non-str-assignment-to-dunder-name:49::Non-string value assigned to __name__"
      }
    ],
    "authorContributionMap": {
      "Andy Palmer": 8
    }
  },
  {
    "path": "tests/functional/u/undefined_variable.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dmissing-docstring, multiple-statements, useless-object-inheritance,import-outside-toplevel"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dtoo-few-public-methods, no-init, no-self-use,bare-except,broad-except, import-error"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "from __future__ import print_function"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dwrong-import-position"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "from typing import TYPE_CHECKING"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "DEFINED \u003d 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if DEFINED !\u003d 1:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    if DEFINED in (unknown, DEFINED):  # [undefined-variable]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        DEFINED +\u003d 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "def in_method(var):"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"method doc\"\"\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    var \u003d nomoreknown  # [undefined-variable]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    assert var"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "DEFINED \u003d {DEFINED:__revision__}  # [undefined-variable]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# +1:[undefined-variable]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "DEFINED[__revision__] \u003d OTHER \u003d \u0027move this is astroid test\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "OTHER +\u003d \u0027$\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "def bad_default(var, default\u003dunknown2):  # [undefined-variable]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"function with defaut arg\u0027s value set to an unexistant name\"\"\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    print(var, default)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    print(xxxx)  # [undefined-variable]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    augvar +\u003d 1  # [undefined-variable]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    del vardel  # [undefined-variable]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "LMBD \u003d lambda x, y\u003ddoesnotexist: x+y  # [undefined-variable]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "LMBD2 \u003d lambda x, y: x+z  # [undefined-variable]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    POUET # don\u0027t catch me"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "except NameError:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    POUET \u003d \u0027something\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "try:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    POUETT # [used-before-assignment]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "except Exception: # pylint:disable \u003d broad-except"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    POUETT \u003d \u0027something\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "try:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    POUETTT # don\u0027t catch me"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "except: # pylint:disable \u003d bare-except"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    POUETTT \u003d \u0027something\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "print(POUET, POUETT, POUETTT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "try:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    PLOUF  # [used-before-assignment]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "except ValueError:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    PLOUF \u003d \u0027something\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "print(PLOUF)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "def if_branch_test(something):"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"hop\"\"\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    if something \u003d\u003d 0:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if xxx \u003d\u003d 1:  # [used-before-assignment]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        print(xxx)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        xxx \u003d 3"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "def decorator(arg):"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Decorator with one argument.\"\"\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    return lambda: list(arg)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "@decorator(arg\u003d[i * 2 for i in range(15)])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "def func1():"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"A function with a decorator that contains a listcomp.\"\"\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@decorator(arg\u003d(i * 2 for i in range(15)))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "def func2():"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"A function with a decorator that contains a genexpr.\"\"\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@decorator(lambda x: x \u003e 0)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "def main():"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"A function with a decorator that contains a lambda.\"\"\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "# Test shared scope."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "def test_arguments(arg\u003dTestClass):  # [used-before-assignment]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" TestClass isn\u0027t defined yet. \"\"\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    return arg"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "class TestClass(Ancestor):  # [used-before-assignment]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" contains another class, which uses an undefined ancestor. \"\"\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    class MissingAncestor(Ancestor1):  # [used-before-assignment]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" no op \"\"\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    def test1(self):"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" It should trigger here, because the two classes"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        have the same scope."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        class UsingBeforeDefinition(Empty):  # [used-before-assignment]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\" uses Empty before definition \"\"\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        class Empty(object):"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\" no op \"\"\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return UsingBeforeDefinition"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    def test(self):"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" Ancestor isn\u0027t defined yet, but we don\u0027t care. \"\"\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        class MissingAncestor1(Ancestor):"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\" no op \"\"\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return MissingAncestor1"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "class Self(object):"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Detect when using the same name inside the class scope. \"\"\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    obj \u003d Self # [undefined-variable]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "class Self1(object):"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" No error should be raised here. \"\"\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    def test(self):"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" empty \"\"\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return Self1"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "class Ancestor(object):"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" No op \"\"\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "class Ancestor1(object):"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" No op \"\"\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "NANA \u003d BAT # [undefined-variable]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "del BAT"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "class KeywordArgument(object):"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\"Test keyword arguments.\"\"\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    enable \u003d True"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    def test(self, is_enabled\u003denable):"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"do nothing.\"\"\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    def test1(self, is_enabled\u003denabled): # [used-before-assignment]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"enabled is undefined at this point, but it is used before assignment.\"\"\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    def test2(self, is_disabled\u003ddisabled): # [undefined-variable]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"disabled is undefined\"\"\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    enabled \u003d True"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    func \u003d lambda arg\u003darg: arg * arg # [undefined-variable]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    arg2 \u003d 0"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    func2 \u003d lambda arg2\u003darg2: arg2 * arg2"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "# Don\u0027t emit if the code is protected by NameError"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "try:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    unicode_1"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "except NameError:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "try:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    unicode_2 # [undefined-variable]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "except Exception:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "try:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    unicode_3 # [undefined-variable]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "except ValueError:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "# See https://bitbucket.org/logilab/pylint/issue/111/"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "try: raise IOError(1, \"a\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "except IOError as err: print(err)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "def test_conditional_comprehension():"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    methods \u003d [\u0027a\u0027, \u0027b\u0027, \u0027_c\u0027, \u0027_d\u0027]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    my_methods \u003d sum(1 for method in methods"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                     if not method.startswith(\u0027_\u0027))"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    return my_methods"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "class MyError(object):"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "class MyClass(object):"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    class MyError(MyError):"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        pass"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "def dec(inp):"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    def inner(func):"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        print(inp)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return func"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    return inner"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "# Make sure lambdas with expressions"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "# referencing parent class do not raise undefined variable"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "# because at the time of their calling, the class name will"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "# be populated"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "# See https://github.com/PyCQA/pylint/issues/704"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "class LambdaClass:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    myattr \u003d 1"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    mylambda \u003d lambda: LambdaClass.myattr"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "# Need different classes to make sure"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "# consumed variables don\u0027t get in the way"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "class LambdaClass2:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    myattr \u003d 1"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    # Different base_scope scope but still applies"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    mylambda2 \u003d lambda: [LambdaClass2.myattr for _ in [1, 2]]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "class LambdaClass3:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    myattr \u003d 1"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    # Nested default argument in lambda"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    # Should not raise error"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    mylambda3 \u003d lambda: lambda a\u003dLambdaClass3: a"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "class LambdaClass4:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    myattr \u003d 1"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    mylambda4 \u003d lambda a\u003dLambdaClass4: lambda: a # [undefined-variable]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "# Make sure the first lambda does not consume the LambdaClass5 class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "# name although the expression is is valid"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "# Consuming the class would cause the subsequent undefined-variable to be masked"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "class LambdaClass5:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    myattr \u003d 1"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    mylambda \u003d lambda: LambdaClass5.myattr"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    mylambda4 \u003d lambda a\u003dLambdaClass5: lambda: a # [undefined-variable]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "def nonlocal_in_ifexp():"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    import matplotlib.pyplot as plt"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    def onclick(event):"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if event:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            nonlocal i"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            i +\u003d 1"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            print(i)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    i \u003d 0"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    fig \u003d plt.figure()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    fig.canvas.mpl_connect(\u0027button_press_event\u0027, onclick)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    plt.show(block\u003dTrue)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "if TYPE_CHECKING:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    from datetime import datetime"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "def func_should_fail(_dt: datetime):  # [used-before-assignment]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    pass"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "# The following should not emit an error."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dinvalid-name"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "if TYPE_CHECKING:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    from typing_extensions import Literal"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    AllowedValues \u003d Literal[\u0027hello\u0027, \u0027world\u0027]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "if TYPE_CHECKING:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    from collections import Counter"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    from collections import OrderedDict"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "else:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    Counter \u003d object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    OrderedDict \u003d object"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "def tick(counter: Counter, name: str, dictionary: OrderedDict) -\u003e OrderedDict:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    counter[name] +\u003d 1"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    return dictionary"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "# pylint: disable\u003dunused-argument"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "def not_using_loop_variable_accordingly(iterator):"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "    for iteree in iteree: # [undefined-variable]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "        yield iteree"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "# pylint: enable\u003dunused-argument"
      }
    ],
    "authorContributionMap": {
      "Claudiu Popa": 7,
      "-": 276
    }
  },
  {
    "path": "tests/functional/u/undefined_variable.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:11::Undefined variable \u0027unknown\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:17:in_method:Undefined variable \u0027nomoreknown\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:20::Undefined variable \u0027__revision__\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:22::Undefined variable \u0027__revision__\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:26:bad_default:Undefined variable \u0027unknown2\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:29:bad_default:Undefined variable \u0027xxxx\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:30:bad_default:Undefined variable \u0027augvar\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:31:bad_default:Undefined variable \u0027vardel\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:33:\u003clambda\u003e:Undefined variable \u0027doesnotexist\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:34:\u003clambda\u003e:Undefined variable \u0027z\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:42::Using variable \u0027POUETT\u0027 before assignment"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:55::Using variable \u0027PLOUF\u0027 before assignment"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:64:if_branch_test:Using variable \u0027xxx\u0027 before assignment"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:90:test_arguments:Using variable \u0027TestClass\u0027 before assignment"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:94:TestClass:Using variable \u0027Ancestor\u0027 before assignment"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:97:TestClass.MissingAncestor:Using variable \u0027Ancestor1\u0027 before assignment"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:104:TestClass.test1.UsingBeforeDefinition:Using variable \u0027Empty\u0027 before assignment"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:118:Self:Undefined variable \u0027Self\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:134::Undefined variable \u0027BAT\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:145:KeywordArgument.test1:Using variable \u0027enabled\u0027 before assignment"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:148:KeywordArgument.test2:Undefined variable \u0027disabled\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:153:KeywordArgument.\u003clambda\u003e:Undefined variable \u0027arg\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:165::Undefined variable \u0027unicode_2\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:170::Undefined variable \u0027unicode_3\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:225:LambdaClass4.\u003clambda\u003e:Undefined variable \u0027LambdaClass4\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:233:LambdaClass5.\u003clambda\u003e:Undefined variable \u0027LambdaClass5\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "used-before-assignment:254:func_should_fail:Using variable \u0027datetime\u0027 before assignment"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Claudiu Popa"
        },
        "content": "undefined-variable:281:not_using_loop_variable_accordingly:Undefined variable \u0027iteree\u0027"
      }
    ],
    "authorContributionMap": {
      "Claudiu Popa": 1,
      "-": 27
    }
  },
  {
    "path": "tests/functional/u/undefined_variable_py30.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"Test warnings about access to undefined variables"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "for various Python 3 constructs. \"\"\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "# pylint: disable\u003dtoo-few-public-methods, no-init, no-self-use, import-error"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dwrong-import-position, invalid-metaclass, useless-object-inheritance"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "class Undefined:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" test various annotation problems. \"\"\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    def test(self)-\u003eUndefined: # [undefined-variable]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" used Undefined, which is Undefined in this scope. \"\"\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Undefined \u003d True"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    def test1(self)-\u003eUndefined:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" This Undefined exists at local scope. \"\"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    def test2(self):"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" This should not emit. \"\"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        def func()-\u003eUndefined:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\" empty \"\"\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            return 2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return func"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class Undefined1:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Other annotation problems. \"\"\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Undef \u003d 42"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ABC \u003d 42"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    class InnerScope:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" Test inner scope definition. \"\"\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        def test_undefined(self)-\u003eUndef: # [undefined-variable]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\" Looking at a higher scope is impossible. \"\"\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        def test1(self)-\u003eABC: # [undefined-variable]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\" Triggers undefined-variable. \"\"\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "class FalsePositive342(object):"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    # pylint: disable\u003dline-too-long"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Fix some false positives found in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    https://bitbucket.org/logilab/pylint/issue/342/spurious-undefined-variable-for-class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    top \u003d 42"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_good(self, bac: top):"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" top is defined at this moment. \"\"\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad(self, bac: trop): # [undefined-variable]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" trop is undefined at this moment. \"\"\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad1(self, *args: trop1): # [undefined-variable]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" trop1 is undefined at this moment. \"\"\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad2(self, **bac: trop2): # [undefined-variable]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\" trop2 is undefined at this moment. \"\"\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "import abc"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "from abc import ABCMeta"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "class Bad(metaclass\u003dABCMet): # [undefined-variable]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Notice the typo \"\"\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "class SecondBad(metaclass\u003dab.ABCMeta): # [undefined-variable]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" Notice the `ab` module. \"\"\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "class Good(metaclass\u003dint):"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" int is not a proper metaclass, but it is defined. \"\"\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "class SecondGood(metaclass\u003dGood):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" empty \"\"\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "class ThirdGood(metaclass\u003dABCMeta):"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" empty \"\"\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "class FourthGood(ThirdGood):"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"\"\" This should not trigger anything. \"\"\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "class FifthGood(metaclass\u003dabc.Metaclass):"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "    \"\"\"Metaclasses can come from imported modules.\"\"\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "# The following used to raise used-before-assignment"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "# pylint: disable\u003dmissing-docstring, multiple-statements"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "def used_before_assignment(*, arg): return arg + 1"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "Ashley Whetter": 5
    }
  },
  {
    "path": "tests/functional/u/undefined_variable_py30.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:8:Undefined.test:Undefined variable \u0027Undefined\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:33:Undefined1.InnerScope.test_undefined:Undefined variable \u0027Undef\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:36:Undefined1.InnerScope.test1:Undefined variable \u0027ABC\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:51:FalsePositive342.test_bad:Undefined variable \u0027trop\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:54:FalsePositive342.test_bad1:Undefined variable \u0027trop1\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "undefined-variable:57:FalsePositive342.test_bad2:Undefined variable \u0027trop2\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "undefined-variable:63:Bad:Undefined variable \u0027ABCMet\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley Whetter"
        },
        "content": "undefined-variable:66:SecondBad:Undefined variable \u0027ab\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Ashley Whetter": 2
    }
  },
  {
    "path": "tests/unittest_checker_python3.py",
    "fileType": "py",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# -*- coding: utf-8 -*-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014-2018 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2014-2015 Brett Cannon \u003cbrett@python.org\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Cosmin Poieana \u003ccmin@ropython.org\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2015 Viorel Stirbu \u003cviorels@gmail.com\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016-2017 Roy Williams \u003croy.williams.iii@gmail.com\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Roy Williams \u003crwilliams@lyft.com\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2016 Derek Gustafson \u003cdegustaf@gmail.com\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2017 Daniel Miller \u003cmillerdev@gmail.com\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Anthony Sottile \u003casottile@umich.edu\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Copyright (c) 2018 Ville Skyttä \u003cville.skytta@upcloud.com\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# For details: https://github.com/PyCQA/pylint/blob/master/COPYING"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\"\"\"Tests for the python3 checkers.\"\"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import astroid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint import testutils"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.checkers import python3 as checker"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "from pylint.interfaces import INFERENCE, INFERENCE_FAILURE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# TODO(cpopa): Port these to the functional test framework instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "class TestPython3Checker(testutils.CheckerTestCase):"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CHECKER_CLASS \u003d checker.Python3Checker"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    def check_bad_builtin(self, builtin_name):"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(builtin_name + \"  #@\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d builtin_name.lower() + \"-builtin\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(testutils.Message(message, node\u003dnode)):"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_name(node)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_iterable_in_for_loop_test(self, fxn):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"for x in {}(): pass\".format(fxn)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_used_by_iterable_in_for_loop_test(self, fxn):"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        checker \u003d \"{}-builtin-not-iterating\".format(fxn)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for x in (whatever("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            {}() #@"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        )):"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\".format("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                fxn"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(checker, node\u003dnode)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_iterable_in_genexp_test(self, fxn):"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"x \u003d (x for x in {}())\".format(fxn)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_iterable_in_starred_context(self, fxn):"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"x \u003d test(*{}())\".format(fxn)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_iterable_in_listcomp_test(self, fxn):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"x \u003d [x for x in {}(None, [1])]\".format(fxn)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_iterable_in_yield_from(self, fxn):"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"yield from {}()\".format(fxn)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_used_in_variant_in_genexp_test(self, fxn):"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        checker \u003d \"{}-builtin-not-iterating\".format(fxn)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        list("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            __({}(x))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            for x in [1]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\".format("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                fxn"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(checker, node\u003dnode)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_used_in_variant_in_listcomp_test(self, fxn):"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        checker \u003d \"{}-builtin-not-iterating\".format(fxn)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ["
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            __({}(None, x))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for x in [[1]]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\".format("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                fxn"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(checker, node\u003dnode)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_argument_to_callable_constructor_test(self, fxn, callable_fn):"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(\"x \u003d {}({}())\".format(callable_fn, fxn))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_argument_to_materialized_filter(self, callable_fn):"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(\"list(filter(None, {}()))\".format(callable_fn))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_argument_to_random_fxn_test(self, fxn):"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        checker \u003d \"{}-builtin-not-iterating\".format(fxn)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        y("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            {}() #@"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\".format("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                fxn"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(checker, node\u003dnode)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_argument_to_str_join_test(self, fxn):"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"x \u003d \u0027\u0027.join({}())\".format(fxn)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_argument_to_itertools_functions(self, fxn):"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"\"\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        from __future__ import absolute_import"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        import itertools"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        from itertools import product"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for i,j in product({fxn}(), repeat\u003d2):"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        for i,j in itertools.product({fxn}(), repeat\u003d2):"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\".format("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            fxn\u003dfxn"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_iterable_in_unpacking(self, fxn):"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        a, b \u003d __({}())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\".format("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                fxn"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    def as_assignment(self, fxn):"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        checker \u003d \"{}-builtin-not-iterating\".format(fxn)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        a \u003d __({}())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\".format("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                fxn"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(checker, node\u003dnode)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    def iterating_context_tests(self, fxn):"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Helper for verifying a function isn\u0027t used as an iterator.\"\"\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_iterable_in_for_loop_test(fxn)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_used_by_iterable_in_for_loop_test(fxn)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_iterable_in_genexp_test(fxn)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_iterable_in_listcomp_test(fxn)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_used_in_variant_in_genexp_test(fxn)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_used_in_variant_in_listcomp_test(fxn)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_argument_to_random_fxn_test(fxn)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_argument_to_str_join_test(fxn)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_iterable_in_unpacking(fxn)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_assignment(fxn)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_argument_to_materialized_filter(fxn)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_iterable_in_yield_from(fxn)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_iterable_in_starred_context(fxn)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        self.as_argument_to_itertools_functions(fxn)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        for func in ("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            \"iter\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            \"list\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            \"tuple\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            \"sorted\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            \"set\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            \"sum\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            \"any\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            \"all\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            \"enumerate\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            \"dict\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            \"OrderedDict\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ):"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            self.as_argument_to_callable_constructor_test(fxn, func)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_dict_subclasses_methods_in_iterating_context(self):"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        iterating, not_iterating \u003d astroid.extract_node("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        from __future__ import absolute_import"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        from collections import defaultdict"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        d \u003d defaultdict(list)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        a, b \u003d d.keys() #@"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003d d.keys() #@"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(iterating.value)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"dict-keys-not-iterating\", node\u003dnot_iterating.value)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(not_iterating.value)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_dict_methods_in_iterating_context(self):"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        iterating_code \u003d ["
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            \"for x in {}(): pass\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            \"(x for x in {}())\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            \"[x for x in {}()]\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            \"iter({}())\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            \"a, b \u003d {}()\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            \"max({}())\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            \"min({}())\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            \"3 in {}()\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Athos Ribeiro"
        },
        "content": "            \"3 not in {}()\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            \"set().update({}())\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            \"[].extend({}())\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            \"{{}}.update({}())\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            from __future__ import absolute_import"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            from itertools import chain"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            chain.from_iterable({}())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        ]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        non_iterating_code \u003d [\"x \u003d __({}())\", \"__({}())[0]\"]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        for method in (\"keys\", \"items\", \"values\"):"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            dict_method \u003d \"{{}}.{}\".format(method)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            for code in iterating_code:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                with_value \u003d code.format(dict_method)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                module \u003d astroid.parse(with_value)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                with self.assertNoMessages():"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.walk(module)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            for code in non_iterating_code:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                with_value \u003d code.format(dict_method)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                node \u003d astroid.extract_node(with_value)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                checker \u003d \"dict-{}-not-iterating\".format(method)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d testutils.Message(checker, node\u003dnode)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    self.checker.visit_call(node)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_map_in_iterating_context(self):"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        self.iterating_context_tests(\"map\")"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_zip_in_iterating_context(self):"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        self.iterating_context_tests(\"zip\")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_range_in_iterating_context(self):"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        self.iterating_context_tests(\"range\")"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_filter_in_iterating_context(self):"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        self.iterating_context_tests(\"filter\")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    def defined_method_test(self, method, warning):"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Helper for verifying that a certain method is not defined.\"\"\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                def __{}__(self, other):  #@"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass\"\"\".format("
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                method"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(warning, node\u003dnode)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_functiondef(node)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_delslice_method(self):"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"delslice\", \"delslice-method\")"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_getslice_method(self):"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"getslice\", \"getslice-method\")"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_setslice_method(self):"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"setslice\", \"setslice-method\")"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_coerce_method(self):"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"coerce\", \"coerce-method\")"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_oct_method(self):"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"oct\", \"oct-method\")"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_hex_method(self):"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"hex\", \"hex-method\")"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_nonzero_method(self):"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"nonzero\", \"nonzero-method\")"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_cmp_method(self):"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"cmp\", \"cmp-method\")"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_div_method(self):"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"div\", \"div-method\")"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_idiv_method(self):"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"idiv\", \"idiv-method\")"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_rdiv_method(self):"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        self.defined_method_test(\"rdiv\", \"rdiv-method\")"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_eq_and_hash_method(self):"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Helper for verifying that a certain method is not defined.\"\"\""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):  #@"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                def __eq__(self, other):"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                def __hash__(self):"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass\"\"\""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_classdef(node)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_eq_and_hash_is_none(self):"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Helper for verifying that a certain method is not defined.\"\"\""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):  #@"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                def __eq__(self, other):"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "                __hash__ \u003d None\"\"\""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_classdef(node)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_eq_without_hash_method(self):"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\"Helper for verifying that a certain method is not defined.\"\"\""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):  #@"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                def __eq__(self, other):"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass\"\"\""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"eq-without-hash\", node\u003dnode)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_classdef(node)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_relative_import(self):"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\"import string  #@\")"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_import(node)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            # message should only be added once"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_import(node)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_relative_from_import(self):"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\"from os import path  #@\")"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            # message should only be added once"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_absolute_import(self):"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        module_import \u003d astroid.parse("
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            \"from __future__ import absolute_import; import os\""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        module_from \u003d astroid.parse("
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            \"from __future__ import absolute_import; from os import path\""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            for module in (module_import, module_from):"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "                self.walk(module)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_import_star_module_level(self):"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        def test():"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            from lala import * #@"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        star \u003d testutils.Message(\"import-star-module-level\", node\u003dnode)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute, star):"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_division(self):"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        nodes \u003d astroid.extract_node("
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\"\\"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "            from _unknown import a, b"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            3 / 2  #@"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            3 / int(a) #@"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            int(a) / 3 #@"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            a / b #@"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        for node in nodes:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d testutils.Message(\"old-division\", node\u003dnode)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "            with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_binop(node)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_division_with_future_statement(self):"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(\"from __future__ import division; 3 / 2\")"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_floor_division(self):"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\" 3 // 2  #@\")"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_binop(node)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_division_by_float(self):"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        nodes \u003d astroid.extract_node("
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\"\\"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "            3.0 / 2  #@"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "            3 / 2.0  #@"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            3 / float(a)  #@"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            float(a) / 3  #@"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "            for node in nodes:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_binop(node)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_division_different_types(self):"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        nodes \u003d astroid.extract_node("
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        class A:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        A / 2 #@"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        A() / 2 #@"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        \"a\" / \"a\" #@"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        class Path:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "            def __div__(self, other):"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                return 42"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        Path() / 24 #@"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        for node in nodes:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            with self.assertNoMessages():"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_binop(node)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_dict_iter_method(self):"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        for meth in (\"keys\", \"values\", \"items\"):"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "            node \u003d astroid.extract_node(\"x.iter%s()  #@\" % meth)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d testutils.Message(\"dict-iter-method\", node\u003dnode)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "            with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_call(node)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_dict_iter_method_on_dict(self):"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        nodes \u003d astroid.extract_node("
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        from collections import defaultdict"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        {}.iterkeys() #@"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultdict(list).iterkeys() #@"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        class Someclass(dict):"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        Someclass().iterkeys() #@"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        # Emits even though we are not sure they are dicts"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        x.iterkeys() #@"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        def func(x):"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "            x.iterkeys() #@"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        for node in nodes:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d testutils.Message(\"dict-iter-method\", node\u003dnode)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "            with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_call(node)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_dict_not_iter_method(self):"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        arg_node \u003d astroid.extract_node(\"x.iterkeys(x)  #@\")"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        stararg_node \u003d astroid.extract_node(\"x.iterkeys(*x)  #@\")"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        kwarg_node \u003d astroid.extract_node(\"x.iterkeys(y\u003dx)  #@\")"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            for node in (arg_node, stararg_node, kwarg_node):"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_call(node)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_dict_view_method(self):"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        for meth in (\"keys\", \"values\", \"items\"):"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "            node \u003d astroid.extract_node(\"x.view%s()  #@\" % meth)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d testutils.Message(\"dict-view-method\", node\u003dnode)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_call(node)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_dict_viewkeys(self):"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        nodes \u003d astroid.extract_node("
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        from collections import defaultdict"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        {}.viewkeys() #@"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultdict(list).viewkeys() #@"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        class Someclass(dict):"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        Someclass().viewkeys() #@"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        # Emits even though they might not be dicts"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        x.viewkeys() #@"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        def func(x):"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "            x.viewkeys() #@"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        for node in nodes:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d testutils.Message(\"dict-view-method\", node\u003dnode)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "            with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_call(node)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_next_method(self):"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\"x.next()  #@\")"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"next-method-called\", node\u003dnode)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_not_next_method(self):"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        arg_node \u003d astroid.extract_node(\"x.next(x)  #@\")"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        stararg_node \u003d astroid.extract_node(\"x.next(*x)  #@\")"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        kwarg_node \u003d astroid.extract_node(\"x.next(y\u003dx)  #@\")"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "            for node in (arg_node, stararg_node, kwarg_node):"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_call(node)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_metaclass_assignment(self):"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):  #@"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "                __metaclass__ \u003d type\"\"\""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"metaclass-assignment\", node\u003dnode)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_classdef(node)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_metaclass_global_assignment(self):"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(\"__metaclass__ \u003d type\")"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_xreadlines_attribute(self):"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        f.xreadlines #@"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"xreadlines-attribute\", node\u003dnode)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_exception_message_attribute(self):"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "            raise Exception(\"test\")"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        except Exception as e:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            e.message #@"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"exception-message-attribute\", node\u003dnode)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_normal_message_attribute(self):"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        e.message #@"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_invalid_codec(self):"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\u0027foobar.encode(\"hex\") #@\u0027)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"invalid-str-codec\", node\u003dnode)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_valid_codec(self):"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\u0027foobar.encode(\"ascii\", \"ignore\")  #@\u0027)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_visit_call_with_kwarg(self):"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\u0027foobar.raz(encoding\u003d\"hex\")  #@\u0027)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_invalid_open_codec(self):"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\u0027open(foobar, encoding\u003d\"hex\") #@\u0027)"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"invalid-str-codec\", node\u003dnode)"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_valid_open_codec(self):"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(\u0027open(foobar, encoding\u003d\"palmos\") #@\u0027)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_using_cmp_argument(self):"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        nodes \u003d astroid.extract_node("
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "        [].sort(cmp\u003dlambda x: x) #@"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        a \u003d list(range(x))"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        a.sort(cmp\u003dlambda x: x) #@"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        sorted([], cmp\u003dlambda x: x) #@"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        for node in nodes:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d testutils.Message(\"using-cmp-argument\", node\u003dnode)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "            with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_call(node)"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_sys_maxint(self):"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        import sys"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.maxint #@"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"sys-max-int\", node\u003dnode)"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_itertools_izip(self):"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "        from itertools import izip #@"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"deprecated-itertools-function\", node\u003dnode)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message, message):"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_deprecated_types_fields(self):"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "        from types import StringType #@"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"deprecated-types-field\", node\u003dnode)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message, message):"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_sys_maxint_imort_from(self):"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        from sys import maxint #@"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"sys-max-int\", node\u003dnode)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message, message):"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_object_maxint(self):"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        sys \u003d object()"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.maxint #@"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_import(self):"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "        import urllib2, sys #@"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"bad-python3-import\", node\u003dnode)"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message, message):"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_import(node)"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_import_turtle(self):"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        import turtle #@"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        turtle.Turtle()"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message):"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_import(node)"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_import_dbm(self):"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "        from dbm import open as open_ #@"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        open_(\"dummy.db\")"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message):"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_import_conditional(self):"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "        import six"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "        if six.PY2:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "            import urllib2 #@"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message):"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_import(node)"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_import_try_except_handler(self):"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "            from hashlib import sha"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        except:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "            import sha #@"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message):"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_import(node)"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_import_try(self):"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "            import md5  #@"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "        except:"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "            from hashlib import md5"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        finally:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message):"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_import(node)"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_import_try_finally(self):"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "            import Queue  #@"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "        finally:"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "            import queue"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"bad-python3-import\", node\u003dnode)"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message, message):"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_import(node)"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_import_from(self):"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "        from cStringIO import StringIO #@"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"bad-python3-import\", node\u003dnode)"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message, message):"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_string_attribute(self):"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        import string"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        string.maketrans #@"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"deprecated-string-function\", node\u003dnode)"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_operator_attribute(self):"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        import operator"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        operator.div #@"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"deprecated-operator-function\", node\u003dnode)"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_comprehension_escape(self):"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        assign, escaped_node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "        a \u003d [i for i in range(10)] #@"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        i #@"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "        good_module \u003d astroid.parse("
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "        {c for c in range(10)} #@"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        {j:j for j in range(10)} #@"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        [image_child] \u003d [x for x in range(10)]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "        thumbnail \u003d func(__(image_child))"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"comprehension-escape\", node\u003descaped_node)"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_listcomp(assign.value)"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(good_module)"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_comprehension_escape_newly_introduced(self):"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "        [i for i in range(3)]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "        for i in range(3):"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "            i"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(node)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_exception_escape(self):"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse("
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "        try: 1/0"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "        except ValueError as exc:"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "            pass"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        exc #@"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "           2/0"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "        except (ValueError, TypeError) as exc:"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "           exc \u003d 2"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        exc #@"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "           2/0"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "        except (ValueError, TypeError): #@"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "           exc \u003d 2"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        exc #@"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "        try:"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "           1/0"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "        except (ValueError, TypeError) as exc:"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "           foo(bar for bar in exc.bar)"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"exception-escape\", node\u003dmodule.body[1].value)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_excepthandler(module.body[0].handlers[0])"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_excepthandler(module.body[2].handlers[0])"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_excepthandler(module.body[4].handlers[0])"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_excepthandler(module.body[6].handlers[0])"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_sys_attribute(self):"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "        import sys"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "        sys.exc_clear #@"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"deprecated-sys-function\", node\u003dnode)"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_urllib_attribute(self):"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "        nodes \u003d astroid.extract_node("
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "        import urllib"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "        urllib.addbase #@"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "        urllib.splithost #@"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "        urllib.urlretrieve #@"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "        urllib.urlopen #@"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        urllib.urlencode #@"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "        for node in nodes:"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d testutils.Message(\"deprecated-urllib-function\", node\u003dnode)"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "            with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "                self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_ok_string_attribute(self):"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        import string"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        string.ascii_letters #@"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_attribute(node)"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_string_call(self):"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "        import string"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "        string.upper(\"hello world\") #@"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"deprecated-string-function\", node\u003dnode)"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_ok_shadowed_call(self):"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "        import six.moves.configparser"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "        six.moves.configparser.ConfigParser() #@"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_ok_string_call(self):"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "        import string"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "        string.Foramtter() #@"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_string_import_from(self):"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "         from string import atoi #@"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "         \"\"\""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"deprecated-string-function\", node\u003dnode)"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message, message):"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_ok_string_import_from(self):"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "         from string import digits #@"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "         \"\"\""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "        absolute_import_message \u003d testutils.Message(\"no-absolute-import\", node\u003dnode)"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(absolute_import_message):"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_importfrom(node)"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_str_translate_call_string_literal(self):"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "         foobar.translate(None, \u0027abc123\u0027) #@"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "         \"\"\""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message("
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-str-translate-call\", node\u003dnode, confidence\u003dINFERENCE_FAILURE"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_str_translate_call_variable(self):"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "         def raz(foobar):"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "           foobar.translate(None, \u0027hello\u0027) #@"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "         \"\"\""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message("
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-str-translate-call\", node\u003dnode, confidence\u003dINFERENCE_FAILURE"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_bad_str_translate_call_infer_str(self):"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "         foobar \u003d \"hello world\""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "         foobar.translate(None, foobar) #@"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "         \"\"\""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message("
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "            \"deprecated-str-translate-call\", node\u003dnode, confidence\u003dINFERENCE"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_ok_str_translate_call_integer(self):"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "         foobar.translate(None, 33) #@"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "         \"\"\""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_ok_str_translate_call_keyword(self):"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "         foobar.translate(None, \u0027foobar\u0027, raz\u003d33) #@"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "         \"\"\""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_ok_str_translate_call_not_str(self):"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "         foobar \u003d {}"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "         foobar.translate(None, \u0027foobar\u0027) #@"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "         \"\"\""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_call(node)"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_non_py2_conditional(self):"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"\"\""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "        from __future__ import absolute_import"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "        import sys"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003d {}"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "        if sys.maxsize:"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "            x.iterkeys()  #@"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node(code)"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d node.parent.parent"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"dict-iter-method\", node\u003dnode)"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_six_conditional(self):"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"\"\""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "        from __future__ import absolute_import"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "        import six"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003d {}"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "        if six.PY2:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "            x.iterkeys()"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_versioninfo_conditional(self):"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"\"\""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "        from __future__ import absolute_import"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "        import sys"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003d {}"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "        if sys.version_info[0] \u003d\u003d 2:"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "            x.iterkeys()"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_versioninfo_tuple_conditional(self):"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"\"\""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "        from __future__ import absolute_import"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "        import sys"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003d {}"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "        if sys.version_info \u003d\u003d (2, 7):"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "            x.iterkeys()"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_six_ifexp_conditional(self):"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "        code \u003d \"\"\""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "        from __future__ import absolute_import"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "        import six"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "        import string"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "        string.translate if six.PY2 else None"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "        module \u003d astroid.parse(code)"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "            self.walk(module)"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_next_defined(self):"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "                def next(self):  #@"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass\"\"\""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"next-method-defined\", node\u003dnode)"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_functiondef(node)"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_next_defined_too_many_args(self):"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "                def next(self, foo\u003dNone):  #@"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass\"\"\""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_functiondef(node)"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_next_defined_static_method_too_many_args(self):"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "                @staticmethod"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                def next(self):  #@"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass\"\"\""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertNoMessages():"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_functiondef(node)"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_next_defined_static_method(self):"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "                @staticmethod"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "                def next():  #@"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass\"\"\""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"next-method-defined\", node\u003dnode)"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_functiondef(node)"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "    def test_next_defined_class_method(self):"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        node \u003d astroid.extract_node("
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\"\""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "            class Foo(object):"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                @classmethod"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "                def next(cls):  #@"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "                    pass\"\"\""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "        message \u003d testutils.Message(\"next-method-defined\", node\u003dnode)"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "        with self.assertAddsMessages(message):"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "            self.checker.visit_functiondef(node)"
      }
    ],
    "authorContributionMap": {
      "Athos Ribeiro": 1,
      "-": 1145
    }
  }
]
